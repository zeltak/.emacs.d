"a378d742fc931f6886349b45f27c5507f1b40132"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((318983 . 318988) 318982) nil (21678 19920 317078 366000) 0 nil]) ((#("d" 0 1 (fontified t face org-level-3)) . 318919)) nil (21678 19920 317084 457000) 0 nil]) ((#("e" 0 1 (fontified t face org-level-3)) . 318919)) nil (21678 19920 317087 614000) 0 nil]) ((nil rear-nonsticky nil 318984 . 318985) (nil fontified nil 318916 . 318985) (318916 . 318985)) nil (21678 19920 317091 46000) 0 nil]) ((318912 . 318916)) nil (21678 19920 317093 754000) 0 nil]) ((nil org-todo-head nil 318123 . 318151) (nil org-todo-head nil 318122 . 318123) (nil org-todo-head nil 318121 . 318122) (nil org-todo-head nil 318119 . 318121) (#(" TODO " 0 1 (fontified t org-category #1="r" face org-level-3) 1 5 (fontified t org-category #1# face (:foreground "red" :weight bold)) 5 6 (fontified t org-category #1# face org-level-3)) . 318122) (t 21678 10895 308002 463000) (318128 . 318129) 318119 (t 21678 10895 308002 463000)) nil (21678 19920 317100 109000) 0 nil]) ((#("
" 0 1 (fontified t)) . 318764) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1)) nil (21678 18691 947471 196000) 0 nil]) ((nil rear-nonsticky nil 318765 . 318766) (nil fontified nil 318765 . 318766) (#("
" 0 1 (org-category "settings" face org-block-end-line fontified nil)) . -318916) (318765 . 318917)) nil (21678 18691 947478 712000) 0 nil]) ((#("p" 0 1 (fontified t)) . -318765) (undo-tree-id4 . -1) (undo-tree-id5 . -1)) nil (21678 18691 947484 377000) 0 nil]) ((318765 . 318766)) nil (21678 18691 947486 964000) 0 nil]) ((318763 . 318765)) nil (21678 18691 947489 25000) 0 nil]) ((318762 . 318763) (#("ie" 0 2 (fontified nil org-category #1#)) . 318762) (undo-tree-id6 . -2) (318750 . 318762) 318752) nil (21678 18691 947492 941000) 0 nil]) ((318750 . 318752)) nil (21678 18691 947495 550000) 0 nil]) ((318749 . 318750)) nil (21678 18691 947497 337000) 0 nil]) ((#("If you do not wish ESS to prompt for a starting directory when starting a new process, set the variable ess-ask-for-ess-directory to nil. In this case, the starting directory will be set using one of the following methods:
If the variable ess-directory-function stores the name of a function, the value returned by this function is used. The default for this variable is nil.
Otherwise, if the variable ess-directory stores the name of a directory (ending in a slash), this value is used. The default for this variable is nil.
Otherwise, the working directory of the current buffer is used.
If ess-ask-for-ess-directory has a non-nil value (as it does by default) then the value determined by the above rules provides the default when prompting for the starting directory. Incidentally, ess-directory is an ideal variable to set in ess-pre-run-hook.


If you like to keep a record of your S sessions, set the variable ess-ask-about-transfile to t, and you will be asked for a filename for the transcript before the ESS process starts.
" 0 223 (fontified t org-category #1#) 223 850 (fontified t org-category #1#) 850 852 (fontified t org-category #1#) 852 1035 (fontified t org-category #1#)) . 318752) 319604 (undo-tree-id7 . -852) (undo-tree-id8 . -852) (undo-tree-id9 . 972) (undo-tree-id10 . -852)) nil (21678 18691 947507 37000) 0 nil]) ((nil rear-nonsticky nil 318747 . 318748) (nil fontified nil 318157 . 318748) (318157 . 318748)) nil (21678 18691 947510 529000) 0 nil]) ((318157 . 318161) (t 21678 10372 56005 246000)) nil (21678 18691 947512 768000) 0 nil]) nil nil (21678 18691 947514 159000) 0 nil] #2# 1440 17 nil]