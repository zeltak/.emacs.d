"f2121666e6f6db7651e7cf9f8a7d70ddc0e5d597"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((83916 . 83918) (83916 . 83933) (83905 . 83917) 83238) nil (21660 24180 1642 676000) 0 nil]) ((83388 . 83389) (#("0" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face nil)) . 83388) (t 21658 25321 202993 763000)) nil (21660 24180 1650 816000) 0 nil]) ((102557 . 104589) (#("
** functions
*** clear shell function
#+BEGIN_SRC emacs-lisp :results none
(defun clear-shell ()
   (interactive)
   (let ((old-max comint-buffer-maximum-size))
     (setq comint-buffer-maximum-size 0)
     (comint-truncate-buffer)
     (setq comint-buffer-maximum-size old-max))) 
#+END_SRC 
*** This recalls the R statement from your R statement history, but it tries to match it with the one which is already on your line.

#+BEGIN_SRC emacs-lisp :results none
(add-hook 'inferior-ess-mode-hook
    '(lambda nil
          (define-key inferior-ess-mode-map [\\C-up]
              'comint-previous-matching-input-from-input)
          (define-key inferior-ess-mode-map [\\C-down]
              'comint-next-matching-input-from-input)
          (define-key inferior-ess-mode-map [\\C-x \\t]
              'comint-dynamic-complete-filename)
     )
 )
#+END_SRC
This recalls the R statement from your R statement history, but it tries to match it with the one which is already on your line. So, for example, typing pl in R process and pressing \\C-up (thatâ€™s control and the up arrow) will cycle through all the statements which start with pl, so it will recall for example all the plot(... commands.

*** allow ess to run procceses in background

#+BEGIN_SRC emacs-lisp :results none
(setq ess-eval-visibly 'nowait)
#+END_SRC
*** asks where to save the text in the buffer with R process
#+BEGIN_SRC emacs-lisp :results none
(setq ess-ask-about-transfile t)
#+END_SRC
This way ESS always asks where to save the text in the buffer with R process. You can number these files according to date, so you will always have another way to track what exactly you were doing. The only caveat of this option is that for some reason ESS sets the R buffer to read only, after loading the R. The shortcut for making buffer writable is C-x C-q.

" 0 1 (fontified t) 1 2 (face org-level-2 fontified t) 2 4 (face org-level-2 fontified t) 4 13 (face org-level-2 fontified t) 13 14 (fontified t) 14 16 (face org-level-3 fontified t) 16 18 (face org-level-3 fontified t) 18 38 (face org-level-3 fontified t) 38 39 (fontified t) 39 75 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 75 76 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 76 77 (src-block t face nil font-lock-multiline t font-lock-fontified t fontified t) 77 82 (src-block t face font-lock-keyword-face font-lock-multiline t font-lock-fontified t fontified t) 82 83 (src-block t face nil font-lock-multiline t font-lock-fontified t fontified t) 83 94 (src-block t face font-lock-function-name-face font-lock-multiline t font-lock-fontified t fontified t) 94 119 (src-block t face nil font-lock-multiline t font-lock-fontified t fontified t) 119 122 (src-block t face font-lock-keyword-face font-lock-multiline t font-lock-fontified t fontified t) 122 282 (src-block t font-lock-multiline t font-lock-fontified t fontified t) 282 283 (src-block t font-lock-multiline t font-lock-fontified t fontified t) 283 293 (face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t) 293 294 (face org-block-end-line fontified t) 294 296 (face org-level-3 fontified t) 296 298 (face org-level-3 fontified t) 298 426 (face org-level-3 fontified t) 426 427 (fontified t) 427 1050 (fontified nil) 1050 1051 (fontified nil charset greek-iso8859-7) 1051 1825 (fontified nil)) . 102557) (t 21658 24556 971973 343000)) nil (21660 24180 1657 600000) 0 nil]) ((31767 . 31768)) nil (21658 24556 881631 197000) 0 nil]) ((31756 . 31767)) nil (21658 24556 881643 321000) 0 nil]) ((#("d" 0 1 (fontified t)) . -31756)) nil (21658 24556 881647 905000) 0 nil]) ((#(" " 0 1 (fontified t)) . -31757)) nil (21658 24556 881652 347000) 0 nil]) ((#("i" 0 1 (fontified t)) . -31758)) nil (21658 24556 881656 384000) 0 nil]) ((#("s" 0 1 (fontified t)) . -31759)) nil (21658 24556 881660 368000) 0 nil]) ((#(" " 0 1 (fontified t)) . -31760)) nil (21658 24556 881664 391000) 0 nil]) ((31754 . 31761)) nil (21658 24556 881668 220000) 0 nil]) ((31753 . 31754)) nil (21658 24556 881671 521000) 0 nil]) ((31738 . 31753)) nil (21658 24556 881674 803000) 0 nil]) ((31733 . 31738)) nil (21658 24556 881679 342000) 0 nil]) ((#("m" 0 1 (fontified t)) . -31733)) nil (21658 24556 881682 778000) 0 nil]) ((31733 . 31734)) nil (21658 24556 881697 557000) 0 nil]) ((31728 . 31733)) nil (21658 24556 881702 439000) 0 nil]) ((31726 . 31728)) nil (21658 24556 881706 600000) 0 nil]) ((#("m" 0 1 (fontified t)) . -31726)) nil (21658 24556 881711 720000) 0 nil]) ((#("e" 0 1 (fontified t)) . -31727)) nil (21658 24556 881717 313000) 0 nil]) ((#("p" 0 1 (fontified t)) . -31728)) nil (21658 24556 881722 885000) 0 nil]) ((#("l" 0 1 (fontified t)) . -31729)) nil (21658 24556 881728 278000) 0 nil]) ((#("a" 0 1 (fontified t)) . -31730)) nil (21658 24556 881735 236000) 0 nil]) ((#(" " 0 1 (fontified t)) . -31731)) nil (21658 24556 881740 511000) 0 nil]) ((#("n" 0 1 (fontified t)) . -31732)) nil (21658 24556 881751 206000) 0 nil]) ((31725 . 31733)) nil (21658 24556 881758 476000) 0 nil]) ((31705 . 31725)) nil (21658 24556 881764 705000) 0 nil]) ((31704 . 31705)) nil (21658 24556 881770 277000) 0 nil]) ((nil rear-nonsticky nil 31703 . 31704) (nil fontified nil 31661 . 31704) (31661 . 31704)) nil (21658 24556 881778 233000) 0 nil]) ((31660 . 31661)) nil (21658 24556 881784 527000) 0 nil]) ((nil org-todo-head nil 31647 . 31660) (nil org-todo-head nil 31646 . 31647) (nil org-todo-head nil 31642 . 31646) (nil org-todo-head nil 31641 . 31642) (nil org-todo-head nil 31640 . 31641) (nil org-todo-head nil 31639 . 31640) (#(" " 0 1 (fontified t face org-level-2)) . 31660) (undo-tree-id7 . -1) (#(" " 0 1 (fontified t face org-level-2)) . 31641) (31642 . 31648) 31656) nil (21658 24556 881808 801000) 0 nil]) ((31651 . 31656)) nil (21658 24556 881816 624000) 0 nil]) ((31639 . 31651)) nil (21658 24556 881820 716000) 0 nil]) ((31638 . 31639) 30984) nil (21658 24556 881825 138000) 0 nil] [nil ([nil ([nil ([nil ([nil nil ((6432 . 6444)) ((#("xpand region" 0 12 (fontified t)) . 6432)) (21658 24516 109712 547000) 0 nil]) ((#("c" 0 1 (fontified t)) . -6432)) ((6432 . 6433)) (21658 24516 110114 448000) 0 nil]) ((6423 . 6433)) ((#("explore ec" 0 9 (fontified nil) 9 10 (fontified nil)) . 6423)) (21658 24516 952787 278000) 0 nil]) ((6422 . 6428) 6406) ((#("
     " 0 1 (fontified t) 1 6 (fontified nil)) . 6422) (undo-tree-id2 . 5) (undo-tree-id3 . 6) (undo-tree-id4 . 5) (undo-tree-id5 . 5) (undo-tree-id6 . 5)) (21658 24517 364976 54000) 0 nil]) ((nil org-todo-head nil 6416 . 6422) (nil org-todo-head nil 6415 . 6416) (nil org-todo-head nil 6411 . 6415) (nil org-todo-head nil 6410 . 6411) (nil org-todo-head nil 6409 . 6410) (nil org-todo-head nil 6406 . 6409) (#(" " 0 1 (fontified t face org-level-4)) . 6410) (6411 . 6417) 6410) ((#(" TODO " 0 1 (fontified nil org-todo-head nil face org-level-4) 1 5 (fontified nil org-todo-head nil face (:foreground "red" :weight bold)) 5 6 (fontified nil org-todo-head nil face org-level-4)) . 6411) (6410 . 6411) (nil org-todo-head #1="TODO" 6406 . 6409) (nil org-todo-head #1# 6409 . 6410) (nil org-todo-head #1# 6410 . 6411) (nil org-todo-head #1# 6411 . 6415) (nil org-todo-head #1# 6415 . 6416) (nil org-todo-head #1# 6416 . 6422)) (21658 24517 713736 602000) 0 nil]) ((#("#" 0 1 (fontified t font-lock-fontified t font-lock-multiline t src-block t)) . 6847)) nil (21658 24518 262050 271000) 0 nil]) ((nil rear-nonsticky nil 6865 . 6866) (nil fontified nil 6819 . 6866) (6819 . 6866)) nil (21658 24516 109747 285000) 0 nil] [nil nil ((nil rear-nonsticky nil 6874 . 6875) (nil fontified nil 6819 . 6875) (6819 . 6875)) ((#("asks where to save the text in the buffer with R process" 0 55 (fontified nil font-lock-fontified t font-lock-multiline t src-block t) 55 56 (fontified nil rear-nonsticky nil font-lock-fontified t font-lock-multiline t src-block t)) . 6819) (undo-tree-id0 . 1) (undo-tree-id1 . 1) (nil rear-nonsticky t 6874 . 6875)) (21658 24129 633877 715000) 0 nil]) ((6818 . 6819)) nil (21658 24129 634606 661000) 0 nil]) ((6817 . 6823) 6816 (t 21657 7910 757080 382000)) nil (21658 24129 633896 23000) 0 nil] [nil nil ((6816 . 6818) (t 21657 7910 757080 382000)) ((#("

" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t)) . 6816)) (21658 24124 389523 498000) 0 nil]) nil nil (21658 24124 390287 411000) 0 nil] #2# 2762 45 nil]