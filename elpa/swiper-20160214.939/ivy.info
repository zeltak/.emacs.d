This is ivy.info, produced by makeinfo version 5.2 from ivy.texi.

Ivy manual, version 0.7.0

   Ivy is an interactive interface for completion in Emacs.  Emacs uses
completion mechanism in a variety of contexts: code, menus, commands,
variables, functions, etc.  Completion entails listing, sorting,
filtering, previewing, and applying actions on selected items.  When
active, ‘ivy-mode’ completes the selection process by narrowing
available choices while previewing in the minibuffer.  Selecting the
final candidate is either through simple keyboard character inputs or
through powerful regular expressions.

   Copyright (C) 2015 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Ivy: (ivy).           Using Ivy for completion.
END-INFO-DIR-ENTRY


File: ivy.info,  Node: Top,  Next: Introduction,  Up: (dir)

Ivy User Manual
***************

Ivy manual, version 0.7.0

   Ivy is an interactive interface for completion in Emacs.  Emacs uses
completion mechanism in a variety of contexts: code, menus, commands,
variables, functions, etc.  Completion entails listing, sorting,
filtering, previewing, and applying actions on selected items.  When
active, ‘ivy-mode’ completes the selection process by narrowing
available choices while previewing in the minibuffer.  Selecting the
final candidate is either through simple keyboard character inputs or
through powerful regular expressions.

   Copyright (C) 2015 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”

* Menu:

* Introduction::
* Installation::
* Getting started::
* Key bindings::
* Completion styles::
* Customization::
* Commands::
* API::
* Variable Index::
* Keystroke Index::

— The Detailed Node Listing —

Installation

* Installing from Emacs Package Manager::
* Installing from the Git repository::

Getting started

* Basic customization::

Key bindings

* Global key bindings::
* Minibuffer key bindings::

Minibuffer key bindings

* Key bindings for navigation::
* Key bindings for single selection, action, then exit minibuffer: Key bindings for single selection action then exit minibuffer. 
* Key bindings for multiple selections and actions, keep minibuffer open: Key bindings for multiple selections and actions keep minibuffer open. 
* Key bindings that alter the minibuffer input::
* Other key bindings::
* Hydra in the minibuffer::
* Saving the current completion session to a buffer::
Completion styles

* ivy--regex-plus::
* ivy--regex-ignore-order::
* ivy--regex-fuzzy::

Customization

* Faces::
* Defcustoms::
* Actions::
* Packages::

Actions

* What are actions?::
* How can different actions be called?::
* How can the action list be modified?::
* Example - add two actions to each command::
* Example - define a new command with several actions::

Example - add two actions to each command

* How to undo adding the two actions::
* How to add actions to a specific command::

Example - define a new command with several actions

* Testing out the above function with ‘ivy-occur’::
Commands

* File Name Completion::
* Buffer Name Completion::
* Counsel commands::

API

* Required arguments for ‘ivy-read’::
* Optional arguments for ‘ivy-read’::
* Example - ‘counsel-describe-function’::
* Example - ‘counsel-locate’::


File: ivy.info,  Node: Introduction,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction
**************

Ivy is for quick and easy selection from a list.  When Emacs prompts for
a string from a list of several possible choices, Ivy springs into
action to assist in narrowing and picking the right string from a vast
number of choices.

   Ivy strives for minimalism, simplicity, customizability and
discoverability.

Minimalism
..........

     Uncluttered minibuffer is minimalism.  Ivy shows the completion
     defaults, the number of matches, and 10 candidate matches below the
     input line.  Customize ‘ivy-length’ to adjust the number of
     candidate matches displayed in the minibuffer.

Simplicity
..........

     Simplicity is about Ivy’s behavior in the minibuffer.  It is also
     about the code interface to extend Ivy’s functionality.  The
     minibuffer area behaves as close to ‘fundamental-mode’ as possible.
     ‘SPC’ inserts a space, for example, instead of being bound to the
     more complex ‘minibuffer-complete-word’.  Ivy’s code uses
     easy-to-examine global variables; avoids needless complications
     with branch-introducing custom macros.

Customizability
...............

     Customizability is about being able to use different methods and
     interfaces of completion to tailor the selection process.  For
     example, adding a custom display function that points to a selected
     candidate with ‘->’, instead of highlighting the selected candidate
     with the ‘ivy-current-match’ face.  Or take the customization of
     actions, say after the candidate function is selected.  ‘RET’ uses
     ‘counsel-describe-function’ to describe the function, whereas ‘M-o
     d’ jumps to that function’s definition in the code.  The ‘M-o’
     prefix can be uniformly used with characters like ‘d’ to group
     similar actions.

Discoverability
...............

     Ivy displays easily discoverable commands through the hydra
     facility.  ‘C-o’ in the minibuffer displays a hydra menu.  It opens
     up within an expanded minibuffer area.  Each menu item comes with
     short documentation strings and highlighted one-key completions.
     So discovering even seldom used keys is simply a matter of ‘C-o’ in
     the minibuffer while in the midst of the Ivy interaction.  This
     discoverability minimizes exiting Ivy interface for documentation
     look-ups.


File: ivy.info,  Node: Installation,  Next: Getting started,  Prev: Introduction,  Up: Top

2 Installation
**************

Install Ivy automatically through Emacs’s package manager, or manually
from Ivy’s development repository.

   Ivy should run fine on a typical Emacs bundled in your OS’s package
manager, the oldest of which is Emacs 24.3.1.  However, the faces
display will work much better for Emacs 24.5.1, which is the latest
stable version.
* Menu:

* Installing from Emacs Package Manager::
* Installing from the Git repository::


File: ivy.info,  Node: Installing from Emacs Package Manager,  Next: Installing from the Git repository,  Up: Installation

2.1 Installing from Emacs Package Manager
=========================================

‘M-x’ ‘package-install’ ‘RET’ ‘swiper’ ‘RET’

   Ivy is installed as part of ‘swiper’ package.  ‘swiper’ is available
from two different package archives, GNU ELPA and MELPA. For the latest
stable version, use the GNU ELPA archives using the above M-x command.

   For current hourly builds, use the MELPA archives.  See the code
below for adding MELPA to the list of package archives:

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.org/packages/"))

   After this do ‘M-x’ ‘package-refresh-contents’ ‘RET’, followed by
‘M-x’ ‘package-install’ ‘RET’ ‘swiper’ ‘RET’.

   For package manager details, see *note (emacs)Packages::.


File: ivy.info,  Node: Installing from the Git repository,  Prev: Installing from Emacs Package Manager,  Up: Installation

2.2 Installing from the Git repository
======================================

Why install from Git?
.....................

        • No need to wait for MELPA’s hourly builds
        • Easy to revert to previous versions
        • Contribute to Ivy’s development; send patches; pull requests

Configuration steps
...................

     First clone the Swiper repository:

          cd ~/git && git clone https://github.com/abo-abo/swiper
          cd swiper && make compile

     Then add this to Emacs init:

          (add-to-list 'load-path "~/git/swiper/")
          (require 'ivy)

     To update the code:

          git pull
          make


File: ivy.info,  Node: Getting started,  Next: Key bindings,  Prev: Installation,  Up: Top

3 Getting started
*****************

First, enable Ivy completion everywhere:

     (ivy-mode 1)

   Note: ‘ivy-mode’ can be toggled on and off with ‘M-x’ ‘ivy-mode’.
* Menu:

* Basic customization::


File: ivy.info,  Node: Basic customization,  Up: Getting started

3.1 Basic customization
=======================

Here are some basic settings particularly useful for new Ivy users:

     (setq ivy-use-virtual-buffers t)
     (setq ivy-height 10)
     (setq ivy-display-style 'fancy)
     (setq ivy-count-format "(%d/%d) ")

   For additional customizations, refer to ‘M-x describe-variable’
documentation.


File: ivy.info,  Node: Key bindings,  Next: Completion styles,  Prev: Getting started,  Up: Top

4 Key bindings
**************

* Menu:

* Global key bindings::
* Minibuffer key bindings::


File: ivy.info,  Node: Global key bindings,  Next: Minibuffer key bindings,  Up: Key bindings

4.1 Global key bindings
=======================

The recommended key bindings are:

Ivy-based interface to standard commands
........................................

          (global-set-key (kbd "C-s") 'swiper)
          (global-set-key (kbd "M-x") 'counsel-M-x)
          (global-set-key (kbd "C-x C-f") 'counsel-find-file)
          (global-set-key (kbd "<f1> f") 'counsel-describe-function)
          (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
          (global-set-key (kbd "<f1> l") 'counsel-load-library)
          (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
          (global-set-key (kbd "<f2> u") 'counsel-unicode-char)

Ivy-based interface to shell and system tools
.............................................

          (global-set-key (kbd "C-c g") 'counsel-git)
          (global-set-key (kbd "C-c j") 'counsel-git-grep)
          (global-set-key (kbd "C-c k") 'counsel-ag)
          (global-set-key (kbd "C-x l") 'counsel-locate)
          (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)

Ivy-resume and other commands
.............................

     ‘ivy-resume’ resumes the last Ivy-based completion.

          (global-set-key (kbd "C-c C-r") 'ivy-resume)


File: ivy.info,  Node: Minibuffer key bindings,  Prev: Global key bindings,  Up: Key bindings

4.2 Minibuffer key bindings
===========================

Ivy includes several minibuffer bindings, which are defined in the
‘ivy-minibuffer-map’ keymap variable.  The most frequently used ones are
described here.

   ‘swiper’ or ‘counsel-M-x’ add more through the ‘keymap’ argument to
‘ivy-read’.  These keys, also active in the minibuffer, are described
under their respective commands.

   An important idea behind ‘ivy-minibuffer-map’, unlike e.g.
‘isearch-mode-map’ or Ido keymap is that the minibuffer is a fully
capable editing area: bindings like ‘C-a’, ‘C-f’, ‘M-d’, ‘M-DEL’, ‘M-b’,
‘M-w’, ‘C-k’, ‘C-y’ all work as if you were in a ‘fundamental-mode’
buffer.
* Menu:

* Key bindings for navigation::
* Key bindings for single selection, action, then exit minibuffer: Key bindings for single selection action then exit minibuffer. 
* Key bindings for multiple selections and actions, keep minibuffer open: Key bindings for multiple selections and actions keep minibuffer open. 
* Key bindings that alter the minibuffer input::
* Other key bindings::
* Hydra in the minibuffer::
* Saving the current completion session to a buffer::


File: ivy.info,  Node: Key bindings for navigation,  Next: Key bindings for single selection action then exit minibuffer,  Up: Minibuffer key bindings

4.2.1 Key bindings for navigation
---------------------------------

   • ‘C-n’ (‘ivy-next-line’) selects the next candidate
   • ‘C-p’ (‘ivy-previous-line’) selects the previous candidate
   • ‘M-<’ (‘ivy-beginning-of-buffer’) selects the first candidate
   • ‘M->’ (‘ivy-end-of-buffer’) selects the last candidate
   • ‘C-v’ (‘ivy-scroll-up-command’) scrolls up by ‘ivy-height’ lines
   • ‘M-v’ (‘ivy-scroll-down-command’) scrolls down by ‘ivy-height’
     lines

 -- User Option: ivy-wrap
     This user option allows to get the wrap-around behavior for ‘C-n’
     and ‘C-p’.  When set to ‘t’, ‘ivy-next-line’ and
     ‘ivy-previous-line’ will cycle past the last and the first
     candidates respectively.

     This behavior is off by default.

 -- User Option: ivy-height
     Use this variable to adjust the minibuffer height, and therefore
     the scroll size for ‘C-v’ and ‘M-v’.


File: ivy.info,  Node: Key bindings for single selection action then exit minibuffer,  Next: Key bindings for multiple selections and actions keep minibuffer open,  Prev: Key bindings for navigation,  Up: Minibuffer key bindings

4.2.2 Key bindings for single selection, action, then exit minibuffer
---------------------------------------------------------------------

Ivy can offer several actions from which to choose which action to run.
This "calling an action" operates on the selected candidate.  For
example, when viewing a list of files, one action could open it for
editing, one to view it, another to invoke a special function, and so
on.  Custom actions can be added to this interface.  The precise action
to call on the selected candidate can be delayed until after the
narrowing is completed.  No need to exit the interface if unsure which
action to run.  This delayed flexibility and customization of actions
extends usability of lists in Emacs.

‘C-m’ or ‘RET’ (‘ivy-done’)
...........................

     Calls the default action and exits the minibuffer.

‘M-o’ (‘ivy-dispatching-done’)
..............................

     Presents all available valid actions from which to choose.  When
     there is only one action available, there is no difference between
     ‘M-o’ and ‘C-m’.

‘C-j’ (‘ivy-alt-done’)
......................

     When completing file names, selects the current directory candidate
     and starts a new completion session there.  Otherwise, it’s the
     same as ‘ivy-done’.

‘TAB’ (‘ivy-partial-or-done’)
.............................

     Attempts partial completion, extending current input as much as
     possible.  ‘TAB TAB’ is the same as ‘C-j’.

     Example ERT test:

          (should
           (equal (ivy-with
                   '(progn
                     (ivy-read "Test: " '("can do" "can't, sorry" "other"))
                     ivy-text)
                   "c <tab>")
                  "can"))

‘C-M-j’ (‘ivy-immediate-done’)
..............................

     Exits with _the current input_ instead of _the current candidate_
     (like other commands).

     This is useful e.g.  when you call ‘find-file’ to create a new
     file, but the desired name matches an existing file.  In that case,
     using ‘C-j’ would select that existing file, which isn’t what you
     want - use this command instead.

‘C-'’ (‘ivy-avy’)
.................

     Uses avy to select one of the candidates on the current candidate
     page.  This can often be faster than multiple ‘C-n’ or ‘C-p’
     keystrokes followed by ‘C-m’.


File: ivy.info,  Node: Key bindings for multiple selections and actions keep minibuffer open,  Next: Key bindings that alter the minibuffer input,  Prev: Key bindings for single selection action then exit minibuffer,  Up: Minibuffer key bindings

4.2.3 Key bindings for multiple selections and actions, keep minibuffer open
----------------------------------------------------------------------------

For repeatedly applying multiple actions or acting on multiple
candidates, Ivy does not close the minibuffer between commands.  It
keeps the minibuffer open for applying subsequent actions.

   Adding an extra meta key to the normal key chord invokes the special
version of the regular commands that enables applying multiple actions.

‘C-M-m’ (‘ivy-call’)
....................

     Is the non-exiting version of ‘C-m’ (‘ivy-done’).

     Instead of closing the minibuffer, ‘C-M-m’ allows selecting another
     candidate or another action.  For example, ‘C-M-m’ on functions
     list invokes ‘describe-function’.  When combined with ‘C-n’,
     function descriptions can be invoked quickly in succession.

‘C-M-o’ (‘ivy-dispatching-call’)
................................

     Is the non-exiting version of ‘M-o’ (‘ivy-dispatching-done’).

     For example, during the ‘counsel-rhythmbox’ completion, press
     ‘C-M-o e’ to en-queue the selected candidate, followed by ‘C-n C-m’
     to play the next candidate - the current action reverts to the
     default one after ‘C-M-o’.

‘C-M-n’ (‘ivy-next-line-and-call’)
..................................

     Combines ‘C-n’ and ‘C-M-m’.  Applies an action and moves to next
     line.

     Comes in handy when opening multiple files from
     ‘counsel-find-file’, ‘counsel-git-grep’, ‘counsel-ag’, or
     ‘counsel-locate’ lists.  Just hold ‘C-M-n’ for rapid-fire default
     action on each successive element of the list.

‘C-M-p’ (‘ivy-previous-line-and-call’)
......................................

     Combines ‘C-p’ and ‘C-M-m’.

     Similar to the above except it moves through the list in the other
     direction.

‘ivy-resume’
............

     Recalls the state of the completion session just before its last
     exit.

     Useful after an accidental ‘C-m’ (‘ivy-done’).


File: ivy.info,  Node: Key bindings that alter the minibuffer input,  Next: Other key bindings,  Prev: Key bindings for multiple selections and actions keep minibuffer open,  Up: Minibuffer key bindings

4.2.4 Key bindings that alter the minibuffer input
--------------------------------------------------

‘M-n’ (‘ivy-next-history-element’)
..................................

     Cycles forward through the Ivy command history.

     Ivy updates an internal history list after each action.  When this
     history list is empty, ‘M-n’ inserts symbol (or URL) at point into
     the minibuffer.

‘M-p’ (‘ivy-previous-history-element’)
......................................

     Cycles forward through the Ivy command history.

‘M-i’ (‘ivy-insert-current’)
............................

     Inserts the current candidate into the minibuffer.

     Useful for copying and renaming files, for example: ‘M-i’ to insert
     the original file name string, edit it, and then ‘C-m’ to complete
     the renaming.

‘M-j’ (‘ivy-yank-word’)
.......................

     Inserts the sub-word at point into the minibuffer.

     This is similar to ‘C-s C-w’ with ‘isearch’.  Ivy reserves ‘C-w’
     for ‘kill-region’.

‘S-SPC’ (‘ivy-restrict-to-matches’)
...................................

     Deletes the current input, and resets the candidates list to the
     currently restricted matches.

     This is how Ivy provides narrowing in successive tiers.

‘C-r’ (‘ivy-reverse-i-search’)
..............................

     Starts a recursive completion session through the command’s
     history.

     This works just like ‘C-r’ at the bash command prompt, where the
     completion candidates are the history items.  Upon completion, the
     selected candidate string is inserted into the minibuffer.


File: ivy.info,  Node: Other key bindings,  Next: Hydra in the minibuffer,  Prev: Key bindings that alter the minibuffer input,  Up: Minibuffer key bindings

4.2.5 Other key bindings
------------------------

‘M-w’ (‘ivy-kill-ring-save’)
............................

     Copies selected candidates to the kill ring.

     When the region is active, copies active region instead.


File: ivy.info,  Node: Hydra in the minibuffer,  Next: Saving the current completion session to a buffer,  Prev: Other key bindings,  Up: Minibuffer key bindings

4.2.6 Hydra in the minibuffer
-----------------------------

‘C-o’ (‘hydra-ivy/body’)
........................

     Invokes the hydra menu with short key bindings.

   Minibuffer editing is disabled when Hydra is active.  Instead, you
get short aliases for the common commands:

Short   Normal      Command name
------------------------------------------------
‘o’     ‘C-g’       ‘keyboard-escape-quit’
‘j’     ‘C-n’       ‘ivy-next-line’
‘k’     ‘C-p’       ‘ivy-previous-line’
‘h’     ‘M-<’       ‘ivy-beginning-of-buffer’
‘l’     ‘M->’       ‘ivy-end-of-buffer’
‘d’     ‘C-m’       ‘ivy-done’
‘f’     ‘C-j’       ‘ivy-alt-done’
‘g’     ‘C-M-m’     ‘ivy-call’
‘u’     ‘C-c C-o’   ‘ivy-occur’

   Hydra reduces key strokes, for example: ‘C-n C-n C-n C-n’ is ‘C-o
jjjj’ in Hydra.

   Additionally, you get access to the folowing commands that are
normally not bound:

‘c’ (‘ivy-toggle-calling’)
..........................

     Toggle calling the action after each candidate change.  This
     effectively modifies ‘j’ to ‘jg’, ‘k’ to ‘kg’ etc.

‘m’ (‘ivy-toggle-fuzzy’)
........................

     Toggle the current regexp matcher.

‘>’ (‘ivy-minibuffer-grow’)
...........................

     Increase ‘ivy-height’ for the current minibuffer.

‘<’ (‘ivy-minibuffer-shrink’)
.............................

     Decrease ‘ivy-height’ for the current minibuffer.

‘w’ (‘ivy-prev-action’)
.......................

     Select the previous action.

‘s’ (‘ivy-next-action’)
.......................

     Select the next action.

‘a’ (‘ivy-read-action’)
.......................

     Use a menu to select an action.

‘C’ (‘ivy-toggle-case-fold’)
............................

     Toggle case folding (matching both upper and lower case characters
     with lower case input).


File: ivy.info,  Node: Saving the current completion session to a buffer,  Prev: Hydra in the minibuffer,  Up: Minibuffer key bindings

4.2.7 Saving the current completion session to a buffer
-------------------------------------------------------

‘C-c C-o’ (‘ivy-occur’)
.......................

     Saves the current candidates to a new buffer and exits completion.

   The new buffer is read-only and has a few useful bindings defined.

‘RET’ or ‘j’ (‘ivy-occur-press’)
................................

     Call the current action on the selected candidate.

‘mouse-1’ (‘ivy-occur-click’)
.............................

     Call the current action on the selected candidate.

‘j’ (‘next-line’)
.................

     Move to next line.

‘k’ (‘previous-line’)
.....................

     Move to previous line.

‘a’ (‘ivy-occur-read-action’)
.............................

     Read an action and make it current for this buffer.

‘o’ (‘ivy-occur-dispatch’)
..........................

     Read an action and call it on the selected candidate.

‘q’ (‘quit-window’)
...................

     Bury the current buffer.

   Ivy has no limit on the number of active buffers like these.

   Ivy takes care of making these buffer names unique.  It applies
descriptive names, for example: ‘*ivy-occur counsel-describe-variable
"function$*’.


File: ivy.info,  Node: Completion styles,  Next: Customization,  Prev: Key bindings,  Up: Top

5 Completion styles
*******************

Ivy’s completion functions rely on a regex builder - a function that
transforms a string input to a string regex.  All current candidates
simply have to match this regex.  Each collection can be assigned its
own regex builder by customizing ‘ivy-re-builders-alist’.

   The keys of this alist are collection names, and the values are one
of:
   • ‘ivy--regex’
   • ‘ivy--regex-plus’
   • ‘ivy--regex-ignore-order’
   • ‘ivy--regex-fuzzy’
   • ‘regexp-quote’

   There’s also a catch-all key ‘t’ that applies to all collections that
don’t have their own key.

   The default is:

     (setq ivy-re-builders-alist
           '((t . ivy--regex-plus)))

   For example, here is how to assign a custom regex builder to file
name completion:

     (setq ivy-re-builders-alist
           '((read-file-name-internal . ivy--regex-fuzzy)
             (t . ivy--regex-plus)))

   Here, ‘read-file-name-internal’ is a function passed as the second
argument to ‘completing-read’ when completing file names.

   The regex builder resolution is a follows, in order of priority:
  1. ‘re-builder’ argument passed to ‘ivy-read’.
  2. ‘collection’ argument passed to ‘ivy-read’ is a function and has an
     entry on ‘ivy-re-builders-alist’.
  3. ‘caller’ argument passed to ‘ivy-read’ has an entry on
     ‘ivy-re-builders-alist’.
  4. ‘this-command’ has an entry on ‘ivy-re-builders-alist’.
  5. ‘t’ has an entry on ‘ivy-re-builders-alist’.
  6. ‘ivy--regex’.
* Menu:

* ivy--regex-plus::
* ivy--regex-ignore-order::
* ivy--regex-fuzzy::


File: ivy.info,  Node: ivy--regex-plus,  Next: ivy--regex-ignore-order,  Up: Completion styles

5.1 ivy–regex-plus
==================

‘ivy--regex-plus’ is Ivy’s default completion method.

   ‘ivy--regex-plus’ matches by splitting the input by spaces and
rebuilding it into a regex.

   As the search string is typed in Ivy’s minibuffer, it is transformed
into proper regex syntax.  If the string is ‘"for example"’, it is
transformed into

     "\\(for\\).*\\(example\\)"

   which in regex terminology matches ‘"for"’ followed by a wild card
and then ‘"example"’.  Note how Ivy uses the space character to build
wild cards.  For literal white space matching in Ivy, use an extra
space: to match one space type two spaces, to match two spaces type
three spaces, and so on.

   As Ivy transforms typed characters into regex strings, it provides an
intuitive feedback through font highlights.

   Ivy supports regexp negation with ‘"!"’.  For example, ‘"define key !
ivy quit"’ first selects everything matching ‘"define.*key"’, then
removes everything matching ‘"ivy"’, and finally removes everything
matching ‘"quit"’.  What remains is the final result set of the negation
regexp.

   Since Ivy treats minibuffer input as a regexp, the standard regexp
identifiers work: ‘"^"’, ‘"$"’, ‘"\b"’ or ‘"[a-z]"’.  The exceptions are
spaces, which translate to ‘".*"’, and ‘"!"’ that signal the beginning
of a negation group.


File: ivy.info,  Node: ivy--regex-ignore-order,  Next: ivy--regex-fuzzy,  Prev: ivy--regex-plus,  Up: Completion styles

5.2 ivy–regex-ignore-order
==========================

‘ivy--regex-ignore-order’ ignores the order of regexp tokens when
searching for matching candidates.  For instance, the input ‘"for
example"’ will match ‘"example test for"’.


File: ivy.info,  Node: ivy--regex-fuzzy,  Prev: ivy--regex-ignore-order,  Up: Completion styles

5.3 ivy–regex-fuzzy
===================

‘ivy--regex-fuzzy’ splits each character with a wild card.  Searching
for ‘"for"’ returns all ‘"f.*o.*r"’ matches, resulting in a large number
of hits.  Yet some searches need these extra hits.  Ivy sorts such large
lists using ‘flx’ package’s scoring mechanism, if it’s installed.

   In case ‘ivy--regex-fuzzy’ isn’t your current regexp builder, you
toggle it during completion with ‘C-o m’.


File: ivy.info,  Node: Customization,  Next: Commands,  Prev: Completion styles,  Up: Top

6 Customization
***************

* Menu:

* Faces::
* Defcustoms::
* Actions::
* Packages::


File: ivy.info,  Node: Faces,  Next: Defcustoms,  Up: Customization

6.1 Faces
=========

‘ivy-current-match’
...................

     Highlights the currently selected candidate.

‘ivy-minibuffer-match-face-1’
.............................

     Highlights the background of the match.

‘ivy-minibuffer-match-face-2’
.............................

     Highlights the first (modulo 3) matched group.

‘ivy-minibuffer-match-face-3’
.............................

     Highlights the second (modulo 3) matched group.

‘ivy-minibuffer-match-face-4’
.............................

     Highlights the third (modulo 3) matched group.

‘ivy-confirm-face’
..................

     Highlights the "(confirm)" part of the prompt.

     Used in conjunction with the built-in
     ‘confirm-nonexistent-file-or-buffer’ defcustom.  When you set this
     variable to ‘t’, you’ll have to confirm non-existent files and
     buffer with another ‘RET’ in ‘ivy-mode’.

     This face will be used to highlight the confirmation prompt.

     For example, use this setting:

          (setq confirm-nonexistent-file-or-buffer t)

     Then call ‘find-file’, enter "eldorado" and press ‘RET’ - the
     prompt will be appended with "(confirm)".  Press ‘RET’ once more to
     confirm, or any key to continue the completion.

‘ivy-match-required-face’
.........................

     Highlights the "(match required)" part of the prompt.

     Sometimes, the Emacs functions that call completion specify to it
     that a match is required, i.e.  you can’t just type in some random
     stuff - you have to select one of the candidates given to you.  In
     that case, ‘ivy-mode’ will appropriately change the prompt.

     For example, call ‘describe-variable’, enter "waldo" and press
     ‘RET’ - the prompt will be appended with "(match required)".  Press
     any key and the prompt warning will disappear.

‘ivy-subdir’
............

     Highlights directories when completing file names.

‘ivy-remote’
............

     Highlights remote files when completing file names.

‘ivy-virtual’
.............

     Highlights virtual buffers when completing buffer names.

     Virtual buffers correspond to your bookmarks and the ‘recentf’
     list.

     Enable the virtual buffers like this:

          (setq ivy-use-virtual-buffers t)


File: ivy.info,  Node: Defcustoms,  Next: Actions,  Prev: Faces,  Up: Customization

6.2 Defcustoms
==============

 -- User Option: ivy-count-format
     A string that describes how to show the number of candidates and
     possibly the current candidate in the prompt.

     By default, the number of matching candidates will be shown as an
     integer with padding on the right.

     To disable showing the number of candidates:

          (setq ivy-count-format "")

     To show the current candidate, in addition to the number of
     candidates:

          (setq ivy-count-format "(%d/%d) ")

     This variable uses ‘format’-style switches, see the documentation
     of ‘format’ for more info.

 -- User Option: ivy-display-style
     Decides how to highlight the candidates in the minibuffer.

     The default setting is ‘'fancy’ and it’s available only for Emacs
     versions 24.5 or newer.

     Set this to ‘nil’ to get a more plain minibuffer.

 -- User Option: ivy-on-del-error-function
     Decides what to do when ‘DEL’ (‘ivy-backward-delete-char’) throws.

     The default behavior is to quit the completion - this is handy if
     you invoke the completion by mistake.


File: ivy.info,  Node: Actions,  Next: Packages,  Prev: Defcustoms,  Up: Customization

6.3 Actions
===========

* Menu:

* What are actions?::
* How can different actions be called?::
* How can the action list be modified?::
* Example - add two actions to each command::
* Example - define a new command with several actions::


File: ivy.info,  Node: What are actions?,  Next: How can different actions be called?,  Up: Actions

6.3.1 What are actions?
-----------------------

An action is a function of a single argument that gets called after you
select a candidate during completion.  The selected candidate is passed
to this function as a string argument.

Window context when calling an action
.....................................

     Currently, the action is executed in the minibuffer window context.
     This means e.g.  that if you call ‘insert’ the text will be
     inserted into the minibuffer.

     If you want to execute the action in the initial window from which
     the completion started, use the ‘with-ivy-window’ wrapper macro.

          (defun ivy-insert-action (x)
            (with-ivy-window
              (insert x)))


File: ivy.info,  Node: How can different actions be called?,  Next: How can the action list be modified?,  Prev: What are actions?,  Up: Actions

6.3.2 How can different actions be called?
------------------------------------------

   • ‘C-m’ (‘ivy-done’) calls the current/default action.
   • ‘M-o’ (‘ivy-dispatching-done’) selects among all actions, calls it
     and exits.
   • ‘C-M-o’ (‘ivy-dispatching-call’) selects among all actions, calls
     it and doesn’t exit.


File: ivy.info,  Node: How can the action list be modified?,  Next: Example - add two actions to each command,  Prev: How can different actions be called?,  Up: Actions

6.3.3 How can the action list be modified?
------------------------------------------

Currently, you can append any amount of your own actions to the default
list of actions.  This can be done either for a specific command, or for
all commands at once.

   Usually, the command has only one default action.  The convention is
to use single letters when selecting a command, and the letter ‘o’ is
designated for the default command.  This way, ‘M-o o’ should be always
equivalent to ‘C-m’.


File: ivy.info,  Node: Example - add two actions to each command,  Next: Example - define a new command with several actions,  Prev: How can the action list be modified?,  Up: Actions

6.3.4 Example - add two actions to each command
-----------------------------------------------

The first action inserts the current candidate into the Ivy window - the
window from which ‘ivy-read’ was called.

   The second action copies the current candidate to the kill ring.

     (defun ivy-yank-action (x)
       (kill-new x))

     (defun ivy-copy-to-buffer-action (x)
       (with-ivy-window
         (insert x)))

     (ivy-set-actions
      t
      '(("i" ivy-copy-to-buffer-action "insert")
        ("y" ivy-yank-action "yank")))

   Now in any completion session you can access ‘ivy-yank-action’ with
‘M-o y’ and ‘ivy-copy-to-buffer-action’ with ‘M-o i’.
* Menu:

* How to undo adding the two actions::
* How to add actions to a specific command::


File: ivy.info,  Node: How to undo adding the two actions,  Next: How to add actions to a specific command,  Up: Example - add two actions to each command

6.3.4.1 How to undo adding the two actions
..........................................

‘ivy-set-actions’ simply modifies the internal dict with new data, so
you can set the extra actions list to ‘nil’ by assigning ‘nil’ value to
the ‘t’ key:

     (ivy-set-actions t nil)


File: ivy.info,  Node: How to add actions to a specific command,  Prev: How to undo adding the two actions,  Up: Example - add two actions to each command

6.3.4.2 How to add actions to a specific command
................................................

Use the command name as the key:

     (ivy-set-actions
      'swiper
      '(("i" ivy-copy-to-buffer-action "insert")
        ("y" ivy-yank-action "yank")))


File: ivy.info,  Node: Example - define a new command with several actions,  Prev: Example - add two actions to each command,  Up: Actions

6.3.5 Example - define a new command with several actions
---------------------------------------------------------

     (defun my-action-1 (x)
       (message "action-1: %s" x))

     (defun my-action-2 (x)
       (message "action-2: %s" x))

     (defun my-action-3 (x)
       (message "action-3: %s" x))

     (defun my-command-with-3-actions ()
       (interactive)
       (ivy-read "test: " '("foo" "bar" "baz")
                 :action '(1
                           ("o" my-action-1 "action 1")
                           ("j" my-action-2 "action 2")
                           ("k" my-action-3 "action 3"))))

   Here, the number determines the index of the default action.  For
each action, the strings are used to describe it during the selection.
* Menu:

* Testing out the above function with ‘ivy-occur’::


File: ivy.info,  Node: Testing out the above function with ‘ivy-occur’,  Up: Example - define a new command with several actions

6.3.5.1 Testing out the above function with ‘ivy-occur’
.......................................................

To examine each action with each candidate in a key-efficient way, try:

   • Call ‘my-command-with-3-actions’.
   • Press ‘C-c C-o’ to close the completion and move to an ivy-occur
     buffer.
   • Press ‘kkk’ to move to the first candidate, since you’re likely at
     the end of the buffer.
   • Press ‘oo’ to call the first action.
   • Press ‘oj’ and ‘ok’ to call the second and the third actions.
   • Press ‘j’ to move to the next candidate
   • …


File: ivy.info,  Node: Packages,  Prev: Actions,  Up: Customization

6.4 Packages
============

‘org-mode’
..........

     With the most recent version, ‘org-mode’ will obey
     ‘completing-read-function’ (which ‘ivy-mode’ sets), so it should
     work by default.  If you try it for refiling to headings with
     similar names, you’ll really notice how much better ‘ivy-mode’ is
     at it.

‘magit’
.......

     This setting is needed to use ivy completion:

          (setq magit-completing-read-function 'ivy-completing-read)

‘find-file-in-project’
......................

     Will use ivy by default if it’s available.

‘projectile’
............

     This setting is needed to use ivy completion:

          (setq projectile-completion-system 'ivy)

‘helm-make’
...........

     This setting is needed to use ivy completion:

          (setq helm-make-completion-method 'ivy)


File: ivy.info,  Node: Commands,  Next: API,  Prev: Customization,  Up: Top

7 Commands
**********

* Menu:

* File Name Completion::
* Buffer Name Completion::
* Counsel commands::


File: ivy.info,  Node: File Name Completion,  Next: Buffer Name Completion,  Up: Commands

7.1 File Name Completion
========================

Since file name completion is so essential, ivy has a few extra bindings
that work here.

‘C-j’ (‘ivy-alt-done’)
......................

     Use on a directory to restart the completion from that directory.
     Use it on a file or ‘./’ to exit the completion with the selected
     candidate.

‘DEL’ (‘ivy-backward-delete-char’)
..................................

     When completing file names, and the current input is empty, restart
     the completion in the parent directory.

‘//’ (‘self-insert-command’)
............................

     Switch to the root directory.

‘~’ (‘self-insert-command’)
...........................

     Switch to the home directory.

‘/’ (‘self-insert-command’)
...........................

     If the current input is precisely an existing directory, switch the
     completion to that directory.

‘M-q’ (‘ivy-toggle-regexp-quote’)
.................................

     Toggle between your input being a regexp and not.

     Since file names tend to include ‘.’, which matches any char in
     regexp mode, you might want to switch to matching literally.
 -- User Option: ivy-extra-directories
     Decide if you want to see ‘../’ and ‘./’ during file name
     completion.

     You might want to remove ‘../’, since selecting it is the same as
     ‘DEL’.  On the other hand, having it around makes it possible to
     navigate anywhere with only ‘C-n’, ‘C-p’ and ‘C-j’.

     Similarly, ‘./’ can be removed as well.

Using TRAMP
...........

     Completion for TRAMP is supported in a peculiar way.  From any
     directory, with the empty input, inputting ‘/ssh:’ and pressing
     ‘C-j’ (or ‘RET’ which is the same thing) will give you a completion
     for host and user names.

     You can also input ‘/ssh:user@’ to get domain completion with user
     name already selected.

     Described above is a recommended and simple method of interaction.
     If you find it lacking, you can still use ‘C-i’, which does largely
     the same as the default completion does.

History
.......

     The history works with ‘M-p’, ‘M-n’, and ‘C-r’, as in all other
     completion sessions.  A custom history code was implemented for
     file name completion.  This code will cycle you through all
     previous files that you opened, including the input with which the
     file was opened.  It also works well with TRAMP.


File: ivy.info,  Node: Buffer Name Completion,  Next: Counsel commands,  Prev: File Name Completion,  Up: Commands

7.2 Buffer Name Completion
==========================

 -- User Option: ivy-use-virtual-buffers
     When non-nil, add ‘recentf-mode’ and bookmarks to
     ‘ivy-switch-buffer’.

     If you add this to your setup:

          (setq ivy-use-virtual-buffers t)
     when using ‘ivy-switch-buffer’ additional buffers will be appended
     to your live buffer list.  These buffers will be highlighted with
     the ‘ivy-virtual’ face, and selecting them will open the
     corresponding file.


File: ivy.info,  Node: Counsel commands,  Prev: Buffer Name Completion,  Up: Commands

7.3 Counsel commands
====================

The main advantage of using ‘counsel-’ functions over their basic
equivalents with ‘ivy-mode’ enabled are the following:

  1. You can use everything related to multi-actions and non-exiting
     actions.
  2. You can use ‘ivy-resume’ to resume your last completion session.
  3. You can customize them further with ‘ivy-set-actions’,
     ‘ivy-re-builders-alist’.
  4. You can customize their individual keymaps, like
     ‘counsel-describe-map’, ‘counsel-git-grep-map’, or
     ‘counsel-find-file-map’, instead of just customizing
     ‘ivy-minibuffer-map’ that applies to all completion sessions.


File: ivy.info,  Node: API,  Next: Variable Index,  Prev: Commands,  Up: Top

8 API
*****

The main (and only) entry point is ‘ivy-read’ function.  It has only two
required arguments and many optional arguments that you can pass by key.
Although the ‘:action’ argument is optional, it’s very recommended that
you use it, otherwise the extra features (as compared to the default
completion) like multi-actions, non-exiting actions, ‘ivy-occur’ and
‘ivy-resume’ will not be possible.
* Menu:

* Required arguments for ‘ivy-read’::
* Optional arguments for ‘ivy-read’::
* Example - ‘counsel-describe-function’::
* Example - ‘counsel-locate’::


File: ivy.info,  Node: Required arguments for ‘ivy-read’,  Next: Optional arguments for ‘ivy-read’,  Up: API

8.1 Required arguments for ‘ivy-read’
=====================================

‘prompt’
........

     A format string normally ending in a colon and a space.

     ‘%d’ anywhere in the string is replaced by the current number of
     matching candidates.  To use a literal ‘%’ character, escape it as
     ‘%%’.  See also ‘ivy-count-format’.

‘collection’
............

     Either a list of strings, a function, an alist or a hash table.

     In case it’s a function, it has to be compatible with
     ‘all-completions’.


File: ivy.info,  Node: Optional arguments for ‘ivy-read’,  Next: Example - ‘counsel-describe-function’,  Prev: Required arguments for ‘ivy-read’,  Up: API

8.2 Optional arguments for ‘ivy-read’
=====================================

‘predicate’
...........

     A function to filter the initial collection with, compatible with
     ‘all-completions’.

‘require-match’
...............

     When non-nil, don’t let the user exit with a custom input - it must
     match one of the candidates.

‘initial-input’
...............

     A string to be initially inserted into the minibuffer.  This
     argument is included for compatibility with ‘completing-read’.
     Consider using the ‘preselect’ argument instead - it’s often
     superior.

‘history’
.........

     A symbol name to store the history.  See ‘completing-read’.

‘preselect’
...........

     When it’s a string, make the first candidate matching this string
     initially selected.

     When it’s an integer, make the candidate with that index initially
     selected.

     Every time the input becomes empty, the item corresponding to to
     ‘preselect’ is selected.

‘keymap’
........

     A keymap to be composed with ‘ivy-minibuffer-map’.  This keymap has
     priority over ‘ivy-minibuffer-map’ and can be modified at any later
     stage.

‘update-fn’
...........

     A function to call each time the current candidate is changed.
     This function takes no arguments and is called in the minibuffer’s
     ‘post-command-hook’.  See ‘swiper’ for an example usage.

‘sort’
......

     When non-nil, use ‘ivy-sort-functions-alist’ to sort the given
     collection.  The collection will not be sorted when it’s larger
     than ‘ivy-sort-max-size’.

‘action’
........

     A function to call after a result is selected.  Takes a single
     string argument.

‘unwind’
........

     A function with no arguments to call before exiting completion.
     This function is called even if the completion is interrupted with
     e.g.  ‘C-g’.  See ‘swiper’ for an example usage.

‘re-builder’
............

     A function that takes a string and returns a corresponding regex.
     See the section on completion styles.

‘matcher’
.........

     A function that takes a regex and a list of strings and returns a
     list of strings that "match" the regex.  Normally a straightforward
     function is used.  Use this argument to really fine-tune the
     matching process.  See ‘counsel-find-file’ for an example usage.

‘dynamic-collection’
....................

     When non-nil, ‘collection’ will be used to dynamically generate the
     candidates each time the input changes, instead of being used once
     statically with ‘all-completions’ to generate a list of strings.
     See ‘counsel-locate’ for an example usage.

‘caller’
........

     A symbol to uniquely identify the function that called ‘ivy-read’.
     This is useful in all kinds of customization scenarios.


File: ivy.info,  Node: Example - ‘counsel-describe-function’,  Next: Example - ‘counsel-locate’,  Prev: Optional arguments for ‘ivy-read’,  Up: API

8.3 Example - ‘counsel-describe-function’
=========================================

This is a typical example of a function with a non-async collection: all
the strings in the collection are known before the user does any input.

   Note that only the first two arguments (and the ‘action’) are really
important - the rest is just fine-tuning and could be omitted.

   The ‘action’ argument could also be omitted - but then ‘ivy-read’
would do nothing except returning the string result, which you could
later use yourself.  However, it’s recommended that you use the ‘action’
argument.

     (defun counsel-describe-function ()
       "Forward to `describe-function'."
       (interactive)
       (ivy-read "Describe function: "
                 (let (cands)
                   (mapatoms
                    (lambda (x)
                      (when (fboundp x)
                        (push (symbol-name x) cands))))
                   cands)
                 :keymap counsel-describe-map
                 :preselect (counsel-symbol-at-point)
                 :history 'counsel-describe-symbol-history
                 :require-match t
                 :sort t
                 :action (lambda (x)
                           (describe-function
                            (intern x)))
                 :caller 'counsel-describe-function))

   Here are the interesting features of the above function, in the order
that they appear:

   • The ‘prompt’ argument is a simple string ending in ": ".
   • The ‘collection’ argument evaluates to a (large) list of strings.
   • The ‘keymap’ argument allows for a custom keymap to supplement
     ‘ivy-minibuffer-map’.
   • The ‘preselect’ is provided via ‘counsel-symbol-at-point’.  This
     way, if the point lies on a symbol or a word, ivy will try to
     pre-select the first candidate that matches this symbol.  If it
     happens to be the candidate that the user wanted, it can be
     selected with ‘RET’ and no need for further input.
   • The ‘history’ argument ensures that the command has its own
     history, and doesn’t need to share the common history ‘ivy-history’
     that all commands without their own history share.
   • The ‘require-match’ is set to ‘t’, since it doesn’t make sense to
     call ‘describe-function’ on an un-interned symbol.
   • The ‘sort’ argument is set to ‘t’, since it’s usually useful to
     have functions with similar names be close to each other in the
     candidate list.  However, after loading many packages the
     collection often exceeds the default value of ‘ivy-sort-max-size’
     (30000).  The user can customize this variable to decide which is
     more important: the sorting or the completion start-up time.
   • The ‘action’ argument calls ‘describe-function’ on the interned
     selected candidate.
   • The ‘caller’ argument identifies this completion session.  This is
     important, since with the collection being a list of strings and
     not a function name, the only other way for ‘ivy-read’ to identify
     "who’s calling" and to apply the appropriate customizations is to
     examine ‘this-command’.  But ‘this-command’ would be modified if
     another command called ‘counsel-describe-function’.


File: ivy.info,  Node: Example - ‘counsel-locate’,  Prev: Example - ‘counsel-describe-function’,  Up: API

8.4 Example - ‘counsel-locate’
==============================

This is a typical example of a function with an async collection.  Since
we can’t pre-compute all the collection items valid for an empty input
and store them in the memory, the collection function is called each
time the user updates the input.  However, while the returned list of
strings is used immediately (usually it’s something like ‘'("please
wait...")’), it’s expected of the collection function to make a call to
‘start-process’ and update the minibuffer text at some point when the
process is finished.

   Async collections are a good fit for long-running shell commands,
like ‘locate’.  As soon as there is enough input, a new process is
started and the old process is killed (since the old input is no longer
relevant).  The user can either type more or wait for the already
running process to finish and update the minibuffer.

     (defun counsel-locate-function (str)
       (if (< (length str) 3)
           (counsel-more-chars 3)
         (counsel--async-command
          (format "locate %s '%s'"
                  (mapconcat #'identity counsel-locate-options " ")
                  (counsel-unquote-regex-parens
                   (ivy--regex str))))
         '("" "working...")))

     ;;;###autoload
     (defun counsel-locate (&optional initial-input)
       "Call the \"locate\" shell command.
     INITIAL-INPUT can be given as the initial minibuffer input."
       (interactive)
       (ivy-read "Locate: " #'counsel-locate-function
                 :initial-input initial-input
                 :dynamic-collection t
                 :history 'counsel-locate-history
                 :action (lambda (file)
                           (with-ivy-window
                             (when file
                               (find-file file))))
                 :unwind #'counsel-delete-process
                 :caller 'counsel-locate))

   Here are the interesting features of the above functions, in the
order that they appear:

   • ‘counsel-locate-function’ takes a string argument and returns a
     list of strings.  Note that it’s not compatible with
     ‘all-completions’, but since we’re not using that here, might as
     well use one argument instead of three.
   • ‘counsel-more-chars’ is a simple function that returns e.g.  ‘'("2
     chars more")’ asking the user for more input.
   • ‘counsel--async-command’ is a very easy API simplification that
     takes a single string argument suitable for
     ‘shell-command-to-string’.  So you could prototype your function as
     non-async using ‘shell-command-to-string’ and ‘split-string’ to
     produce a collection, then decide that you want async and simply
     swap in ‘counsel--async-command’.
   • ‘counsel-locate’ is an interactive function with optional
     ‘initial-input’.
   • ‘#'counsel-locate-function’ is passed as the ‘collection’ argument.
   • ‘dynamic-collection’ argument is set to t, since we have an async
     collection.
   • ‘action’ argument uses ‘with-ivy-window’ wrapper, since we want to
     open the selected file in the same window from which
     ‘counsel-locate’ was called.
   • ‘unwind’ argument is set to ‘#'counsel-delete-process’: when we
     press ‘C-g’ we want to kill the running process created by
     ‘counsel--async-command’.
   • ‘caller’ argument identifies this command for easier customization.


File: ivy.info,  Node: Variable Index,  Next: Keystroke Index,  Prev: API,  Up: Top

Variable Index
**************

 [index ]
* Menu:

* ivy-alt-done:                          Key bindings for single selection action then exit minibuffer.
                                                               (line 31)
* ivy-alt-done <1>:                      File Name Completion. (line 12)
* ivy-avy:                               Key bindings for single selection action then exit minibuffer.
                                                               (line 65)
* ivy-backward-delete-char:              File Name Completion. (line 19)
* ivy-call:                              Key bindings for multiple selections and actions keep minibuffer open.
                                                               (line 16)
* ivy-confirm-face:                      Faces.                (line 34)
* ivy-count-format:                      Defcustoms.           (line  6)
* ivy-current-match:                     Faces.                (line  9)
* ivy-dispatching-call:                  Key bindings for multiple selections and actions keep minibuffer open.
                                                               (line 26)
* ivy-dispatching-done:                  Key bindings for single selection action then exit minibuffer.
                                                               (line 24)
* ivy-display-style:                     Defcustoms.           (line 25)
* ivy-done:                              Key bindings for single selection action then exit minibuffer.
                                                               (line 19)
* ivy-extra-directories:                 File Name Completion. (line 45)
* ivy-height:                            Key bindings for navigation.
                                                               (line 22)
* ivy-immediate-done:                    Key bindings for single selection action then exit minibuffer.
                                                               (line 54)
* ivy-insert-current:                    Key bindings that alter the minibuffer input.
                                                               (line 23)
* ivy-kill-ring-save:                    Other key bindings.   (line  9)
* ivy-match-required-face:               Faces.                (line 54)
* ivy-minibuffer-grow:                   Hydra in the minibuffer.
                                                               (line 46)
* ivy-minibuffer-map:                    Minibuffer key bindings.
                                                               (line  6)
* ivy-minibuffer-match-face-1:           Faces.                (line 14)
* ivy-minibuffer-match-face-2:           Faces.                (line 19)
* ivy-minibuffer-match-face-3:           Faces.                (line 24)
* ivy-minibuffer-match-face-4:           Faces.                (line 29)
* ivy-minibuffer-shrink:                 Hydra in the minibuffer.
                                                               (line 51)
* ivy-next-action:                       Hydra in the minibuffer.
                                                               (line 61)
* ivy-next-history-element:              Key bindings that alter the minibuffer input.
                                                               (line  9)
* ivy-next-line-and-call:                Key bindings for multiple selections and actions keep minibuffer open.
                                                               (line 36)
* ivy-occur:                             Saving the current completion session to a buffer.
                                                               (line  9)
* ivy-occur-click:                       Saving the current completion session to a buffer.
                                                               (line 21)
* ivy-occur-dispatch:                    Saving the current completion session to a buffer.
                                                               (line 41)
* ivy-occur-press:                       Saving the current completion session to a buffer.
                                                               (line 16)
* ivy-occur-read-action:                 Saving the current completion session to a buffer.
                                                               (line 36)
* ivy-on-del-error-function:             Defcustoms.           (line 33)
* ivy-partial-or-done:                   Key bindings for single selection action then exit minibuffer.
                                                               (line 38)
* ivy-prev-action:                       Hydra in the minibuffer.
                                                               (line 56)
* ivy-previous-history-element:          Key bindings that alter the minibuffer input.
                                                               (line 18)
* ivy-previous-line-and-call:            Key bindings for multiple selections and actions keep minibuffer open.
                                                               (line 47)
* ivy-read-action:                       Hydra in the minibuffer.
                                                               (line 66)
* ivy-remote:                            Faces.                (line 73)
* ivy-restrict-to-matches:               Key bindings that alter the minibuffer input.
                                                               (line 40)
* ivy-resume:                            Key bindings for multiple selections and actions keep minibuffer open.
                                                               (line 55)
* ivy-reverse-i-search:                  Key bindings that alter the minibuffer input.
                                                               (line 48)
* ivy-subdir:                            Faces.                (line 68)
* ivy-toggle-calling:                    Hydra in the minibuffer.
                                                               (line 35)
* ivy-toggle-case-fold:                  Hydra in the minibuffer.
                                                               (line 71)
* ivy-toggle-fuzzy:                      Hydra in the minibuffer.
                                                               (line 41)
* ivy-toggle-regexp-quote:               File Name Completion. (line 41)
* ivy-use-virtual-buffers:               Buffer Name Completion.
                                                               (line  6)
* ivy-virtual:                           Faces.                (line 78)
* ivy-wrap:                              Key bindings for navigation.
                                                               (line 14)
* ivy-yank-word:                         Key bindings that alter the minibuffer input.
                                                               (line 32)


File: ivy.info,  Node: Keystroke Index,  Prev: Variable Index,  Up: Top

Keystroke Index
***************

 [index ]
* Menu:

* /:                                     File Name Completion. (line 35)
* //:                                    File Name Completion. (line 25)
* <:                                     Hydra in the minibuffer.
                                                               (line 51)
* >:                                     Hydra in the minibuffer.
                                                               (line 46)
* ~:                                     File Name Completion. (line 30)
* a:                                     Hydra in the minibuffer.
                                                               (line 66)
* a <1>:                                 Saving the current completion session to a buffer.
                                                               (line 36)
* c:                                     Hydra in the minibuffer.
                                                               (line 35)
* C:                                     Hydra in the minibuffer.
                                                               (line 71)
* C-':                                   Key bindings for single selection action then exit minibuffer.
                                                               (line 65)
* C-c C-o:                               Saving the current completion session to a buffer.
                                                               (line  9)
* C-j:                                   Key bindings for single selection action then exit minibuffer.
                                                               (line 31)
* C-j <1>:                               File Name Completion. (line 12)
* C-m:                                   Key bindings for single selection action then exit minibuffer.
                                                               (line 19)
* C-M-j:                                 Key bindings for single selection action then exit minibuffer.
                                                               (line 54)
* C-M-m:                                 Key bindings for multiple selections and actions keep minibuffer open.
                                                               (line 16)
* C-M-n:                                 Key bindings for multiple selections and actions keep minibuffer open.
                                                               (line 36)
* C-M-o:                                 Key bindings for multiple selections and actions keep minibuffer open.
                                                               (line 26)
* C-M-p:                                 Key bindings for multiple selections and actions keep minibuffer open.
                                                               (line 47)
* C-o:                                   Hydra in the minibuffer.
                                                               (line  9)
* C-r:                                   Key bindings that alter the minibuffer input.
                                                               (line 48)
* DEL:                                   File Name Completion. (line 19)
* j:                                     Saving the current completion session to a buffer.
                                                               (line 16)
* j <1>:                                 Saving the current completion session to a buffer.
                                                               (line 26)
* k:                                     Saving the current completion session to a buffer.
                                                               (line 31)
* m:                                     Hydra in the minibuffer.
                                                               (line 41)
* M-i:                                   Key bindings that alter the minibuffer input.
                                                               (line 23)
* M-j:                                   Key bindings that alter the minibuffer input.
                                                               (line 32)
* M-n:                                   Key bindings that alter the minibuffer input.
                                                               (line  9)
* M-o:                                   Key bindings for single selection action then exit minibuffer.
                                                               (line 24)
* M-p:                                   Key bindings that alter the minibuffer input.
                                                               (line 18)
* M-q:                                   File Name Completion. (line 41)
* M-w:                                   Other key bindings.   (line  9)
* mouse-1:                               Saving the current completion session to a buffer.
                                                               (line 21)
* o:                                     Saving the current completion session to a buffer.
                                                               (line 41)
* q:                                     Saving the current completion session to a buffer.
                                                               (line 46)
* RET:                                   Key bindings for single selection action then exit minibuffer.
                                                               (line 19)
* RET <1>:                               Saving the current completion session to a buffer.
                                                               (line 16)
* s:                                     Hydra in the minibuffer.
                                                               (line 61)
* S-SPC:                                 Key bindings that alter the minibuffer input.
                                                               (line 40)
* TAB:                                   Key bindings for single selection action then exit minibuffer.
                                                               (line 38)
* w:                                     Hydra in the minibuffer.
                                                               (line 56)



Tag Table:
Node: Top1355
Node: Introduction4398
Node: Installation6878
Node: Installing from Emacs Package Manager7428
Node: Installing from the Git repository8386
Node: Getting started9174
Node: Basic customization9481
Node: Key bindings9896
Node: Global key bindings10088
Node: Minibuffer key bindings11406
Node: Key bindings for navigation12707
Node: Key bindings for single selection action then exit minibuffer13849
Node: Key bindings for multiple selections and actions keep minibuffer open16531
Node: Key bindings that alter the minibuffer input18905
Node: Other key bindings20793
Node: Hydra in the minibuffer21185
Node: Saving the current completion session to a buffer23342
Node: Completion styles24759
Node: ivy--regex-plus26524
Node: ivy--regex-ignore-order28016
Node: ivy--regex-fuzzy28384
Node: Customization28951
Node: Faces29137
Node: Defcustoms31551
Node: Actions32773
Node: What are actions?33104
Node: How can different actions be called?33938
Node: How can the action list be modified?34449
Node: Example - add two actions to each command35124
Node: How to undo adding the two actions36093
Node: How to add actions to a specific command36540
Node: Example - define a new command with several actions36956
Node: Testing out the above function with ‘ivy-occur’37923
Node: Packages38679
Node: Commands39611
Node: File Name Completion39796
Node: Buffer Name Completion42431
Node: Counsel commands43054
Node: API43823
Node: Required arguments for ‘ivy-read’44500
Node: Optional arguments for ‘ivy-read’45177
Node: Example - ‘counsel-describe-function’48296
Node: Example - ‘counsel-locate’51820
Node: Variable Index55471
Node: Keystroke Index62372

End Tag Table


Local Variables:
coding: utf-8
End:
