
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)

; Check if system is windows
(defun system-type-is-win ()
(interactive)
"Return true if system is windows"
(string-equal system-type "windows-nt")
)

;; Check if system is GNU/Linux
(defun system-type-is-gnu ()
(interactive)
"Return true if system is GNU/Linux-based"
(string-equal system-type "gnu/linux")
)

;;;add custom themes to list
  (add-to-list 'custom-theme-load-path "/home/zeltak/.emacs.d/themes")
  ;to load a specifc theme 
  ;(load-file "~/.emacs.d/themes/zprime-theme.el")
  ;load the choosen theme at startup 
  (load-theme 'zprime t)

;;;; below works but changes GUI apps theme when launching term..not good..maybe look into this in future  

;; ;; last t is for NO-ENABLE
  ;;   (load-theme 'zprime t t)
  ;;   (load-theme 'tango-dark t t)
  
  ;;   (defun mb/pick-color-theme (frame)
  ;;     (select-frame frame)
  ;;     (if (window-system frame)
  ;;         (progn  
  ;;           (disable-theme 'tango-dark) ; in case it was active
  ;;           (enable-theme 'zprime))
  ;;       (progn  
  ;;         (disable-theme 'zprime) ; in case it was active
  ;;         (enable-theme 'tango-dark))))
  ;;   (add-hook 'after-make-frame-functions 'mb/pick-color-theme)
  
  ;;   ;; For when started with emacs or emacs -nw rather than emacs --daemon
  ;;   (if window-system
  ;;       (enable-theme 'zprime)
  ;;     (enable-theme 'tango-dark))

; fonts in linux
(if (system-type-is-gnu)
;(add-to-list 'default-frame-alist '(font . "Inconsolata-16"))
;(add-to-list 'default-frame-alist '(font . "Source Code Pro-14"))
(add-to-list 'default-frame-alist '(font . "Pragmata Pro-16"))
)

;; fontso in Win
(if (system-type-is-win)
(add-to-list 'default-frame-alist '(font . "Consolas-14"))
)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; UTF-8 as default encoding
(set-language-environment "UTF-8")

;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))
 
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

(setq dcsh-command-list '("all_registers"
                               "check_design" "check_test" "compile" "current_design"
                               "link" "uniquify"
                               "report_timing" "report_clocks" "report_constraint"
                               "get_unix_variable" "set_unix_variable"
                               "set_max_fanout"
                               "report_area" "all_clocks" "all_inputs" "all_outputs"))
  
     (defun he-dcsh-command-beg ()
       (let ((p))
         (save-excursion
           (backward-word 1)
           (setq p (point)))
         p))
  
     (defun try-expand-dcsh-command (old)
       (unless old
         (he-init-string (he-dcsh-command-beg) (point))
         (setq he-expand-list (sort
                               (all-completions he-search-string (mapcar 'list dcsh-command-list))
                               'string-lessp)))
       (while (and he-expand-list
               (he-string-member (car he-expand-list) he-tried-table))
         (setq he-expand-list (cdr he-expand-list)))
       (if (null he-expand-list)
           (progn
             (when old (he-reset-string))
             ())
         (he-substitute-string (car he-expand-list))
         (setq he-tried-table (cons (car he-expand-list) (cdr he-tried-table)))
         (setq he-expand-list (cdr he-expand-list))
         t))

 (setq hippie-expand-try-functions-list (cons 'yas/hippie-try-expand hippie-expand-try-functions-list))

 (defun my-hippie-expand-completions (&optional hippie-expand-function)
       "Return the full list of possible completions generated by `hippie-expand'.
     The optional argument can be generated with `make-hippie-expand-function'."
       (let ((this-command 'my-hippie-expand-completions)
             (last-command last-command)
             (buffer-modified (buffer-modified-p))
             (hippie-expand-function (or hippie-expand-function 'hippie-expand)))
         (flet ((ding)) ; avoid the (ding) when hippie-expand exhausts its options.
           (while (progn
                    (funcall hippie-expand-function nil)
                    (setq last-command 'my-hippie-expand-completions)
                    (not (equal he-num -1)))))
         ;; Evaluating the completions modifies the buffer, however we will finish
         ;; up in the same state that we began, and (save-current-buffer) seems a
         ;; bit heavyweight in the circumstances.
         (set-buffer-modified-p buffer-modified)
         ;; Provide the options in the order in which they are normally generated.
         (delete he-search-string (reverse he-tried-table))))
   
     (defmacro my-ido-hippie-expand-with (hippie-expand-function)
       "Generate an interactively-callable function that offers ido-based completion
     using the specified hippie-expand function."
       `(call-interactively
         (lambda (&optional selection)
           (interactive
            (let ((options (my-hippie-expand-completions ,hippie-expand-function)))
              (if options
                  (list (ido-completing-read "Completions: " options)))))
           (if selection
               (he-substitute-string selection t)
             (message "No expansion found")))))
   
     (defun my-ido-hippie-expand ()
       "Offer ido-based completion for the word at point."
       (interactive)
       (my-ido-hippie-expand-with 'hippie-expand))
   
;; (global-set-key (kbd "<f12>") 'my-ido-hippie-expand)
;; (global-set-key [(meta f5)] (make-hippie-expand-function
;;                                '(try-expand-dcsh-command
;;                                  try-expand-dabbrev-visible
;;                                  try-expand-dabbrev
;;                                  try-expand-dabbrev-all-buffers) t))
(global-set-key (kbd "M-/") 'hippie-expand)
;; (global-set-key (kbd "TAB") 'hippie-expand)

;; (ido-mode 1)
;; (require 'flx-ido)
;; (ido-everywhere 1)
;; (flx-ido-mode 1)
;; ;; disable ido faces to see flx highlights.
;; (setq ido-use-faces nil)


;; (setq ido-max-directory-size 100000)
;; (ido-mode (quote both))
;; ; Use the current window when visiting files and buffers with ido
;; (setq ido-default-file-method 'selected-window)
;; (setq ido-default-buffer-method 'selected-window)



;; ;ignore case
;; (setq ido-case-fold t)
;; (setq ido-enable-flex-matching t) ; fuzzy matching is a must have

;; ;ido-ubiquitous

;; ;recents ido
;; (defun recentf-ido-find-file ()
;;   "Find a recent file using ido."
;;   (interactive)
;;   (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
;;     (when file
;;      (find-file file))))


;; ;this keybinding lets you even more quickly reach your home folder when in ido-find-file.

;; (add-hook 'ido-setup-hook
;;  (lambda ()
;;    ;; Go straight home
;;    (define-key ido-file-completion-map
;;      (kbd "~")
;;      (lambda ()
;;        (interactive)
;;        (if (looking-back "/")
;;            (insert "~/")
;;          (call-interactively 'self-insert-command))))))

(use-package ace-window
    :config
;set keys to only these 
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-background nil))

(custom-set-faces
 '(aw-leading-char-face
   ((t (:inherit ace-jump-face-foreground :height 3.0)))))

(use-package ace-jump-zap
  :ensure ace-jump-zap
)

(use-package ace-isearch
 :ensure t
 :config
 (ace-isearch-mode +1)
 (global-ace-isearch-mode +1)
(setq ace-isearch-function 'avy-goto-word-1)
 )

(custom-set-variables
  '(ace-isearch-input-length 9)
  '(ace-isearch-input-idle-delay 0.4)
  '(ace-isearch-submode 'ace-jump-char-mode)
  '(ace-isearch-use-ace-jump 'printing-char)
)

(use-package ace-link
 :ensure t
 :config
(ace-link-setup-default)
 
 )

(use-package anzu
 :ensure t
 :config
(require 'anzu)
(global-anzu-mode +1)

(set-face-attribute 'anzu-mode-line nil
                    :foreground "yellow" :weight 'bold)

(custom-set-variables
 '(anzu-mode-lighter "")
 '(anzu-deactivate-region t)
 '(anzu-search-threshold 1000)
 '(anzu-replace-to-string-separator " => "))
 
(global-set-key (kbd "M-%") 'anzu-query-replace)
(global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)

 )

(use-package async
:ensure t)

;(require 'tex)
;(setq preview-scale-function 1.1)

(use-package auto-complete
 :ensure t
 :config
(ac-config-default)

;start after 4 characters
(setq ac-auto-start 4)
;fix linium issues
(ac-linum-workaround)

;; Examples
(set-face-background 'ac-candidate-face "lightgray")
(set-face-underline 'ac-candidate-face "darkgray")
(set-face-background 'ac-selection-face "steelblue")

)

(use-package avy
 :ensure t
 :config
(defcustom avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
  "Keys for jumping.") 
 )

(use-package avy-zap
 :ensure t
 :config
 
 )

(use-package bookmark+
:ensure t
:config
(setq bookmark-version-control t
      bookmark-save-flag t)
;ask for tags when saving a bookmark move nil to t to ask each time
(setq bmkp-prompt-for-tags-flag nil)
)

(use-package browse-kill-ring
:ensure t
:config
)

(use-package bug-hunter
 :ensure t
 :config
  )

(use-package color-theme-approximate
 :ensure t
 :config
(color-theme-approximate-on)
 )

(use-package company
 :ensure t
 :config
;(add-hook 'after-init-hook 'global-company-mode)
 )

(require 'dired-x)
(setq dired-guess-shell-alist-user
      '(("\\.e?ps$" "gv" "xloadimage" "lpr")
        ("\\.chm$" "xchm")
        ("\\.rar$" "unrar x")
        ("\\.e?ps\\.g?z$" "gunzip -qc * | gv -")
        ("\\.pdf$" "okular" "zathura")
        ("\\.flv$" "mplayer")
        ("\\.mov$" "mplayer")
        ("\\.3gp$" "mplayer")
        ("\\.png$" "feh")
        ("\\.jpg$" "feh")
        ("\\.JPG$" "feh")
        ("\\.avi$" "mplayer")))

(use-package dired-sort
 :ensure t
 :config
  )

(use-package dired+
 :ensure t
 :config
(toggle-diredp-find-file-reuse-dir 1)
  )

;; (use-package dired-details
;;  :ensure t
;;  :config
;; (setq dired-details-hide-link-targets nil)
;;  )

;; (use-package dired-details+
;;  :ensure t
;;  :config
;;  )

(use-package peep-dired
 :ensure t
 :config
 (setq peep-dired-ignored-extensions '("mkv" "iso" "mp4"))
 )

(use-package dired-avfs
 :ensure t
 :config
 )

(use-package dired-filter
 :ensure t
 :config
 )

(use-package dired-narrow
 :ensure t
 :config
 )

(use-package dired-efap
 :ensure t
 :config
 
 )

(use-package dired-rainbow
 :ensure t
 :config
 (require 'dired-rainbow)

(defconst dired-audio-files-extensions
  '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
  "Dired Audio files extensions")
(dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)

(defconst dired-video-files-extensions
    '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
      "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
    "Dired Video files extensions")
(dired-rainbow-define video "#006EFF" dired-video-files-extensions)

(defconst dired-pdf-files-extensions
  '("pdf" "PDF")
  "Dired pdf files extensions")
(dired-rainbow-define pdf "#FF0000" dired-pdf-files-extensions)


(defconst dired-org-files-extensions
  '("org" "ORG")
  "Dired org files extensions")
(dired-rainbow-define org "#FF00A2" dired-org-files-extensions)


(defconst dired-compressed-files-extensions
  '("zip" "ZIP"  "tar.bz" "tar.gz" "7zip" "7ZIP" "tar" "TAR" "rar" "RAR")
  "Dired compressed files extensions")
(dired-rainbow-define compressed "#B56A00" dired-compressed-files-extensions)




 )

(add-to-list 'load-path "/home/zeltak/.emacs.g/tmtxt-async-tasks")
 (add-to-list 'load-path "/home/zeltak/.emacs.g/tmtxt-dired-async")
(require 'tmtxt-async-tasks)
(require 'tmtxt-dired-async)

(setq-default tat/window-close-delay "2")
(setq-default tat/window-height 15)

(use-package drag-stuff
 :ensure t
 :config
  )

(use-package ebib
 :ensure t
 :config
(setq ebib-preload-bib-files '("/home/zeltak/org/files/Uni/papers/kloog.2015.bib")) 

(setq ebib-common-optional-fields
      '(translator keywords origlanguage url file location
        partinfo subtitle edition abstract note annotator
        crossref urldate address subtitle language))

(setq ebib-file-associations '(("pdf" . "okular") ("djvu" . "okular")))
(setq ebib-uniquify-keys t)
(setq ebib-autogenerate-keys t)
(setq ebib-index-window-size 20)
(setq ebib-print-multiline t)

;index view
(setq ebib-index-display-fields (quote (year author)))
(setq ebib-sort-order (quote ((year) (author) )))

 )

;; (require 'edit-server)
;;  (edit-server-start)
;; (autoload 'edit-server-maybe-dehtmlize-buffer "edit-server-htmlize" "edit-server-htmlize" t)
;; (autoload 'edit-server-maybe-htmlize-buffer   "edit-server-htmlize" "edit-server-htmlize" t)
;; (add-hook 'edit-server-start-hook 'edit-server-maybe-dehtmlize-buffer)
;; (add-hook 'edit-server-done-hook  'edit-server-maybe-htmlize-buffer)

(use-package engine-mode
 :ensure t
 :config 
 )

(use-package evil
:ensure t
:config
)

;; (require 'evil)
;; (evil-mode 1)

;; ;for normal undo
;; (setq evil-want-fine-undo t)

;; ;;; esc quits
;; (define-key evil-normal-state-map [escape] 'keyboard-quit)
;; (define-key evil-visual-state-map [escape] 'keyboard-quit)
;; (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

;; ;searches
;; (global-set-key (kbd "C-*") 'evil-search-symbol-forward)
;; (global-set-key (kbd "C-#") 'evil-search-symbol-backward)

(use-package evil-nerd-commenter
:ensure t
:config
)
;(evilnc-default-hotkeys)
;(setq evilnc-hotkey-comment-operator ",,")

(use-package expand-region
 :ensure t
 :config
 :bind (
       ("M-2" . er/expand-region )
 )
)

(use-package fill-column-indicator
:ensure t
:config
)

(use-package golden-ratio
 :ensure t
 :config
 (require 'golden-ratio)
; (golden-ratio-mode 1)
 )

(use-package google-contacts
:ensure t
:config
)

(use-package grizzl
 :ensure t
 :config
  )

(use-package helm
:ensure t
:config
(require 'helm-config)
(helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
)

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
       helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
       helm-ff-file-name-history-use-recentf t
)

(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

(use-package helm-cmd-t
:ensure t
:config
(defvar my-org-folders (list  "~/org/files/")
  "my permanent folders for helm-mini")

(defun helm-my-org (&optional arg)
  "Use C-u arg to work with repos."
  (interactive "P")
  (if (consp arg)
      (call-interactively 'helm-cmd-t-repos)
    (let ((helm-ff-transformer-show-only-basename nil))
      (helm :sources (mapcar (lambda (dir)
                               (helm-cmd-t-get-create-source-dir dir))
                             my-org-folders)
            :candidate-number-limit 20
            :buffer "*helm-my-org:*"
            :input "org$ "))))
)

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

(setq helm-locate-fuzzy-match t)

(use-package helm-bibtex
 :ensure t
 :config

(autoload 'helm-bibtex "helm-bibtex" "" t)

(setq helm-bibtex-bibliography "/home/zeltak/org/files/Uni/papers/kloog.2015.bib")
;(setq helm-bibtex-notes-path "/home/zeltak/org/files/Uni/papers/notes/")
(setq helm-bibtex-library-path (list "/home/zeltak/Sync/Uni/pdf_lib/" "/home/zeltak/Sync/Uni/pdf_lib_gen/") ) 
(setq helm-bibtex-notes-extension ".org")

(setq helm-bibtex-format-citation-functions
  '((org-mode      . helm-bibtex-format-citation-org-link-to-PDF)
    (latex-mode    . helm-bibtex-format-citation-cite)
    (markdown-mode . helm-bibtex-format-citation-pandoc-citeproc)
    (default       . helm-bibtex-format-citation-default)))

;(setq helm-bibtex-additional-search-fields '(tags))
(setq helm-bibtex-additional-search-fields '(pubstate tags))



(setq helm-bibtex-browser-function
  (lambda (url _) (start-process "chromium" "*chromium*" "chromium" url)))

;(setq helm-bibtex-pdf-open-function
; (lambda (fpath)
 ;  (start-process "evince" "*helm-bibtex-evince*" "/usr/bin/evince" fpath)))
 )

;; Define helm-search with predefined search expression:
(defun helm-bibtex-ikloog-publications ()
  "Search BibTeX entries authored by me"
  (interactive)
  (helm :sources '(helm-source-bibtex)
        :full-frame t
        :input "kloog article !prep !talk !conf !invtalk "
        :candidate-number-limit 500))

;; Bind this search function to Ctrl-x p:
;(global-set-key (kbd "C-x p") 'helm-bibtex-my-publications)

;; Define helm-search with predefined search expression:
(defun helm-bibtex-ikloog-publications-all ()
  "Search BibTeX entries authored by me (ALL including prep)"
  (interactive)
  (helm :sources '(helm-source-bibtex)
        :full-frame t
        :input "kloog"
        :candidate-number-limit 500))

;; Bind this search function to Ctrl-x p:
;(global-set-key (kbd "C-x p") 'helm-bibtex-my-publications)

;; Define helm-search with predefined search expression:
(defun helm-bibtex-ikloog-prep         ()
  "Search BibTeX entries in preperation with me"
  (interactive)
  (helm :sources '(helm-source-bibtex)
        :full-frame t
        :input "kloog prep"
        :candidate-number-limit 500))

(use-package helm-mu
 :ensure t
 :config
  )

(use-package helm-projectile
 :ensure t
 :config
 
 )

(use-package highlight-symbol
 :ensure t
 :config
 
 )

(use-package hydra
:ensure t )

(use-package indent-guide
:ensure t
:config
)

(setq ispell-personal-dictionary "~/.emacs.d/ispell-dico-personal")

(use-package key-chord 
  :ensure t
  :config
(setq key-chord-two-keys-delay 0.16)
(setq key-chord-one-key-delay 0.20)
)

(use-package lentic
 :ensure t
 :config
 )



(setq manage-minor-mode-default
      '((global
         (on   rainbow-mode)
         (off  line-number-mode))
        (emacs-lisp-mode
         (on   rainbow-delimiters-mode eldoc-mode show-paren-mode))
        (js2-mode
         (on   color-identifiers-mode)
         (off  flycheck-mode))))

(use-package mic-paren
 :ensure t
 :config
  )

;(use-package mu4e-maildirs-extension
; :ensure t
; :config
;(setq mu4e-maildirs-extension-title "Mail")
;(setq mu4e-maildirs-extension-custom-list (quote ("INBOX" "Starred"  )))
; )

(use-package multiple-cursors
 :ensure t
 :config
 (require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

 )

(use-package openwith 
:ensure t
:config
(require 'openwith)
(setq openwith-associations '(("\\.pdf\\'" "okular" (file))))
(setq openwith-associations '(("\\.mkv\\'" "mplayer" (file))))
(setq openwith-associations '(("\\.html\\'" "chromium" (file))))
(setq openwith-associations '(("\\.html\\'" "eww" (file))))
(setq openwith-associations '(("\\.mp4\\'" "vlc" (file))))
(setq openwith-associations '(("\\.ogm\\'" "vlc" (file))))
(setq openwith-associations '(("\\.avi\\'" "vlc" (file))))
(setq openwith-associations '(("\\.mpeg\\'" "vlc" (file))))
(setq openwith-associations '(("\\.mkv\\'" "vlc" (file))))
(openwith-mode t)
)

(add-to-list 'load-path "/home/zeltak/.emacs.g/org-ref/")
;; make sure you have dash, helm, helm-bibtex, ebib, s, f, hydra and key-chord
;; in your load-path
(require 'org-ref)
;; optional but very useful libraries in org-ref
(require 'doi-utils)
(require 'jmax-bibtex)
(require 'pubmed)
(require 'arxiv)
(require 'sci-id)

;(org-babel-load-file "/home/zeltak/.emacs.g/extra/org-ref/org-ref.org")
(setq reftex-default-bibliography '("/home/zeltak/org/files/Uni/papers/kloog.2015.bib"))

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "/home/zeltak/org/files/Uni/papers/notes/"
      org-ref-default-bibliography '("/home/zeltak/org/files/Uni/papers/kloog.2015.bib")
      org-ref-pdf-directory "/home/zeltak/Sync/Uni/pdf_lib/")

(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)

(add-to-list 'load-path "/home/zeltak/.emacs.g/ob-sudo/")

(use-package org-download 
 :ensure t
 :config
 (setq-default org-download-heading-lvl nil)
 (setq-default org-download-image-dir "/home/zeltak/org/attach/images_2015")
)

;; (setq org-download-method 'attach
;;        org-download-screenshot-method "scrot -s %s"
;;        org-download-backend (if (executable-find "curl") "curl \"%s\" -o \"%s\"" t)))

; (load-file "~/.emacs.g/extra/org-download/org-download.el")
; (setq-default org-download-heading-lvl nil)
; (setq-default org-download-image-dir "/home/zeltak/org/attach/images_2015")

;(if (string= system-name "voices") (setq-default org-download-image-dir "/home/zeltak/org/attach/images_2014/") (setq-default org-download-image-dir "/media/NAS/Uni/org/attach/images_2013/"))

(add-to-list 'load-path "/home/zeltak/.emacs.g/extra/org-dp/")
(require 'org-dp-lib)

(when (require 'org-dp-lib nil t)

;;;;;;;;;; wrap in elisp
  (defun z/wrap-elisp ()
        (org-dp-wrap-in-block
         nil '(src-block nil nil nil (:language "emacs-lisp" :preserve-indent 1  :parameters ":results none" ))))

;for hydra create interactive new functions
(defun z/hydra-wrap-elisp () (interactive) (beginning-of-line) (z/wrap-elisp))

;;;;;;;;;; wrap in bash
  (defun z/wrap-bash ()
        (org-dp-wrap-in-block
         nil '(src-block nil nil nil (:language "sh" :preserve-indent 1  :parameters ":results none" ))))

;for hydra create interactive new functions
(defun z/hydra-wrap-bash () (interactive) (beginning-of-line) (z/wrap-bash))


;;;;;;;;;; wrap in bash
  (defun z/wrap-example ()
        (org-dp-wrap-in-block
         nil '(src-block nil nil nil (:language "example" :preserve-indent 1  :parameters ":results none" ))))

;for hydra create interactive new functions
(defun z/hydra-wrap-example () (interactive) (beginning-of-line) (z/wrap-example))



;;;;;;;;;; wrap in R
  (defun z/wrap-R ()
        (org-dp-wrap-in-block
         nil '(src-block nil nil nil (:language "R" :preserve-indent 1  :parameters ":results none" ))))

;for hydra create interactive new functions
(defun z/hydra-wrap-R () (interactive) (beginning-of-line) (z/wrap-R))

;;;;;;;;;; wrap in latex
  (defun z/wrap-latex ()
        (org-dp-wrap-in-block
         nil '(src-block nil nil nil (:language "latex" :preserve-indent 1  :parameters ":results none" ))))

;for hydra create interactive new functions
(defun z/hydra-wrap-latex () (interactive) (beginning-of-line) (z/wrap-latex))


;end paren
     )

(use-package org-gcal 
 :ensure t
 :config
(require 'org-gcal)
(setq org-gcal-client-id "915933520493-ppckdh9b038tb5u039c0b8s06bdkio98.apps.googleusercontent.com"
      org-gcal-client-secret "1hy--1nQE-xUjVyR8MLYt5W"
      org-gcal-file-alist '(
("ikloog@gmail.com" .  "~/org/files/agenda/gcal.org")

))
;for closing use package
)

(use-package org-pandoc
 :ensure t
 :config
 )

(add-to-list 'load-path "/home/zeltak/.emacs.g/password-store/")
(require 'password-store)

(use-package pdf-tools
 :ensure t
 :config
  )

(use-package projectile
 :ensure t
 :config
(projectile-global-mode)
(setq projectile-completion-system 'grizzl)
 )

(use-package rainbow-mode
:ensure t
:config
)

(dolist (hook '(css-mode-hook
                html-mode-hook
                js-mode-hook
                emacs-lisp-mode-hook
                org-mode-hook
                text-mode-hook
                ))
  (add-hook hook 'rainbow-mode))

;(use-package ranger
; :ensure t
; :config
;
; )

(use-package scratch
 :ensure t
 :config
 (autoload 'scratch "scratch" nil t)
 )

(use-package smex
:ensure t
:config
)

(use-package sunrise-commander
 :ensure t
 :config
;;what to shoe in list view
(setq sr-attributes-display-mask '(nil nil t t t t t))
;start with no attributes in view (if set to nil)
(setq sr-show-file-attributes nil)
;sorting
(setq sr-listing-switches "--time-style=locale --group-directories-first -AlDhgG")


;;disbale F keys
;(setq sr-use-commander-keys nil)


;Here’s how to disable “click to visit file” and “cursor follows mouse”.
(setq sr-cursor-follows-mouse nil)
(setq sr-toggle-attribute 1)
(define-key sr-mode-map [mouse-1]        nil)
(define-key sr-mode-map [mouse-movement] nil)

;;nicer icons in modline
(setq sr-modeline-use-utf8-marks t)
;;where is avfs root
(setq sr-avfs-root "~/.avfs")

 )

(define-key sr-mode-map (kbd "/") 'sr-fuzzy-narrow) 
(define-key sr-mode-map (kbd "") 'er/sunrise-flatten) 
(define-key sr-mode-map (kbd "\\") 'sr-checkpoint-restore ) 
(define-key sr-mode-map (kbd "`") 'hydra-sunrise-leader/body ) 
;lynx like
(define-key sr-mode-map (kbd "<left>") 'sr-dired-prev-subdir ) 
(define-key sr-mode-map (kbd "<right>") 'sr-advertised-find-file ) 
;move back/forward im history
(define-key sr-mode-map (kbd "M-<left>") 'sr-history-prev ) 
(define-key sr-mode-map (kbd "M-<right>") 'sr-history-next )

(defhydra hydra-sunrise-leader  (:color blue :hint nil)

"

_a_:         _b_:         _c_:        _d_:        _e_:           _f_:         _g_:  
_h_: collapse org tree        _i_: insert text         _j_:       _k_:       _l_:          _m_: helm-mark        _n_: mark position       
_o_: mark prev   _p_ _q_ _r_ wdired   du_p_licate  _s_:       _t_: term           _u_:       
_v_:        _w_:        _x_:       _y_: kill ring       _z_: 
_q_: 

Sunrise:
【C-c C-d】recent dirs 【C-c C-q】wdired 【M-o】equal panes 【C-enter】open in next pane 
【N】copy/rename same dir 【s/r】sort/reverse 【X】exe file 【K】clone (cp tree) 【y】calc size


"

("a" find-file  )
("b"  nil  )
;("c"  company-complete )
("c"  auto-complete )
("d"  nil )
("e"  nil )
("f"  nil )
("g"  nil )
("h"  hide-sublevels )
("i"  hydra-editing-insert/body )
("j"  nil )
("k"  nil )
("l"  nil )
("m"  helm-mark-ring )
("n"  set-mark-command )
("o"  set-mark-command 4 )
("p"  duplicate-current-line-or-region )
("r"  sr-editable-pane )
("s"  nil )
("t"  sr-term-cd )
("T"  sr-term )
("<f9>"  sr-term-cd-newterm )
("u"  nil )
("v"  nil)
("w"  nil )
("x"  nil )
("y"  helm-show-kill-ring )
("z"  nil )
("\\"  z/insert-slsh )
(";"  comment-or-uncomment-region )
("q"  nil )

)

(use-package sunrise-x-popviewer
  :ensure t
  :config
(require 'sunrise-x-popviewer)
(sr-popviewer-mode 1)
;; to open in next pane and not new window
(setq sr-popviewer-select-viewer-action
         (lambda nil (let ((sr-running nil)) (other-window 1))))
  )

(use-package sunrise-x-mirror
 :ensure t
 :config
 (require 'sunrise-x-mirror)
(setq sr-mirror-unionfs-impl (quote unionfs-fuse))
 )

(use-package sunrise-x-loop
 :ensure t
 :config
(require 'sunrise-x-loop) 
 )

(use-package  sunrise-x-modeline
 :ensure t
 :config
 )

(use-package sunrise-x-tabs
 :ensure t
 :config
;(require 'sunrise‐x‐tabs) 
 )

(use-package sunrise-x-checkpoints
 :ensure t
 :config
  )

;;; Adding files opened with external apps to the history of recent files.
(defadvice openwith-file-handler
  (around advice-openwith-file-handler (operation &rest args))
  (condition-case description
      ad-do-it
    (error (progn
             (recentf-add-file (car args))
             (error (cadr description))))))
(ad-activate 'openwith-file-handler)

(defun er/sunrise-flatten ()
 (interactive)
 (sr-find "-type f"))

; Kill all sunrise and dired buffers when closing Sunrise Commander
(defun er/kill-all-sunrise-buffers()
      "Kill all dired buffers."
      (interactive)
      (save-excursion
        (let((count 0))
          (dolist(buffer (buffer-list))
            (set-buffer buffer)
            (when (derived-mode-p 'dired-mode 'sr-virtual-mode 'sr-mode)
                (setq count (1+ count))
                (kill-buffer buffer)))
          (message "Killed %i sunrise buffer(s)." count ))))
(setq sr-quit-hook 'er/kill-all-sunrise-buffers)

(use-package sr-speedbar
 :ensure t
 :config
  )

(use-package swiper 
 :ensure t
 :config
 )

(defun swiper-at-point ()
  (interactive)
  (swiper (thing-at-point 'symbol)))

(add-to-list 'load-path "/home/zeltak/.emacs.g/transmission/")
(require 'transmission)
(setq transmission-host "10.0.0.2")
(setq transmission-rpc-path "/transmission/web/")
(setq transmission-rpc-auth '(:username "zeltak" :password "salar" ) )

(use-package undo-tree 
:ensure t
:config
(global-undo-tree-mode 1)
(setq undo-tree-auto-save-history t)
(setq undo-tree-history-directory-alist '((".*" . "~/.emacs.t/undo-files")))
(setq undo-tree-mode-lighter "")         
)

(use-package unfill
:ensure t
:config
)

(use-package weechat
   :ensure t
   :config
  (require 'weechat)
(setq weechat-modules '(weechat-button
                        weechat-complete
                        weechat-spelling
                        weechat-corrector
                        weechat-tracking
                        weechat-notifications))
   )

(eval-after-load 'weechat
  '(progn
     (setq weechat-host-default "karif.server-speed.net"
           weechat-port-default 9001
           weechat-color-list
           '(unspecified "black" "dark gray" "dark red" "red"
                         "dark green" "light green" "brown"
                         "yellow" "RoyalBlue3"
                         "light blue"
                         "dark magenta" "magenta" "dark cyan"
                         "light cyan" "gray" "white")
           weechat-prompt "> "
           weechat-notification-mode t
           weechat-auto-monitor-buffers t 
           weechat-complete-nick-ignore-self nil
           weechat-button-buttonize-nicks nil
           weechat-tracking-types '(:highlight (".+#weechat.el" . :message))
           weechat-sync-active-buffer t)
     (setq weechat-auto-monitor-buffers
      '("freenode.#gmpc"
        "bitlbee.rasi"))
     (set-face-background 'weechat-highlight-face "dark red")
     (set-face-foreground 'weechat-highlight-face "light grey")
     (add-hook 'weechat-mode-hook 'visual-line-mode)
     (tracking-mode)))

(winner-mode 1)

;(use-package workgroups2
; :ensure t
; :config
;(workgroups-mode 1)        ; put this one at the bottom of .emacs (init.el)
;(require 'workgroups2)
;; Change workgroups session file
;(setq wg-session-file "~/.emacs.d/.emacs_workgroups") 
;)

(use-package xah-find
 :ensure t
 :config
  )

(use-package yasnippet
:ensure t
 :config 
(require 'yasnippet)
(yas-global-mode 1)
;; Use custom snippets.
;(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(yas-reload-all)
(setq yas-snippet-dirs '("~/.emacs.d/snippets/"))
;for orgmode properties fix 
(setq yas-indent-line 'fixed)
;set insert at point prompt type- here ido
(setq yas/prompt-functions '(yas/ido-prompt
                            yas/completing-prompt))
)

(defun shk-yas/helm-prompt (prompt choices &optional display-fn)
  "Use helm to select a snippet. Put this into `yas/prompt-functions.'"
  (interactive)
  (setq display-fn (or display-fn 'identity))
  (if (require 'helm-config)
      (let (tmpsource cands result rmap)
        (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
        (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
        (setq tmpsource
              (list
               (cons 'name prompt)
               (cons 'candidates cands)
               '(action . (("Expand" . (lambda (selection) selection))))
               ))
        (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
        (if (null result)
            (signal 'quit "user quit!")
          (cdr (assoc result rmap))))
    nil))

;; (use-package yasnippet
;; :diminish yas-minor-mode
;; :commands yas-global-mode
;; :ensure t
;;   :bind ("M-=" . yas-insert-snippet)
;;   :config
;;   (progn
;;     (defun my-yas/prompt (prompt choices &optional display-fn)
;;       (let* ((names (loop for choice in choices
;;                           collect (or (and display-fn
;;                                            (funcall display-fn choice))
;;                                       choice)))
;;              (selected (helm-other-buffer
;;                         `(((name . ,(format "%s" prompt))
;;                            (candidates . names)
;;                            (action . (("Insert snippet" . (lambda (arg)
;;                                                             arg))))))
;;                         "*helm yas/prompt*")))
;;         (if selected
;;             (let ((n (position selected names :test 'equal)))
;;               (nth n choices))
;;           (signal 'quit "user quit!"))))
;;     (custom-set-variables '(yas/prompt-functions '(my-yas/prompt))))))

(defun z-fix-characters 
(start end) 
(interactive "r") 
(let ((buffer-invisibility-spec)) (query-replace-regexp "[^\t\n\r\f -~]" ""))
)

(defun z-fix2-characters ()
  (interactive)
  (let ()
    (query-replace-regexp "[^\t\n\r\f -~]" "")
    ))

(defun z-year-increment  (buffer max-year)
  (interactive "b\nsMax year (yy): ")
  (setq max-year (string-to-number max-year))
  (let ((year 2003)
        (newbuf (get-buffer-create "increment-year")))
    (let ((s (with-current-buffer buffer
               (buffer-substring (point-min) (point-max)))))
      (dotimes (n (1+ max-year))
        (with-current-buffer newbuf
          (goto-char (point-max))
          (insert "\n")
          (insert (replace-regexp-in-string (int-to-string year)
                                            (int-to-string (+ year n))
                                            s)))))
    (switch-to-buffer newbuf)))

(defun flush-blank-lines ()
    "Removes all blank lines from buffer or region"
     (interactive)
     (save-excursion
       (let (min max)
         (if (equal (region-active-p) nil)
             (mark-whole-buffer))
         (setq min (region-beginning) max (region-end))
         (flush-lines "^ *$" min max t))))

(global-set-key (kbd "M-j")
            (lambda ()
                  (interactive)
                  (join-line -1)))

(defun unfill-paragraph ()
  "Replace newline chars in current paragraph by single spaces.
This command does the inverse of `fill-paragraph'."
  (interactive)
  (let ((fill-column 90002000)) ; 90002000 is just random. you can use `most-positive-fixnum'
    (fill-paragraph nil)))

(defun unfill-region (start end)
  "Replace newline chars in region by single spaces.
This command does the inverse of `fill-region'."
  (interactive "r")
  (let ((fill-column 90002000))
    (fill-region start end)))

(defun z-count-words-region (posBegin posEnd)
  "Print number of words and chars in region."
  (interactive "r")
  (message "Counting …")
  (save-excursion
    (let (wordCount charCount)
      (setq wordCount 0)
      (setq charCount (- posEnd posBegin))
      (goto-char posBegin)
      (while (and (< (point) posEnd)
                  (re-search-forward "\\w+\\W*" posEnd t))
        (setq wordCount (1+ wordCount)))

      (message "Words: %d. Chars: %d." wordCount charCount)
      )))

(defun z/copy-comment-paste ()
  "copy active region/current line, comment, and then paste"
  (interactive)
  (unless (use-region-p)
    (progn
      (beginning-of-line 2)
      (push-mark (line-beginning-position 0))))
  (kill-ring-save (region-beginning) (region-end))
  (comment-region (region-beginning) (region-end))
  (yank)
  (exchange-point-and-mark)
  (indent-according-to-mode))

(defun z/comment-line (n)
  "Comment or uncomment current line and leave point after it.
With positive prefix, apply to N lines including current one.
With negative prefix, apply to -N lines above.
If region is active, apply to active region instead."
  (interactive "p")
  (if (use-region-p)
      (comment-or-uncomment-region
       (region-beginning) (region-end))
    (let ((range
           (list (line-beginning-position)
                 (goto-char (line-end-position n)))))
      (comment-or-uncomment-region
       (apply #'min range)
       (apply #'max range)))
    (forward-line 1)
    (back-to-indentation)))

(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(defun z-insert-date (&optional addTimeStamp-p)
  "Insert current date and or time. In this format yyyy-mm-dd.
 When called with `universal-argument', insert date and time, e.g. 2012-05-28T07:06:23-07:00
 Replaces text selection.See also `current-date-time-string'."
  (interactive "P")
  (when (region-active-p) (delete-region (region-beginning) (region-end) ) )
  (cond
   ((equal addTimeStamp-p nil ) (insert (format-time-string "%Y-%m-%d")))
   (t (insert (current-date-time-string))) ) )

(defun copy-to-x-clipboard ()
  (interactive)
  (if (region-active-p)
      (progn
        (cond
         ((and (display-graphic-p) x-select-enable-clipboard)
          (x-set-selection 'CLIPBOARD (buffer-substring (region-beginning) (region-end))))
         (t (shell-command-on-region (region-beginning) (region-end)
                                     (cond
                                      (*cygwin* "putclip")
                                      (*is-a-mac* "pbcopy")
                                      (*linux* "xsel -ib")))
            ))
        (message "Yanked region to clipboard!")
        (deactivate-mark))
        (message "No region active; can't yank to clipboard!")))

(defun paste-from-x-clipboard()
  (interactive)
  (cond
   ((and (display-graphic-p) x-select-enable-clipboard)
    (insert (x-selection 'CLIPBOARD)))
   (t (shell-command
       (cond
        (*cygwin* "getclip")
        (*is-a-mac* "pbpaste")
        (t "xsel -ob"))
       1))
   ))

(defun prelude-indent-rigidly-and-copy-to-clipboard (begin end indent)
  "Copy the selected code region to the clipboard, indented according
to Markdown blockquote rules."
  (let ((buffer (current-buffer)))
    (with-temp-buffer
      (insert-buffer-substring-no-properties buffer begin end)
      (indent-rigidly (point-min) (point-max) indent)
      (clipboard-kill-ring-save (point-min) (point-max)))))

(defun prelude-indent-blockquote-and-copy-to-clipboard (begin end)
  "Copy the selected code region to the clipboard, indented according
to markdown blockquote rules (useful to copy snippets to StackOverflow, Assembla, Github."
  (interactive "r")
  (prelude-indent-rigidly-and-copy-to-clipboard begin end 4))

(defun prelude-indent-nested-blockquote-and-copy-to-clipboard (begin end)
  "Copy the selected code region to the clipboard, indented according
to markdown blockquote rules. Useful to add snippets under bullet points."
  (interactive "r")
  (prelude-indent-rigidly-and-copy-to-clipboard begin end 6))

;(defun  z/search-replace-file ()
;(interactive)
;(goto-char (point-min))
;(query-replace-regexp ))

(defun duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
If there's no region, the current line will be duplicated. However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (let (beg end (origin (point)))
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (let ((region (buffer-substring-no-properties beg end)))
      (dotimes (i arg)
        (goto-char end)
        (newline)
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg)))))

(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)

(defun z/copy-line (arg)
    "Copy lines (as many as prefix argument) in the kill ring.
      Ease of use features:
      - Move to start of next line.
      - Appends the copy on sequential calls.
      - Use newline as last char even on the last line of the buffer.
      - If region is active, copy its lines."
    (interactive "p")
    (let ((beg (line-beginning-position))
          (end (line-end-position arg)))
      (when mark-active
        (if (> (point) (mark))
            (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
          (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
      (if (eq last-command 'copy-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-ring-save beg end)))
    (kill-append "\n" nil)
    (beginning-of-line (or (and arg (1+ arg)) 2))
    (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

; (define-key ctl-x-map "\C-i" 'endless/ispell-word-then-abbrev)

 (define-prefix-command 'endless/toggle-map)
 ;; The manual recommends C-c for user keys, but C-x t is
 ;; always free, whereas C-c t is used by some modes.
 (define-key ctl-x-map "t" 'endless/toggle-map)
 (define-key endless/toggle-map "w" 'endless/ispell-word-then-abbrev)

 (defun endless/ispell-word-then-abbrev (p)
   "Call `ispell-word'. Then create an abbrev for the correction made.
 With prefix P, create local abbrev. Otherwise it will be global."
   (interactive "P")
   (let ((bef (downcase (or (thing-at-point 'word) ""))) aft)
     (call-interactively 'ispell-word)
     (setq aft (downcase (or (thing-at-point 'word) "")))
     (unless (string= aft bef)
       (message "\"%s\" now expands to \"%s\" %sally"
                bef aft (if p "loc" "glob"))
       (define-abbrev
         (if p local-abbrev-table global-abbrev-table)
         bef aft))))

(defun z/regex-delete-numeric  ()
  "delete all numeric characters"
  (interactive)
  (goto-char (point-min))
  (replace-regexp "[0-9]" "")
)

(defun z/comment-box (b e)
  "Draw a box comment around the region but arrange for the region
to extend to at least the fill column. Place the point after the
comment box."
  (interactive "r")
  (let ((e (copy-marker e t)))
    (goto-char b)
    (end-of-line)
    (insert-char ?  (- fill-column (current-column)))
    (comment-box b e 1)
    (goto-char e)
    (set-marker e nil)))

(defun z/insert-keyleft ()
  " insert 【   "
  (interactive)
  (insert "【")
  )

(defun z/insert-keyright ()
  " insert 】   "
  (interactive)
  (insert "】")
  )


(defun z/insert-keyboth ()
  " insert 【】  "
  (interactive)
  (insert "【】")
(backward-char 2)  
)

(defun z/insert-bashscript ()
  " insert #!/bin/sh  "
  (interactive)
  (insert "#!/bin/sh")

(defun z/insert-play ()
  " insert   ‣  "
  (interactive)
  (insert "‣")
)

)

(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))

(defun z/org-convert-header-samelevel  ()
                     (interactive)                                
                     (let ((current-prefix-arg '(4)))             
                       (call-interactively #'org-toggle-heading)))

(defun z/org-tangle-atpoint  ()
                     (interactive)                                
                     (let ((current-prefix-arg '(4)))             
                       (call-interactively #'org-babel-tangle)))

(defun pl/hot-expand (str)
  "Expand org template."
  (insert str)
  (org-try-structure-completion))

(with-eval-after-load "org"
  (define-key org-mode-map "<"
    (lambda () (interactive)
      (if (looking-back "^")
          (hydra-org-template/body)
        (self-insert-command 1)))))

;(fset 'z/prefix-org-refile (C-u M-x org-refile))

(defun z/org-agenda-calendar ()
"open work agenda"
(interactive)                                
(org-agenda nil "a")
)

(defun z/org-agenda-work ()
"open work agenda"
(interactive)                                
(org-agenda nil "w")
)

(defun z/org-agenda-allan ()
"open work agenda"
(interactive)                                
(org-agenda nil "A")
)

(defun z/org-agenda-joel ()
"open work agenda"
(interactive)                                
(org-agenda nil "j")
)

(defun z/org-agenda-cook ()
"open work agenda"
(interactive)                                
(org-agenda nil "f")
)

(fset 'expdf
      [?\C-c ?\C-e ?\l ?\o ])

(defun z/comment-org-in-src-block ()    
(interactive)
(org-edit-special)
(mark-whole-buffer)
(comment-dwim nil)
(org-edit-src-exit))

(defun z/insert-slsh ()
  " insert     "
  (interactive)
  (insert "\\")
)

(defun z-edit-file-as-root ()
  "Edit the file that is associated with the current buffer as root"
  (interactive)
  (if (buffer-file-name)
      (progn
        (setq file (concat "/sudo:root@localhost:" (buffer-file-name)))
        (find-file file))
    (message "Current buffer does not have an associated file.")))

(defun z-kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

(defun next-user-buffer ()
  "Switch to the next user buffer.
User buffers are those whose name does not start with *."
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (and (string-match "^*" (buffer-name)) (< i 50))
      (setq i (1+ i)) (next-buffer) )))

(defun previous-user-buffer ()
  "Switch to the previous user buffer.
User buffers are those whose name does not start with *."
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (and (string-match "^*" (buffer-name)) (< i 50))
      (setq i (1+ i)) (previous-buffer) )))

(defun next-emacs-buffer ()
  "Switch to the next emacs buffer.
Emacs buffers are those whose name starts with *."
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (and (not (string-match "^*" (buffer-name))) (< i 50))
      (setq i (1+ i)) (next-buffer) )))

(defun previous-emacs-buffer ()
  "Switch to the previous emacs buffer.
Emacs buffers are those whose name starts with *."
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (and (not (string-match "^*" (buffer-name))) (< i 50))
      (setq i (1+ i)) (previous-buffer) )))


(defun switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
