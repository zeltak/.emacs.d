(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)

; Check if system is windows
(defun system-type-is-win ()
(interactive)
"Return true if system is windows"
(string-equal system-type "windows-nt")
)

;; Check if system is GNU/Linux
(defun system-type-is-gnu ()
(interactive)
"Return true if system is GNU/Linux-based"
(string-equal system-type "gnu/linux")
)

;;;add custom themes to list
  (add-to-list 'custom-theme-load-path "/home/zeltak/.emacs.d/themes")
  ;to load a specifc theme 
  ;(load-file "~/.emacs.d/themes/zprime-theme.el")
  ;load the choosen theme at startup 
  (load-theme 'zprime t)

;;;; below works but changes GUI apps theme when launching term..not good..maybe look into this in future  

;; ;; last t is for NO-ENABLE
  ;;   (load-theme 'zprime t t)
  ;;   (load-theme 'tango-dark t t)
  
  ;;   (defun mb/pick-color-theme (frame)
  ;;     (select-frame frame)
  ;;     (if (window-system frame)
  ;;         (progn  
  ;;           (disable-theme 'tango-dark) ; in case it was active
  ;;           (enable-theme 'zprime))
  ;;       (progn  
  ;;         (disable-theme 'zprime) ; in case it was active
  ;;         (enable-theme 'tango-dark))))
  ;;   (add-hook 'after-make-frame-functions 'mb/pick-color-theme)
  
  ;;   ;; For when started with emacs or emacs -nw rather than emacs --daemon
  ;;   (if window-system
  ;;       (enable-theme 'zprime)
  ;;     (enable-theme 'tango-dark))

(setq org-export-backends (quote (ascii html icalendar latex org)))

(add-to-list 'load-path "/home/zeltak/.emacs.g/org-mode/contrib/lisp/")

; fonts in linux
(if (system-type-is-gnu)
;(add-to-list 'default-frame-alist '(font . "Inconsolata-16"))
;(add-to-list 'default-frame-alist '(font . "Source Code Pro-14"))
;(add-to-list 'default-frame-alist '(font . "Pragmata Pro-19"))
;(add-to-list 'default-frame-alist '(font . "Fantasque Sans Mono 14"))
(add-to-list 'default-frame-alist '(font . "fira mono 19"))
)

;; fontso in Win
(if (system-type-is-win)
(add-to-list 'default-frame-alist '(font . "Consolas-14"))
)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; UTF-8 as default encoding
(set-language-environment "UTF-8")

;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))
 
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

;;  (setq dcsh-command-list '("all_registers"
;;                                "check_design" "check_test" "compile" "current_design"
;;                                "link" "uniquify"
;;                                "report_timing" "report_clocks" "report_constraint"
;;                                "get_unix_variable" "set_unix_variable"
;;                                "set_max_fanout"
;;                                "report_area" "all_clocks" "all_inputs" "all_outputs"))

;;      (defun he-dcsh-command-beg ()
;;        (let ((p))
;;          (save-excursion
;;            (backward-word 1)
;;            (setq p (point)))
;;          p))

;;      (defun try-expand-dcsh-command (old)
;;        (unless old
;;          (he-init-string (he-dcsh-command-beg) (point))
;;          (setq he-expand-list (sort
;;                                (all-completions he-search-string (mapcar 'list dcsh-command-list))
;;                                'string-lessp)))
;;        (while (and he-expand-list
;;                (he-string-member (car he-expand-list) he-tried-table))
;;          (setq he-expand-list (cdr he-expand-list)))
;;        (if (null he-expand-list)
;;            (progn
;;              (when old (he-reset-string))
;;              ())
;;          (he-substitute-string (car he-expand-list))
;;          (setq he-tried-table (cons (car he-expand-list) (cdr he-tried-table)))
;;          (setq he-expand-list (cdr he-expand-list))
;;          t))

;;  (setq hippie-expand-try-functions-list (cons 'yas/hippie-try-expand hippie-expand-try-functions-list))

;;  (defun my-hippie-expand-completions (&optional hippie-expand-function)
;;        "Return the full list of possible completions generated by `hippie-expand'.
;;      The optional argument can be generated with `make-hippie-expand-function'."
;;        (let ((this-command 'my-hippie-expand-completions)
;;              (last-command last-command)
;;              (buffer-modified (buffer-modified-p))
;;              (hippie-expand-function (or hippie-expand-function 'hippie-expand)))
;;          (flet ((ding)) ; avoid the (ding) when hippie-expand exhausts its options.
;;            (while (progn
;;                     (funcall hippie-expand-function nil)
;;                     (setq last-command 'my-hippie-expand-completions)
;;                     (not (equal he-num -1)))))
;;          ;; Evaluating the completions modifies the buffer, however we will finish
;;          ;; up in the same state that we began, and (save-current-buffer) seems a
;;          ;; bit heavyweight in the circumstances.
;;          (set-buffer-modified-p buffer-modified)
;;          ;; Provide the options in the order in which they are normally generated.
;;          (delete he-search-string (reverse he-tried-table))))
 
;;      (defmacro my-ido-hippie-expand-with (hippie-expand-function)
;;        "Generate an interactively-callable function that offers ido-based completion
;;      using the specified hippie-expand function."
;;        `(call-interactively
;;          (lambda (&optional selection)
;;            (interactive
;;             (let ((options (my-hippie-expand-completions ,hippie-expand-function)))
;;               (if options
;;                   (list (ido-completing-read "Completions: " options)))))
;;            (if selection
;;                (he-substitute-string selection t)
;;              (message "No expansion found")))))
 
;;      (defun my-ido-hippie-expand ()
;;        "Offer ido-based completion for the word at point."
;;        (interactive)
;;        (my-ido-hippie-expand-with 'hippie-expand))
 
;; ;; (global-set-key (kbd "<f12>") 'my-ido-hippie-expand)
;; ;; (global-set-key [(meta f5)] (make-hippie-expand-function
;; ;;                                '(try-expand-dcsh-command
;; ;;                                  try-expand-dabbrev-visible
;; ;;                                  try-expand-dabbrev
;; ;;                                  try-expand-dabbrev-all-buffers) t))
;; (global-set-key (kbd "M-/") 'hippie-expand)
;; ;; (global-set-key (kbd "TAB") 'hippie-expand)

;; (ido-mode 1)
;; (require 'flx-ido)
;; (ido-everywhere 1)
;; (flx-ido-mode 1)
;; ;; disable ido faces to see flx highlights.
;; (setq ido-use-faces nil)


;; (setq ido-max-directory-size 100000)
;; (ido-mode (quote both))
;; ; Use the current window when visiting files and buffers with ido
;; (setq ido-default-file-method 'selected-window)
;; (setq ido-default-buffer-method 'selected-window)



;; ;ignore case
;; (setq ido-case-fold t)
;; (setq ido-enable-flex-matching t) ; fuzzy matching is a must have

;; ;ido-ubiquitous

;; ;recents ido
;; (defun recentf-ido-find-file ()
;;   "Find a recent file using ido."
;;   (interactive)
;;   (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
;;     (when file
;;      (find-file file))))


;; ;this keybinding lets you even more quickly reach your home folder when in ido-find-file.

;; (add-hook 'ido-setup-hook
;;  (lambda ()
;;    ;; Go straight home
;;    (define-key ido-file-completion-map
;;      (kbd "~")
;;      (lambda ()
;;        (interactive)
;;        (if (looking-back "/")
;;            (insert "~/")
;;          (call-interactively 'self-insert-command))))))

(use-package ace-window
    :config
;set keys to only these 
;;    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
;;    (setq aw-keys '(?1 ?2 ?3 ?4 ?5 ))
;; set to work in frames not global! so that if only 2 windows in frames frame it would switch between them 
(setq aw-scope 'frame)
;; set to true if you want to darken the background during switch
(setq aw-background nil)
;; When non-nil, ace-window will issue a read-char even for one window- you want it nil!
(setq aw-dispatch-always nil)


)

;  (use-package ace-isearch
;  :ensure t
;  :config
;  (ace-isearch-mode +1)
;  (global-ace-isearch-mode +1)
; (setq ace-isearch-function 'avy-goto-word-1)
;  )

;;   (custom-set-variables
;;   '(ace-isearch-input-length 9)
;;   '(ace-isearch-input-idle-delay 0.4)
;;   '(ace-isearch-submode 'ace-jump-char-mode)
;;   '(ace-isearch-use-ace-jump 'printing-char)
;; )

(use-package ace-link
 :ensure t
 :config
(ace-link-setup-default)
 )

(use-package anzu
 :ensure t
 :config
(require 'anzu)
(global-anzu-mode +1)

(set-face-attribute 'anzu-mode-line nil
                    :foreground "yellow" :weight 'bold)

(custom-set-variables
 '(anzu-mode-lighter "")
 '(anzu-deactivate-region t)
 '(anzu-search-threshold 1000)
 '(anzu-replace-to-string-separator " => "))
 
(global-set-key (kbd "M-%") 'anzu-query-replace)
(global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)

 )

(use-package async
:ensure t)

;(require 'tex)
;(setq preview-scale-function 1.1)

;; (use-package auto-complete
;;  :ensure t
;;  :config
;; (ac-config-default)

;; ;start after 4 characters
;; (setq ac-auto-start 4)
;; ;fix linium issues
;; (ac-linum-workaround)

;; ;; Examples
;; (set-face-background 'ac-candidate-face "lightgray")
;; (set-face-underline 'ac-candidate-face "darkgray")
;; (set-face-background 'ac-selection-face "steelblue")

;; )

(use-package avy
 :ensure t
 :config
 (defcustom avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?q ?w ?e ?r ?t ?y ?u ?i ?o ?p ?z ?x ?c ?v ?b ?n ?m )
 "Keys for jumping.") 
(setq avy-timeout-seconds 0.6)
 )

(use-package avy-zap
 :ensure t
 :config
  )

(use-package bm
 :ensure t
 :config
;;restore on load (even before you require bm)
(setq bm-restore-repository-on-load t)

(require 'bm)
;; Allow cross-buffer 'next'
(setq bm-cycle-all-buffers t)  
;;where to store persistant files
(setq bm-repository-file "~/.emacs.d/bm-repository")
;; save bookmarks
(setq-default bm-buffer-persistence t)

   ;; Loading the repository from file when on start up.
   (add-hook' after-init-hook 'bm-repository-load)

   ;; Restoring bookmarks when on file find.
   (add-hook 'find-file-hooks 'bm-buffer-restore)

   ;; Saving bookmark data on killing a buffer
   (add-hook 'kill-buffer-hook 'bm-buffer-save)

   ;; Saving the repository to file when on exit.
   ;; kill-buffer-hook is not called when Emacs is killed, so we
   ;; must save all bookmarks first.
   (add-hook 'kill-emacs-hook '(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))

   ;; Update bookmark repository when saving the file.
   (add-hook 'after-save-hook 'bm-buffer-save)

   ;; Restore bookmarks when buffer is reverted.
   (add-hook 'after-revert-hook 'bm-buffer-restore)


 )

(use-package helm-bm
 :ensure t
 :config
  )

(use-package bbdb
 :ensure t
 :config
(setq bbdb-file "~/.emacs.d/bbdb")           ;; keep ~/ clean; set before loading
(require 'bbdb) 
(bbdb-initialize)

 )

(use-package bbdb-csv-import
 :ensure t
 :config
  )

;; (use-package bind-map
;;  :ensure t
;;  :config

;; (bind-map z/base-leader-map
;;   :keys ("\\")
;; )

;; (bind-map-set-keys z/base-leader-map
;;   "c" 'z/org-export-revel-browse
;;   ;; ...
;;   )

;;  )

(use-package beacon
 :ensure t
 :config
(beacon-mode 1)
(setq beacon-push-mark 35)
(setq beacon-color "#21D6F4")
 )

(use-package bookmark+
:ensure t
:config
(setq bookmark-version-control t
      bookmark-save-flag t)
;ask for tags when saving a bookmark move nil to t to ask each time
(setq bmkp-prompt-for-tags-flag nil)
)

(use-package browse-kill-ring
:ensure t
:config
)

(use-package bug-hunter
 :ensure t
 :config
  )

(use-package calfw
 :ensure t
 :config
 (require 'calfw)
(require 'calfw-org)

(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "blue")  ; orgmode source
    (cfw:howm-create-source "magenta")  ; howm source
    (cfw:cal-create-source "Orange") ; diary source
   ))) 
 )

(use-package counsel
 :ensure t
 :config
  )

(use-package color-theme-approximate
 :ensure t
 :config
(color-theme-approximate-on)
 )

(use-package company-statistics
 :ensure t
 :config
 )

(use-package company
   :ensure t
   :config
;; companymode
  (require 'company)

; Company-mode backends
(eval-after-load "company"
  '(progn
     (add-to-list 'company-backends 'company-dabbrev)
     (add-to-list 'company-backends 'company-ispell)
     (add-to-list 'company-backends 'company-abbrev)
     (add-to-list 'company-backends 'company-files)

;; @see https://github.com/company-mode/company-mode/issues/348
     (require 'company-statistics)
     (company-statistics-mode)

;; yasnippet backend shadows other completions, see https://github.com/company-mode/company-mode/blob/master/company-yasnippet.el for solutions
;;better to leave disabled and use the ido mode for yasnippets
;;     (add-to-list 'company-backends 'company-yasnippet)
;; using the delete command disables specific modes 
    (setq company-backends (delete 'company-capf company-backends))
    (setq company-backends (delete 'company-ropemacs company-backends))
    (setq company-backends (delete 'company-clang company-backends))
    (setq company-backends (delete 'company-cmake company-backends))
    (setq company-backends (delete 'company-css company-backends))
    (setq company-backends (delete 'company-eclim company-backends))
    (setq company-backends (delete 'company-elisp company-backends))
    (setq company-backends (delete 'company-etags company-backends))
    (setq company-backends (delete 'company-gtags company-backends))
    (setq company-backends (delete 'company-keywords company-backends))
    (setq company-backends (delete 'company-nxml company-backends))
    (setq company-backends (delete 'company-oddmuse company-backends))
    (setq company-backends (delete 'company-semantic company-backends))
    (setq company-backends (delete 'company-template company-backends))
    (setq company-backends (delete 'company-tempo company-backends))
    (setq company-backends (delete 'company-tests company-backends))
    (setq company-backends (delete 'company-xcode company-backends))
    (setq company-backends (delete 'company-tempo company-backends))
    (setq company-backends (delete 'company-yasnippet company-backends))
;; capf is for all modes and all languges so its better to turn it off to not pollute completions.
;;     (add-to-list 'company-backends 'company-capf)
     ))

;;make it global
(add-hook 'after-init-hook 'global-company-mode)


;; company delay until suggestions are shown
(setq company-idle-delay 0.2)
;; whats the minimum to start completion 
(setq company-minimum-prefix-length 2)
(setq company-dabbrev-minimum-length 2)
;; weight by frequency
(setq company-transformers '(company-sort-by-occurrence))
;;dabbrev options 
(setq company-dabbrev-downcase nil)
(setq company-dabbrev-ignore-case nil)
(setq company-dabbrev-other-buffers t)
  ;; show numbers in popup?
(setq company-show-numbers t)
(setq company-require-match nil)
;; company dabbrev config
;; search all buffers 
(setq company-dabbrev-other-buffers t)


;; Don't enable company-mode in below major modes, OPTIONAL
(setq company-global-modes '(not eshell-mode comint-mode erc-mode rcirc-mode))



(defun org-mode-hook-setup ()
  ;; make `company-backends' local is critcal
  ;; or else, you will have completion in every major mode, that's very annoying!
  (make-local-variable 'company-backends)

  ;; OPTIONAL, if `company-ispell-dictionary' is nil, `ispell-complete-word-dict' is used
  ;;  but I prefer hard code the dictionary path. That's more portable.
  (setq company-ispell-dictionary (file-truename "~/.emacs.d/abbrv/english-words.txt")))

(add-hook 'org-mode-hook 'org-mode-hook-setup)


;;;keybinds
(global-set-key (kbd "M-.") 'company-complete)
(global-set-key (kbd "M-/") 'company-dabbrev)

   )

(use-package company-emoji
 :ensure t
 :config
(require 'company-emoji)
(add-to-list 'company-backends 'company-emoji)

(defun --set-emoji-font (frame)
  "Adjust the font settings of FRAME so Emacs can display emoji properly."
  (if (eq system-type 'darwin)
      ;; For NS/Cocoa
      (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
    ;; For Linux
    (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

;; For when Emacs is started in GUI mode:
(--set-emoji-font nil)

;; Hook for when a frame is created with emacsclient
;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
(add-hook 'after-make-frame-functions '--set-emoji-font)
 )

;; (add-to-list 'load-path "/home/zeltak/.emacs.g/company-org-headings")
;; (setq
;;  ;; align all annotations to the right tooltip border
;;  company-tooltip-align-annotations t
;;  company-org-headings/search-directory "~/notes"
;;  company-org-headings/case-sensitive nil)

;; ;; (add-hook 'org-mode-hook
;; ;;           (lambda ()
;; ;;             (set (make-local-variable 'company-backends)
;; ;;                  '((company-org-headings
;; ;;                     company-abbrev
;; ;;                     company-files
;; ;;                     )))))

(use-package dired-avfs
 :ensure t
 :config
 )

(use-package dired-filter
 :ensure t
 :config
 )

(use-package dired-rainbow
 :ensure t
 :config
 (require 'dired-rainbow)

(defconst dired-audio-files-extensions
  '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
  "Dired Audio files extensions")
(dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)


(defconst dired-docs-files-extensions
  '("docx" "doc" "odf" "odt" "xls" "xlsx" "ppt" "pptx" "ods" "odt")
  "Dired Docs files extensions")
(dired-rainbow-define docs "#42D14A" dired-docs-files-extensions)

(defconst dired-video-files-extensions
    '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
      "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
    "Dired Video files extensions")
(dired-rainbow-define video "#006EFF" dired-video-files-extensions)

(defconst dired-image-files-extensions
    '("jpeg" "jpg" "JPG" "JPEG" "png" "PNG" "bmp" "tif" "tiff" "xbm" "svg" )
    "Dired image files extensions")
(dired-rainbow-define image "#E009CF" dired-image-files-extensions)


(defconst dired-pdf-files-extensions
  '("pdf" "PDF")
  "Dired pdf files extensions")
(dired-rainbow-define pdf "#FF0000" dired-pdf-files-extensions)


(defconst dired-org-files-extensions
  '("org" "ORG")
  "Dired org files extensions")
(dired-rainbow-define org "#FF00A2" dired-org-files-extensions)


(defconst dired-compressed-files-extensions
  '("zip" "ZIP"  "tar.bz" "tar.gz" "7zip" "7ZIP" "tar" "TAR" "rar" "RAR")
  "Dired compressed files extensions")
(dired-rainbow-define compressed "#B56A00" dired-compressed-files-extensions)


 )

(use-package dired-narrow
  :ensure t
  :config
;;(setq dired-narrow-exit-action 'find-file)
(setq dired-narrow-exit-action 'dired-narrow-find-file)
  )

(use-package dired-open
 :ensure t
 :config
 (setq dired-open-extensions
      '(("pdf" . "okular")
        ("mkv" . "vlc")
        ("mp4" . "vlc")
        ("avi" . "vlc")
        ("html" . "firefox")
        ("mp3" . "vlc")
        ("doc" . "libreoffice")
        ("docx" . "libreoffice")
        ("odt" . "libreoffice")
        ("odf" . "libreoffice")
        ("xls" . "libreoffice")
        ("xlsx" . "libreoffice")
        ("ppt" . "libreoffice")
        ("pptx" . "libreoffice")
))
 )

(use-package dired-subtree
 :ensure t
 :config
 
 )

(use-package dired-ranger
 :ensure t
 :config
 
 )

(require 'dired-x)
  (add-hook 'dired-load-hook
            (function (lambda () (load "dired-x"))))

;; (setq dired-guess-shell-alist-user
;;       (list
;;        (list "//.chm$" "xchm")
;;        (list "//.rm$" "gmplayer")
;;        (list "//.rmvb$" "gmplayer")
;;        (list "//.avi$" "gmplayer")
;;        (list "//.asf$" "gmplayer")
;;        (list "//.wmv$" "gmplayer")
;;        (list "//.htm$" "w3m")
;;        (list "//.html$" "firefox")
;;        (list "//.mpg$" "gmplayer")))

(use-package dired-sort
 :ensure t
 :config
  )

(use-package dired-sort-menu
 :ensure t
 :config
 
 )

(use-package dired-sort-menu+
 :ensure t
 :config
 
 )

(use-package dired+
 :ensure t
 :config
;;; don't create a buffer for every dir I visit (use 1 to not create and -1 to creare)
(toggle-diredp-find-file-reuse-dir 1)
  )

(use-package dired-efap
 :ensure t
 :config
 
 )

(add-to-list 'load-path "/home/zeltak/.emacs.g/tmtxt-async-tasks")
(add-to-list 'load-path "/home/zeltak/.emacs.g/tmtxt-dired-async")
(require 'tmtxt-async-tasks)
(require 'tmtxt-dired-async)

(setq-default tat/window-close-delay "2")
(setq-default tat/window-height 15)

(use-package dired-fdclone
 :ensure t
 :config
 
 )

(use-package dired-toggle-sudo
 :ensure t
 :config
(require 'dired-toggle-sudo)
 (define-key dired-mode-map (kbd "C-c C-s") 'dired-toggle-sudo)
 (eval-after-load 'tramp
  '(progn
     ;; Allow to use: /sudo:user@host:/path/to/file
     (add-to-list 'tramp-default-proxies-alist
                  '(".*" "\\`.+\\'" "/ssh:%h:"))))
 
 )

(use-package helm-dired-recent-dirs
 :ensure t
 :config
 
 )

(use-package image-dired+
 :ensure t
 :config
     (eval-after-load 'image-dired+ '(image-diredx-async-mode 1))
    (eval-after-load 'image-dired+ '(image-diredx-adjust-mode 1))
 )

(use-package drag-stuff
 :ensure t
 :config
  )

(use-package  duplicate-thing 
 :ensure t
 :config
 )

(use-package ebib
 :ensure t
 :config
(setq ebib-preload-bib-files '("/home/zeltak/org/files/Uni/papers/kloog.2015.bib")) 

(setq ebib-common-optional-fields
      '(translator keywords origlanguage url file location
        partinfo subtitle edition abstract note annotator
        crossref urldate address subtitle language))

(setq ebib-file-associations '(("pdf" . "okular") ("djvu" . "okular")))
(setq ebib-uniquify-keys t)
(setq ebib-autogenerate-keys t)
(setq ebib-index-window-size 20)
(setq ebib-print-multiline t)

;index view
(setq ebib-index-display-fields (quote (year author)))
(setq ebib-sort-order (quote ((year) (author) )))

 )

(use-package easy-kill
   :ensure t
   :config
;; to replace Emacs native M-w
(global-set-key [remap kill-ring-save] 'easy-kill)
(global-set-key (kbd "M-3") 'easy-mark)
   )

;; (require 'edit-server)
;;  (edit-server-start)
;; (autoload 'edit-server-maybe-dehtmlize-buffer "edit-server-htmlize" "edit-server-htmlize" t)
;; (autoload 'edit-server-maybe-htmlize-buffer   "edit-server-htmlize" "edit-server-htmlize" t)
;; (add-hook 'edit-server-start-hook 'edit-server-maybe-dehtmlize-buffer)
;; (add-hook 'edit-server-done-hook  'edit-server-maybe-htmlize-buffer)

(use-package elfeed
 :ensure t
 :config

;;;default search 
(setq-default elfeed-search-filter "@2-week-ago +unread ")

;;change date formay 
(setq elfeed-search-date-format '("%d %b %H:%M" 12 :left))

;;set sort order
(setq elfeed-sort-order 'ascending)

;;; add a star tag http://matt.hackinghistory.ca/2015/11/22/elfeed/

 (eval-after-load 'elfeed-search 
;;  '(define-key elfeed-search-mode-map (kbd "<tab>") 'mwp/elfeed-star))
  '(define-key elfeed-search-mode-map (kbd "t") 'mwp/elfeed-star))


(defun mwp/elfeed-star ()
  "add a star tag to marked"

  (interactive)
  (elfeed-search-tag-all (list starred))
  )

(defun mwp/elfeed-star ()
  "Apply TAG to all selected entries."
  (interactive )
  (let* ((entries (elfeed-search-selected))
         (tag (intern "starred")))

    (cl-loop for entry in entries do (elfeed-tag entry tag))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

;;; add visual cue
(defface elfeed-search-starred-title-face
 '((t :foreground "#f77"))
 "Marks a starred Elfeed entry.")

(push '(starred elfeed-search-starred-title-face) 
       elfeed-search-face-alist)


;;Avoiding tagging old entries as unread:

;; Entries older than 2 weeks are marked as read
(add-hook 'elfeed-new-entry-hook
          (elfeed-make-tagger :before "2 weeks ago"
                              :remove 'unread))

;;for "Queue timeout exceeded" errors
(setf url-queue-timeout 30)

(define-key elfeed-search-mode-map (kbd "j") 'next-line)
(define-key elfeed-show-mode-map    (kbd "j") 'elfeed-show-next)
(define-key elfeed-search-mode-map (kbd "k") 'previous-line)
(define-key elfeed-show-mode-map    (kbd "k") 'elfeed-show-prev)

 )

(setq elfeed-feeds
   '(
;;comics
("http://phdcomics.com/gradfeed.php" comics)
("http://theoatmeal.com/feed/rss" comics)
("http://xkcd.com/rss.xml" comics)
("http://researchinprogress.tumblr.com/rss" comics)
;;food 
"http://feeds.feedburner.com/seriouseatsfeaturesvideos"
"http://feeds.feedburner.com/bazekalim" 
"http://feeds2.feedburner.com/thai-food-blog/main" 
"http://feeds2.feedburner.com/humus101rss" 
"http://feeds.feedburner.com/ptitim" 
"http://what-efrat.blogspot.com/feeds/posts/default" 
"http://feeds.feedburner.com/matkonation/BRUQ" 

;;Tech
"http://lifehacker.com/index.xml" 
"http://feeds.feedburner.com/Makeuseof" 
"http://xbmc.org/feed/" 
"http://googlecode.blogspot.com/atom.xml" 
"http://fulltextrssfeed.com/www.engadget.com/rss.xml"

;;geek stuff 
"http://www.geekologie.com/index.xml" 
;;personal blogs
"http://feeds.feedburner.com/AdventuresInOpenSource?format=xml"
"http://feeds.feedburner.com/yuval"

;;emacs
"http://oremacs.com/atom.xml" 
"http://emacshorrors.com/feed.atom" 
"http://emacsninja.com/feed.atom" 
"http://ericjmritz.name/feed/" 
"http://matt.hackinghistory.ca/feed/" 
"http://karl-voit.at/feeds/lazyblorg-all.atom_1.0.links-only.xml" 
"http://emacsmovies.org/atom.xml" 
"http://endlessparentheses.com/atom.xml" 
"http://planet.emacsen.org/atom.xml" 
"http://sachachua.com/blog/feed/" 
"http://kitchingroup.cheme.cmu.edu/blog/feed" 
"http://whattheemacsd.com/atom.xml" 
"http://www.masteringemacs.org/feed/" 
"http://emacsredux.com/atom.xml" 
"http://www.lunaryorn.com/feed.atom" 
"http://www.clarkdonley.com/atom.xml"

;;linux
"http://thelinuxrain.com/feed" 
"http://www.archlinux.org/feeds/news/" 
"http://www.freesoftwaremagazine.com/rss.xml" 
"http://www.kde.org/dotkdeorg.rdf" 
"http://www.linuxjournal.com/node/feed" 
"http://www.lunduke.com/?feed=rss2" 
"http://kmandla.wordpress.com/feed/" 
"http://www.phoronix.com/rss.php" 
"http://planet.linux.org.il/atom.xml" 
"http://planetkde.org/rss20.xml" 
"http://blog.sarine.nl/feed/" 
"http://rss.slashdot.org/Slashdot/slashdotLinux" 
"http://whatsup.org.il/backend.php" 
"http://igurublog.wordpress.com/feed/" 

;;mobile
"http://feeds.feedburner.com/xda-developers/ShsH" 
;;sports
"http://debuzzer.com/feed/" 
;;uni 
"http://rforpublichealth.blogspot.com/feeds/posts/default" 
;;music
"https://muspy.com/feed?id=f9qypqwxc658e6dbzwk8n9mqthsgv4" 

))

(defun elfeed-entry-as-html-link ()
  "Store an http link to an elfeed entry"
  (when (equal major-mode 'elfeed-show-mode)
    (let ((description (elfeed-entry-title elfeed-show-entry))
      (link (elfeed-entry-link elfeed-show-entry)))
     (org-store-link-props
      :type "http"
      :link link
      :description description))))

(add-hook 'org-store-link-functions 'elfeed-entry-as-html-link)

(use-package elfeed-goodies
 :ensure t
 :config
(require 'elfeed-goodies)
(elfeed-goodies/setup) 
 )

(use-package engine-mode
 :ensure t
 :config 
 )

(use-package evil
:ensure t
:config
)

;; (require 'evil)
;; (evil-mode 1)

;; ;for normal undo
;; (setq evil-want-fine-undo t)

;; ;;; esc quits
;; (define-key evil-normal-state-map [escape] 'keyboard-quit)
;; (define-key evil-visual-state-map [escape] 'keyboard-quit)
;; (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

;; ;searches
;; (global-set-key (kbd "C-*") 'evil-search-symbol-forward)
;; (global-set-key (kbd "C-#") 'evil-search-symbol-backward)

(use-package evil-nerd-commenter
:ensure t
:config
)
;(evilnc-default-hotkeys)
;(setq evilnc-hotkey-comment-operator ",,")

(use-package expand-region
 :ensure t
 :config
 :bind (
       ("M-2" . er/expand-region )
 )
)

(use-package find-file-in-project
 :ensure t
 :config

 )

(use-package flx
 :ensure t
 :config
 
 )

(use-package fill-column-indicator
:ensure t
:config
)

;; (use-package gnus-desktop-notify
;;  :ensure t
;;  :config
;;  (require 'gnus-desktop-notify)
;; (gnus-desktop-notify-mode)
;; (gnus-demon-add-scanmail)

;;  )

(use-package gscholar-bibtex
 :ensure t
 :config
(setq gscholar-bibtex-default-source "Google Scholar")
(setq gscholar-bibtex-database-file "/home/zeltak/org/files/Uni/papers/library.2015.bib")

 )

(use-package google-contacts
:ensure t
:config
)

(use-package goto-chg
 :ensure t
 :config
 (require 'goto-chg)
 )

(add-to-list 'load-path "~/.emacs.g/gmail2bbdb/")
(autoload 'gmail2bbdb-import-file "gmail2bbdb")

(use-package gnorb
 :ensure t
 :config
    )

(use-package grizzl
 :ensure t
 :config
  )

(use-package helm
:ensure t
:config
(require 'helm-config)
(helm-mode 1)
;(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
;;Autoresize
(helm-autoresize-mode t)
;; sets min and max helm height
(setq helm-autoresize-max-height 60)
(setq helm-autoresize-min-height 40)
)

(setq  helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
       helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
       helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
       helm-ff-file-name-history-use-recentf t
)

(setq helm-buffers-fuzzy-matching t
       helm-recentf-fuzzy-match    t)

(global-set-key (kbd "C-x b") 'helm-mini)

(use-package helm-cmd-t
:ensure t
:config
(defvar my-org-folders (list  "~/org/files/")
  "my permanent folders for helm-mini")

(defun helm-my-org (&optional arg)
  "Use C-u arg to work with repos."
  (interactive "P")
  (if (consp arg)
      (call-interactively 'helm-cmd-t-repos)
    (let ((helm-ff-transformer-show-only-basename nil))
      (helm :sources (mapcar (lambda (dir)
                               (helm-cmd-t-get-create-source-dir dir))
                             my-org-folders)
            :candidate-number-limit 20
            :buffer "*helm-my-org:*"
            :input "org$ "))))
)

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

(setq helm-locate-fuzzy-match t)

(use-package helm-ag
 :ensure t
 :config

 )

(use-package helm-bibtex
 :ensure t
 :config

;;;if not installing through MELPA
;;;(autoload 'helm-bibtex "helm-bibtex" "" t)

;;; telling helm-bibtex where your bibliographies can be found:
(setq helm-bibtex-bibliography '("/home/zeltak/org/files/Uni/papers/kloog.2015.bib" "/home/zeltak/org/files/Uni/papers/library.2015.bib" "/home/zeltak/org/files/Uni/papers/kloog.2015.misc.bib" ))

;;Specify where PDFs can be found:
(setq helm-bibtex-library-path (list "/home/zeltak/Sync/Uni/pdf_lib/" "/home/zeltak/Sync/Uni/pdf_lib_gen/") ) 

;;;If the BibTeX entries have a field that specifies the full path to the PDFs, that field can also be used
(setq helm-bibtex-pdf-field "File")

;;;; Note files
(setq helm-bibtex-notes-path "/home/zeltak/org/files/Uni/papers/notes")
(setq helm-bibtex-notes-extension ".org")

(setq helm-bibtex-format-citation-functions
  '((org-mode      . helm-bibtex-format-citation-org-link-to-PDF)
    (latex-mode    . helm-bibtex-format-citation-cite)
    (markdown-mode . helm-bibtex-format-citation-pandoc-citeproc)
    (default       . helm-bibtex-format-citation-default)))

;;Fields used for searching
(setq helm-bibtex-additional-search-fields '(tags))

;;;Symbols used for indicating the availability of notes and PDF files
(setq helm-bibtex-pdf-symbol "𝍌")
(setq helm-bibtex-notes-symbol "✎")

;;set default browser
(setq helm-bibtex-browser-function
  (lambda (url _) (start-process "firefox" "*firefox*" "firefox" url)))
;;  (lambda (url _) (start-process "chromium" "*chromium*" "chromium" url)))


 )

(defun helm-bibtex-ikloog-publications ()
   "Search BibTeX entries authored by me"
   (interactive)
(let ((helm-bibtex-bibliography "/home/zeltak/org/files/Uni/papers/kloog.2015.bib"))
   (helm :sources '(helm-source-bibtex)
         :full-frame t
         :input "kloog !kprep !ktalk !kconf !unpublished"
         :candidate-number-limit 500)))

;; Define helm-search with predefined search expression:
(defun helm-bibtex-ikloog-publications-all ()
  "Search BibTeX entries authored by me (ALL including prep)"
  (interactive)
  (helm :sources '(helm-source-bibtex)
        :full-frame t
        :input "kloog !unpublished"
        :candidate-number-limit 500))

;; Define helm-search with predefined search expression:
(defun helm-bibtex-ikloog-prep         ()
  "Search BibTeX entries in preperation with me"
  (interactive)
  (helm :sources '(helm-source-bibtex)
        :full-frame t
        :input "kloog kprep !unpublished"
        :candidate-number-limit 500))

(use-package helm-grepint
 :ensure t
 :config
     (require 'helm-grepint)
    (helm-grepint-set-default-config)
    (global-set-key (kbd "C-c g") #'helm-grepint-grep)
    (global-set-key (kbd "C-c G") #'helm-grepint-grep-root)
 )

(use-package helm-fuzzier
 :ensure t
 :config
 (require 'helm-fuzzier)
  (helm-fuzzier-mode 1)
 )

(use-package helm-swoop
 :ensure t
 :config
;; Move up and down like isearch
(define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
(define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
(define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
(define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)

;; From helm-swoop to helm-multi-swoop-all
(define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)

;; Save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save t)

;; If nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color nil)


 )

(use-package helm-mu
 :ensure t
 :config
  )

(use-package helm-projectile
 :ensure t
 :config

 )

(use-package helm-flyspell
 :ensure t
 :config
 
 )

(use-package help-fns+
 :ensure t
 :config
 
 )

(use-package mu4e-alert
 :ensure t
 :config
;; Choose the style you prefer for desktop notifications
(mu4e-alert-set-default-style 'libnotify)
(add-hook 'after-init-hook #'mu4e-alert-enable-notifications) 
(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
;;below will color the fringe (left side of an Emacs window)..worked but couldn't see how to disable it
;;;(alert-add-rule :category "mu4e-alert" :style 'fringe :predicate (lambda (_) (string-match-p "^mu4e-" (symbol-name major-mode))) :continue t)
(mu4e-alert-enable-notifications)

 )

(defun alert-fringe-restore (info)
  (copy-face 'alert-saved-fringe-face 'fringe))

(use-package highlight-symbol
 :ensure t
 :config
 )

(setq ivy-re-builders-alist
      '((t . ivy--regex-fuzzy)))

(setq ivy-display-style 'fancy)

(custom-set-faces
 '(swiper-minibuffer-match-face-1
   ((t :background "#dddddd")))
 '(swiper-minibuffer-match-face-2
   ((t :background "#bbbbbb" :weight bold)))
 '(swiper-minibuffer-match-face-3
   ((t :background "#bbbbff" :weight bold)))
 '(swiper-minibuffer-match-face-4
   ((t :background "#ffbbff" :weight bold))))

(setq ivy-count-format "(%d/%d) ")

(use-package org-grep
 :ensure t
 :config

 )

;(require 'highlights)
;; make sure you have dash, helm, helm-bibtex, ebib, s, f, hydra and key-chord
;; in your load-path
;require 'highlights)

(use-package hydra
:ensure t 
:config
(require 'hydra-examples) ;;for window splits etc
)

(use-package indent-guide
:ensure t
:config
)

(setq ispell-personal-dictionary "~/.emacs.d/ispell-dico-personal")
;;below command skipps checking inside org mode code blocks 
(add-to-list 'ispell-skip-region-alist '("#\\+begin_src". "#\\+end_src"))

(use-package key-chord 
  :ensure t
  :config
(key-chord-mode 1)
(setq key-chord-two-keys-delay 0.16)
(setq key-chord-one-key-delay 0.20)
)

(use-package link-hint
 :ensure t
 :config
 ;; Use chromium to open urls
(setq browse-url-browser-function 'browse-url-chromium)
;; You can alternatively change this setting in the config

;;; mu4e
(defun my/mu4e-open-all-attachments ()
  "Open all visible mu4e attachments."
  (interactive)
  (let ((link-hint-ignore-types
         (remove 'mu4e-attachment link-hint-all-types-list))
        link-hint-act-on-all-ignore-types)
    (link-hint-open-all-links)))
 )

(use-package lentic
 :ensure t
 :config
 )

;; (use-package magit
;;  :ensure t
;;  :config
;;   )

(setq manage-minor-mode-default
      '((global
         (on   rainbow-mode)
         (off  line-number-mode))
         (emacs-lisp-mode
         (on   rainbow-delimiters-mode eldoc-mode show-paren-mode))
         (js2-mode
         (on   color-identifiers-mode)
         (off  flycheck-mode))))

(use-package mic-paren
 :ensure t
 :config
  )

;(use-package mu4e-maildirs-extension
; :ensure t
; :config
;(setq mu4e-maildirs-extension-title "Mail")
;(setq mu4e-maildirs-extension-custom-list (quote ("INBOX" "Starred"  )))
; )

(use-package multiple-cursors
 :ensure t
 :config
 (require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

 )

(use-package nlinum
 :ensure t
 :config

 )

;; (use-package openwith 
;; :ensure t
;; :config
;; (require 'openwith)
;; (setq openwith-associations '(("\\.pdf\\'" "okular" (file))))
;; (setq openwith-associations '(("\\.mkv\\'" "mplayer" (file))))
;; (setq openwith-associations '(("\\.html\\'" "chromium" (file))))
;; (setq openwith-associations '(("\\.html\\'" "eww" (file))))
;; (setq openwith-associations '(("\\.mp4\\'" "vlc" (file))))
;; (setq openwith-associations '(("\\.ogm\\'" "vlc" (file))))
;; (setq openwith-associations '(("\\.avi\\'" "vlc" (file))))
;; (setq openwith-associations '(("\\.mpeg\\'" "vlc" (file))))
;; (setq openwith-associations '(("\\.mkv\\'" "vlc" (file))))
;; (openwith-mode t)
;; )

(use-package org-ref 
   :ensure t
   :config
  (require 'org-ref)
  ;; for pdf support  
 (require 'org-ref-pdf)
(require 'org-ref-url-utils)
  ;(org-babel-load-file "/home/zeltak/.emacs.g/extra/org-ref/org-ref.org")
  (setq reftex-default-bibliography '("/home/zeltak/org/files/Uni/papers/kloog.2015.bib"))

  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes "/home/zeltak/org/files/Uni/papers/notes/"
        org-ref-default-bibliography '("/home/zeltak/org/files/Uni/papers/kloog.2015.bib")
        org-ref-pdf-directory "/home/zeltak/Sync/Uni/pdf_lib/")

  (setq bibtex-autokey-year-length 4
        bibtex-autokey-name-year-separator "-"
        bibtex-autokey-year-title-separator "-"
        bibtex-autokey-titleword-separator "-"
        bibtex-autokey-titlewords 2
        bibtex-autokey-titlewords-stretch 1
        bibtex-autokey-titleword-length 5)
   )

(add-to-list 'load-path "/home/zeltak/.emacs.g/org-link-edit/")
(require 'org-link-edit)

(use-package org-bullets 
   :ensure t
   :config
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq  org-bullets-bullet-list '(
    "①"
    "②"
    "③ "
    "④"
    "⑤"
    "⑥"
    "⑦"
    "⑧"
    "⑨"
    "⑩"
    "⑪"
    "⑫"
    "⑬"
    "⑭"
    "⑮"
    ))
 )

(use-package org-cliplink
 :ensure t
 :config
 
 )

(use-package org-download 
   :ensure t
   :config
   (setq-default org-download-heading-lvl nil)
   (setq-default org-download-image-dir "/home/zeltak/Sync/attach/images_2015")
   ;;; to get rid of the #+DOWNLOADED part
;;(setq org-download-annotate-function (lambda (_) ""))
  )

;; (setq org-download-method 'attach
;;        org-download-screenshot-method "scrot -s %s"
;;        org-download-backend (if (executable-find "curl") "curl \"%s\" -o \"%s\"" t)))

;(if (string= system-name "voices") (setq-default org-download-image-dir "/home/zeltak/org/attach/images_2014/") (setq-default org-download-image-dir "/media/NAS/Uni/org/attach/images_2013/"))

(add-to-list 'load-path "/home/zeltak/.emacs.g/extra/org-dp/")
(require 'org-dp-lib)

(when (require 'org-dp-lib nil t)

;;;;;;;;;; wrap in elisp
  (defun z/wrap-elisp ()
        (org-dp-wrap-in-block
         nil '(src-block nil nil nil (:language "emacs-lisp" :preserve-indent 1  :parameters ":results none" ))))

;for hydra create interactive new functions
(defun z/hydra-wrap-elisp () (interactive) (beginning-of-line) (z/wrap-elisp))

;;;;;;;;;; wrap in bash
  (defun z/wrap-bash ()
        (org-dp-wrap-in-block
         nil '(src-block nil nil nil (:language "sh" :preserve-indent 1  :parameters ":results none" ))))

;for hydra create interactive new functions
(defun z/hydra-wrap-bash () (interactive) (beginning-of-line) (z/wrap-bash))


;;;;;;;;;; wrap in bash
  (defun z/wrap-example ()
        (org-dp-wrap-in-block
         nil '(src-block nil nil nil (:language "example" :preserve-indent 1  :parameters ":results none" ))))

;for hydra create interactive new functions
(defun z/hydra-wrap-example () (interactive) (beginning-of-line) (z/wrap-example))



;;;;;;;;;; wrap in R
  (defun z/wrap-R ()
        (org-dp-wrap-in-block
         nil '(src-block nil nil nil (:language "R" :preserve-indent 1  :parameters ":results none" ))))

;for hydra create interactive new functions
(defun z/hydra-wrap-R () (interactive) (beginning-of-line) (z/wrap-R))

;;;;;;;;;; wrap in latex
  (defun z/wrap-latex ()
        (org-dp-wrap-in-block
         nil '(src-block nil nil nil (:language "latex" :preserve-indent 1  :parameters ":results none" ))))

;for hydra create interactive new functions
(defun z/hydra-wrap-latex () (interactive) (beginning-of-line) (z/wrap-latex))


;end paren
     )

(require 'org-contacts)

(use-package org-vcard
 :ensure t
 :config
 
 )

(use-package org-pandoc
 :ensure t
 :config
 )

;; (use-package org-pdfview
;;  :ensure t
;;  :config
;;  )

(add-to-list 'load-path "/home/zeltak/.emacs.g/password-store/")
(require 'password-store)

(use-package pandoc-mode
 :ensure t
 :config
  )

;; (use-package pdf-tools
;;  :ensure t
;;  :config
;; (pdf-tools-install)
;; (eval-after-load 'org '(require 'org-pdfview))
;; (add-to-list 'org-file-apps '("\\.pdf\\'" . org-pdfview-open))
;; (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" . org-pdfview-open))


;;   )

(use-package projectile
   :ensure t
   :config
;;;disable global mode otherwise it kills tramp shh
;;(projectile-global-mode)
;; caching can significantly speedup file and directory listings, making it display instantly.
(setq projectile-enable-caching t)


;;(setq projectile-completion-system 'grizzl)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
;;(setq projectile-switch-project-action 'helm-projectile-find-file)
(setq projectile-switch-project-action 'helm-projectile)

(setq projectile-globally-ignored-directories
      (append '(
        ".git"
        ".svn"
        "out"
        "repl"
        "target"
        "venv"
        )
          projectile-globally-ignored-directories))
(setq projectile-globally-ignored-files
      (append '(
        ".DS_Store"
        "*.gz"
        "*.pyc"
        "*.jar"
        "*.tar.gz"
        "*.tgz"
        "*.zip"
        )
          projectile-globally-ignored-files))


   )

(use-package perspective
 :ensure t
 :config

 )

(use-package polymode
 :ensure t
 :config
(require 'poly-R) 
(require 'poly-org)
(add-to-list 'auto-mode-alist '("\\.org" . poly-org-mode))
 )

(use-package popup-imenu
 :ensure t
 :config
 
 )

(use-package rainbow-mode
:ensure t
:config
)

(dolist (hook '(css-mode-hook
                html-mode-hook
                js-mode-hook
                emacs-lisp-mode-hook
                org-mode-hook
                text-mode-hook
                ))
  (add-hook hook 'rainbow-mode))

(use-package rainbow-delimiters
 :ensure t
 :config
 (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(require 'rainbow-delimiters)
(set-face-attribute 'rainbow-delimiters-unmatched-face nil
                    :foreground 'unspecified
                    :inherit 'error)
 )

(use-package ranger
 :ensure t
 :config
(setq ranger-cleanup-eagerly t)
(setq ranger-show-dotfiles t)
(setq ranger-parent-depth 1)
(setq ranger-ignored-extensions '("mkv" "iso" "mp4"))
(setq ranger-cleanup-on-disable t)
(setq ranger-show-literal t)
(setq ranger-width-preview 0.55)

 )

(use-package scratch
 :ensure t
 :config
 (autoload 'scratch "scratch" nil t)
 )

(use-package shrink-whitespace
 :ensure t
 :config
 )

(use-package shell-pop
 :ensure t
 :config
 (custom-set-variables
 '(shell-pop-default-directory "/home/zeltak/")
 '(shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
 '(shell-pop-term-shell "/bin/zsh")
 '(shell-pop-universal-key "C-t")
 '(shell-pop-window-size 30)
 '(shell-pop-full-span t)
 '(shell-pop-window-position "bottom"))
 )

(use-package smooth-scrolling
 :ensure t
 :config
(require 'smooth-scrolling)
 )

(use-package smex
:ensure t
:config
)

(use-package sunrise-commander
 :ensure t
 :config
;;what to shoe in list view
(setq sr-attributes-display-mask '(nil nil t t t t t))
;start with no attributes in view (if set to nil)
(setq sr-show-file-attributes nil)
;sorting
(setq sr-listing-switches "--time-style=locale --group-directories-first -AlDhgG")


;;disbale F keys
;(setq sr-use-commander-keys nil)


;Here’s how to disable “click to visit file” and “cursor follows mouse”.
(setq sr-cursor-follows-mouse nil)
(setq sr-toggle-attribute 1)
(define-key sr-mode-map [mouse-1]        nil)
(define-key sr-mode-map [mouse-movement] nil)

;;nicer icons in modline
(setq sr-modeline-use-utf8-marks t)
;;where is avfs root
(setq sr-avfs-root "~/.avfs")

 )

(use-package sunrise-x-popviewer
  :ensure t
  :config
(require 'sunrise-x-popviewer)
(sr-popviewer-mode 1)
;; to open in next pane and not new window
(setq sr-popviewer-select-viewer-action
         (lambda nil (let ((sr-running nil)) (other-window 1))))
  )

(use-package sunrise-x-mirror
 :ensure t
 :config
 (require 'sunrise-x-mirror)
(setq sr-mirror-unionfs-impl (quote unionfs-fuse))
 )

(use-package sunrise-x-loop
 :ensure t
 :config
(require 'sunrise-x-loop) 
 )

(use-package  sunrise-x-modeline
 :ensure t
 :config
 )

(use-package sunrise-x-tabs
 :ensure t
 :config
;(require 'sunrise‐x‐tabs) 
 )

(use-package sunrise-x-checkpoints
 :ensure t
 :config
  )

;;; Adding files opened with external apps to the history of recent files.
(defadvice openwith-file-handler
  (around advice-openwith-file-handler (operation &rest args))
  (condition-case description
      ad-do-it
    (error (progn
             (recentf-add-file (car args))
             (error (cadr description))))))
(ad-activate 'openwith-file-handler)

(defun er/sunrise-flatten ()
 (interactive)
 (sr-find "-type f"))

; Kill all sunrise and dired buffers when closing Sunrise Commander
(defun er/kill-all-sunrise-buffers()
      "Kill all dired buffers."
      (interactive)
      (save-excursion
        (let((count 0))
          (dolist(buffer (buffer-list))
            (set-buffer buffer)
            (when (derived-mode-p 'dired-mode 'sr-virtual-mode 'sr-mode)
                (setq count (1+ count))
                (kill-buffer buffer)))
          (message "Killed %i sunrise buffer(s)." count ))))
(setq sr-quit-hook 'er/kill-all-sunrise-buffers)

(define-key sr-mode-map (kbd "/") 'sr-fuzzy-narrow) 
(define-key sr-mode-map (kbd "") 'er/sunrise-flatten) 
(define-key sr-mode-map (kbd "\\") 'hydra-sr-chd/body ) 
(define-key sr-mode-map (kbd "`") 'hydra-sunrise-leader/body ) 
;lynx like
(define-key sr-mode-map (kbd "<left>") 'sr-dired-prev-subdir ) 
(define-key sr-mode-map (kbd "<right>") 'sr-advertised-find-file ) 
;move back/forward im history
(define-key sr-mode-map (kbd "M-<left>") 'sr-history-prev ) 
(define-key sr-mode-map (kbd "M-<right>") 'sr-history-next )

(use-package sr-speedbar
 :ensure t
 :config
  )

(use-package swiper 
 :ensure t
 :config
;(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key "\C-r" 'swiper-at-point)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
 )

(defun swiper-at-point ()
  (interactive)
  (swiper (thing-at-point 'symbol)))

(use-package swiper-helm
 :ensure t
 :config
  )

(use-package twittering-mode
 :ensure t
 :config
;; save encrypted password 
(setq twittering-use-master-password t)
;;To display icons
(setq twittering-icon-mode t)
;;save local icons
(setq twittering-use-icon-storage t)
;;start with older first
(setq twittering-reverse-mode t)


 )

(use-package tiny
  :config
;  (global-set-key (kbd "C-s-t") 'tiny-expand)
)

;(add-to-list 'load-path "/home/zeltak/.emacs.g/transmission/")
(require 'transmission)
;(setq transmission-host "10.0.0.2")

(use-package undo-tree 
:ensure t
:config
(global-undo-tree-mode 1)
(setq undo-tree-auto-save-history t)
(setq undo-tree-history-directory-alist '((".*" . "~/.emacs.t/undo-files")))
(setq undo-tree-mode-lighter "")         
)

(use-package vimish-fold
 :ensure t
 :config
 (require 'vimish-fold)
;(global-set-key (kbd "<menu> v f") #'vimish-fold)
;(global-set-key (kbd "<menu> v v") #'vimish-fold-delete)
 )

(use-package unfill
:ensure t
:config
)

(use-package volatile-highlights
 :ensure t
 :config
(require 'volatile-highlights)
(volatile-highlights-mode t) 
 )

(use-package wanderlust
 :ensure t
 :config
 
 )

(use-package worf
 :ensure t
 :config
 )

(use-package weechat
   :ensure t
   :config
  (require 'weechat)
(setq weechat-modules '(weechat-button
                        weechat-complete
                        weechat-spelling
                        weechat-corrector
                        weechat-tracking
                        weechat-notifications))
   )

(eval-after-load 'weechat
  '(progn
     (setq weechat-host-default "karif.server-speed.net"
           weechat-port-default 9001
           weechat-color-list
           '(unspecified "black" "dark gray" "dark red" "red"
                         "dark green" "light green" "brown"
                         "yellow" "RoyalBlue3"
                         "light blue"
                         "dark magenta" "magenta" "dark cyan"
                         "light cyan" "gray" "white")
           weechat-prompt "> "
           weechat-notification-mode t
           weechat-auto-monitor-buffers t 
           weechat-complete-nick-ignore-self nil
           weechat-button-buttonize-nicks nil
           weechat-tracking-types '(:highlight (".+#weechat.el" . :message))
           weechat-sync-active-buffer t)
     (setq weechat-auto-monitor-buffers
      '("freenode.#gmpc"
        "bitlbee.rasi"))
     (set-face-background 'weechat-highlight-face "dark red")
     (set-face-foreground 'weechat-highlight-face "light grey")
     (add-hook 'weechat-mode-hook 'visual-line-mode)
     (tracking-mode)))

(winner-mode 1)

(use-package which-key
 :ensure t
 :config
(which-key-mode)

;;Popup side window on right. For defaults use
;;(which-key-setup-side-window-right)

 )

(use-package wrap-region
  :ensure t
  :config
  (wrap-region-add-wrappers
   '(("*" "*" nil org-mode)
     ("~" "~" nil org-mode)
     ("/" "/" nil org-mode)
     ("=" "=" nil org-mode)
     ("_" "_" nil org-mode)
     ("%" "%" nil org-mode)
     ("!" "!" nil org-mode)
     ("`" "`" nil org-mode)
     ("'" "'" nil org-mode)
     ("@" "@" nil org-mode)
     ("$" "$" nil (org-mode latex-mode))
))
  (add-hook 'org-mode-hook 'wrap-region-mode)
  (add-hook 'latex-mode-hook 'wrap-region-mode)
)

;;  (use-package workgroups2
;;  :ensure t
;;  :config
;;  (workgroups-mode 1)        ; put this one at the bottom of .emacs (init.el)
;;  (require 'workgroups2)
 ;; Change workgroups session file
;;  (setq wg-session-file "~/.emacs.d/.emacs_workgroups") 
;;  )

(use-package xah-find
 :ensure t
 :config
  )

(use-package yasnippet
:ensure t
 :config 
(require 'yasnippet)
(yas-global-mode 1)
;; Use custom snippets.
(yas-reload-all)
(setq yas-snippet-dirs '("~/.emacs.d/snippets/"))
;for orgmode properties fix 
(setq yas-indent-line 'fixed)
;set insert at point prompt type- here ido
(setq yas/prompt-functions '(yas/ido-prompt
                            yas/completing-prompt))
)

(defun shk-yas/helm-prompt (prompt choices &optional display-fn)
  "Use helm to select a snippet. Put this into `yas/prompt-functions.'"
  (interactive)
  (setq display-fn (or display-fn 'identity))
  (if (require 'helm-config)
      (let (tmpsource cands result rmap)
        (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
        (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
        (setq tmpsource
              (list
               (cons 'name prompt)
               (cons 'candidates cands)
               '(action . (("Expand" . (lambda (selection) selection))))
               ))
        (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
        (if (null result)
            (signal 'quit "user quit!")
          (cdr (assoc result rmap))))
    nil))

(add-to-list 'load-path "/home/zeltak/.emacs.g/org-reveal")
(load  "/home/zeltak/.emacs.g/org-reveal/ox-reveal.el")
;;where the root reveal folder is
(setq org-reveal-root  "file:///home/zeltak/apps/reveal.js")

(require 'org-velocity)

(defun z-fix-characters 
(start end) 
(interactive "r") 
(let ((buffer-invisibility-spec)) (query-replace-regexp "[^\t\n\r\f -~]" ""))
)

(defun z-fix2-characters ()
  (interactive)
  (let ()
    (query-replace-regexp "[^\t\n\r\f -~]" "")
    ))

(defun z-year-increment  (buffer max-year)
  (interactive "b\nsMax year (yy): ")
  (setq max-year (string-to-number max-year))
  (let ((year 2003)
        (newbuf (get-buffer-create "increment-year")))
    (let ((s (with-current-buffer buffer
               (buffer-substring (point-min) (point-max)))))
      (dotimes (n (1+ max-year))
        (with-current-buffer newbuf
          (goto-char (point-max))
          (insert "\n")
          (insert (replace-regexp-in-string (int-to-string year)
                                            (int-to-string (+ year n))
                                            s)))))
    (switch-to-buffer newbuf)))

(defun flush-blank-lines ()
    "Removes all blank lines from buffer or region"
     (interactive)
     (save-excursion
       (let (min max)
         (if (equal (region-active-p) nil)
             (mark-whole-buffer))
         (setq min (region-beginning) max (region-end))
         (flush-lines "^ *$" min max t))))

(global-set-key (kbd "M-j")
            (lambda ()
                  (interactive)
                  (join-line -1)))

(defun unfill-paragraph ()
  "Replace newline chars in current paragraph by single spaces.
This command does the inverse of `fill-paragraph'."
  (interactive)
  (let ((fill-column 90002000)) ; 90002000 is just random. you can use `most-positive-fixnum'
    (fill-paragraph nil)))

(defun unfill-region (start end)
  "Replace newline chars in region by single spaces.
This command does the inverse of `fill-region'."
  (interactive "r")
  (let ((fill-column 90002000))
    (fill-region start end)))

(defun count-sentences (begin end &optional print-message)
  "Count the number of sentences from BEGIN to END."
  (interactive (if (use-region-p)
                   (list (region-beginning)
                         (region-end)
                         t)
                 (list nil nil t)))
  (save-excursion
    (save-restriction
      (narrow-to-region (or begin (point-min))
                        (progn
                          (goto-char (or end (point-max)))
                          (skip-chars-backward " \t\n")
                          (point)))
      (goto-char (point-min))
      (let ((sentences 0))
        (while (not (looking-at-p "[ \t\n]*\\'"))
          (forward-sentence 1)
          (setq sentences (1+ sentences)))
        (if print-message
            (message
             "%s sentences in %s."
             sentences
             (if (use-region-p)
                 "region"
               "buffer"))
          sentences)))))

(defun z-count-words-region (posBegin posEnd)
  "Print number of words and chars in region."
  (interactive "r")
  (message "Counting …")
  (save-excursion
    (let (wordCount charCount)
      (setq wordCount 0)
      (setq charCount (- posEnd posBegin))
      (goto-char posBegin)
      (while (and (< (point) posEnd)
                  (re-search-forward "\\w+\\W*" posEnd t))
        (setq wordCount (1+ wordCount)))

      (message "Words: %d. Chars: %d." wordCount charCount)
      )))

(defun z/copy-comment-paste ()
  "copy active region/current line, comment, and then paste"
  (interactive)
  (unless (use-region-p)
    (progn
      (beginning-of-line 2)
      (push-mark (line-beginning-position 0))))
  (kill-ring-save (region-beginning) (region-end))
  (comment-region (region-beginning) (region-end))
  (yank)
  (exchange-point-and-mark)
  (indent-according-to-mode))

(defun z/comment-line (n)
  "Comment or uncomment current line and leave point after it.
With positive prefix, apply to N lines including current one.
With negative prefix, apply to -N lines above.
If region is active, apply to active region instead."
  (interactive "p")
  (if (use-region-p)
      (comment-or-uncomment-region
       (region-beginning) (region-end))
    (let ((range
           (list (line-beginning-position)
                 (goto-char (line-end-position n)))))
      (comment-or-uncomment-region
       (apply #'min range)
       (apply #'max range)))
    (forward-line 1)
    (back-to-indentation)))

(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(defun z-insert-date (&optional addTimeStamp-p)
  "Insert current date and or time. In this format yyyy-mm-dd.
 When called with `universal-argument', insert date and time, e.g. 2012-05-28T07:06:23-07:00
 Replaces text selection.See also `current-date-time-string'."
  (interactive "P")
  (when (region-active-p) (delete-region (region-beginning) (region-end) ) )
  (cond
   ((equal addTimeStamp-p nil ) (insert (format-time-string "%Y-%m-%d")))
   (t (insert (current-date-time-string))) ) )

(defun copy-to-x-clipboard ()
  (interactive)
  (if (region-active-p)
      (progn
        (cond
         ((and (display-graphic-p) x-select-enable-clipboard)
          (x-set-selection 'CLIPBOARD (buffer-substring (region-beginning) (region-end))))
         (t (shell-command-on-region (region-beginning) (region-end)
                                     (cond
                                      (*cygwin* "putclip")
                                      (*is-a-mac* "pbcopy")
                                      (*linux* "xsel -ib")))
            ))
        (message "Yanked region to clipboard!")
        (deactivate-mark))
        (message "No region active; can't yank to clipboard!")))

(defun paste-from-x-clipboard()
  (interactive)
  (cond
   ((and (display-graphic-p) x-select-enable-clipboard)
    (insert (x-selection 'CLIPBOARD)))
   (t (shell-command
       (cond
        (*cygwin* "getclip")
        (*is-a-mac* "pbpaste")
        (t "xsel -ob"))
       1))
   ))

(defun prelude-indent-rigidly-and-copy-to-clipboard (begin end indent)
  "Copy the selected code region to the clipboard, indented according
to Markdown blockquote rules."
  (let ((buffer (current-buffer)))
    (with-temp-buffer
      (insert-buffer-substring-no-properties buffer begin end)
      (indent-rigidly (point-min) (point-max) indent)
      (clipboard-kill-ring-save (point-min) (point-max)))))

(defun prelude-indent-blockquote-and-copy-to-clipboard (begin end)
  "Copy the selected code region to the clipboard, indented according
to markdown blockquote rules (useful to copy snippets to StackOverflow, Assembla, Github."
  (interactive "r")
  (prelude-indent-rigidly-and-copy-to-clipboard begin end 4))

(defun prelude-indent-nested-blockquote-and-copy-to-clipboard (begin end)
  "Copy the selected code region to the clipboard, indented according
to markdown blockquote rules. Useful to add snippets under bullet points."
  (interactive "r")
  (prelude-indent-rigidly-and-copy-to-clipboard begin end 6))

;(defun  z/search-replace-file ()
;(interactive)
;(goto-char (point-min))
;(query-replace-regexp ))

(defun duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
If there's no region, the current line will be duplicated. However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (let (beg end (origin (point)))
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (let ((region (buffer-substring-no-properties beg end)))
      (dotimes (i arg)
        (goto-char end)
        (newline)
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg)))))

(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)

(defun z/copy-line (arg)
    "Copy lines (as many as prefix argument) in the kill ring.
      Ease of use features:
      - Move to start of next line.
      - Appends the copy on sequential calls.
      - Use newline as last char even on the last line of the buffer.
      - If region is active, copy its lines."
    (interactive "p")
    (let ((beg (line-beginning-position))
          (end (line-end-position arg)))
      (when mark-active
        (if (> (point) (mark))
            (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
          (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
      (if (eq last-command 'copy-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-ring-save beg end)))
    (kill-append "\n" nil)
    (beginning-of-line (or (and arg (1+ arg)) 2))
    (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

(defun endless/ispell-word-then-abbrev (p)
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global."
  (interactive "P")
  (let (bef aft)
    (save-excursion
      (while (progn
               (backward-word)
               (and (setq bef (thing-at-point 'word))
                    (not (ispell-word nil 'quiet)))))
      (setq aft (thing-at-point 'word)))
    (when (and aft bef (not (equal aft bef)))
      (setq aft (downcase aft))
      (setq bef (downcase bef))
      (define-abbrev
        (if p local-abbrev-table global-abbrev-table)
        bef aft)
      (message "\"%s\" now expands to \"%s\" %sally"
               bef aft (if p "loc" "glob")))))

(defun z/regex-delete-numeric  ()
  "delete all numeric characters"
  (interactive)
  (goto-char (point-min))
  (replace-regexp "[0-9]" "")
)

(defun z/comment-box (b e)
  "Draw a box comment around the region but arrange for the region
to extend to at least the fill column. Place the point after the
comment box."
  (interactive "r")
  (let ((e (copy-marker e t)))
    (goto-char b)
    (end-of-line)
    (insert-char ?  (- fill-column (current-column)))
    (comment-box b e 1)
    (goto-char e)
    (set-marker e nil)))

(defun z/insert-keyleft ()
  " insert 【   "
  (interactive)
  (insert "【")
  )

(defun z/insert-keyright ()
  " insert 】   "
  (interactive)
  (insert "】")
  )


(defun z/insert-EOL ()
  " insert EOL"
  (interactive)
  (insert "\\\\")
(backward-char 2)  
)

(defun z/insert-bashscript ()
  " insert #!/bin/sh  "
  (interactive)
  (insert "#!/bin/sh")

(defun z/insert-play ()
  " insert   ‣  "
  (interactive)
  (insert "‣")
)


(defun z/insert-white-arrow ()
  " insert   ▻  "
  (interactive)
  (insert "▻")
)



(defun z/insert-reveal-split ()
  "insert REVEAL split  "
  (interactive)
  (insert "#+REVEAL: split")
)

)

(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))

(defun z/edit-copy-all-or-region ()
  "Put the whole buffer content to `kill-ring', or text selection if there's one.
Respects `narrow-to-region'.
URL `http://ergoemacs.org/emacs/emacs_copy_cut_all_or_region.html'
Version 2015-08-22"
  (interactive)
  (if (use-region-p)
      (progn
        (kill-new (buffer-substring (region-beginning) (region-end)))
        (message "Text selection copied."))
    (progn
      (kill-new (buffer-string))
      (message "Buffer content copied."))))

(defun xah-cycle-hyphen-underscore-space ()
  "Cycle {underscore, space, hypen} chars of current word or text selection.
When called repeatedly, this command cycles the {“_”, “-”, “ ”} characters, in that order.

URL `http://ergoemacs.org/emacs/elisp_change_space-hyphen_underscore.html'
Version 2015-08-17"
  (interactive)
  ;; this function sets a property 「'state」. Possible values are 0 to length of ξcharArray.
  (let (ξp1 ξp2)
    (if (use-region-p)
        (progn
          (setq ξp1 (region-beginning))
          (setq ξp2 (region-end)))
      (let ((ξbounds (bounds-of-thing-at-point 'symbol)))
        (progn
          (setq ξp1 (car ξbounds))
          (setq ξp2 (cdr ξbounds)))))

    (let* ((ξinputText (buffer-substring-no-properties ξp1 ξp2))
           (ξcharArray ["_" "-" " "])
           (ξlength (length ξcharArray))
           (ξregionWasActive-p (region-active-p))
           (ξnowState
            (if (equal last-command this-command )
                (get 'xah-cycle-hyphen-underscore-space 'state)
              0 ))
           (ξchangeTo (elt ξcharArray ξnowState)))
      (save-excursion
        (save-restriction
          (narrow-to-region ξp1 ξp2)
          (goto-char (point-min))
          (while
              (search-forward-regexp
               (concat
                (elt ξcharArray (% (+ ξnowState 1) ξlength))
                "\\|"
                (elt ξcharArray (% (+ ξnowState 2) ξlength)))
               (point-max)
               'NOERROR)
            (replace-match ξchangeTo 'FIXEDCASE 'LITERAL))))
      (when (or (string= ξchangeTo " ") ξregionWasActive-p)
        (goto-char ξp2)
        (set-mark ξp1)
        (setq deactivate-mark nil))
      (put 'xah-cycle-hyphen-underscore-space 'state (% (+ ξnowState 1) ξlength)))))

(defun xah-insert-bracket-pair (φleft-bracket φright-bracket)
  "Wrap or Insert a matching bracket and place cursor in between.

If there's a text selection, wrap brackets around it. Else, smartly decide wrap or insert. (basically, if there's no char after cursor, just insert bracket pair.)

φleft-bracket ＆ φright-bracket are strings.

URL `http://ergoemacs.org/emacs/elisp_insert_brackets_by_pair.html'
Version 2015-04-19"
  (if (use-region-p)
      (progn
        (let (
              (ξp1 (region-beginning))
              (ξp2 (region-end)))
          (goto-char ξp2)
          (insert φright-bracket)
          (goto-char ξp1)
          (insert φleft-bracket)
          (goto-char (+ ξp2 2))))
    (progn ; no text selection
      (if
          (or
           (looking-at "[^-_[:alnum:]]")
           (eq (point) (point-max)))
          (progn
            (insert φleft-bracket φright-bracket)
            (search-backward φright-bracket ))
        (progn
          (let (ξp1 ξp2)
            ;; basically, want all alphanumeric, plus hyphen and underscore, but don't want space or punctuations. Also want chinese.
            ;; 我有一帘幽梦，不知与谁能共。多少秘密在其中，欲诉无人能懂。
            (skip-chars-backward "-_[:alnum:]")
            (setq ξp1 (point))
            (skip-chars-forward "-_[:alnum:]")
            (setq ξp2 (point))
            (goto-char ξp2)
            (insert φright-bracket)
            (goto-char ξp1)
            (insert φleft-bracket)
            (goto-char (+ ξp2 (length φleft-bracket)))))))))

(defun z/insert-black-lenticular-bracket () (interactive) (xah-insert-bracket-pair "【" "】") )
(defun z/insert-black-lenticular-bracket-white () (interactive) (xah-insert-bracket-pair "〖" "〗") )
(defun z/insert-black-lenticular-angle   () (interactive) (xah-insert-bracket-pair "«" "»") )
(defun z/insert-black-lenticular-angle-bold   () (interactive) (xah-insert-bracket-pair "❰" "❱") )
(defun z/insert-black-arrows   () (interactive) (xah-insert-bracket-pair "◀" "▶") )
(defun z/insert-black-hands   () (interactive) (xah-insert-bracket-pair "☚" "☛") )

(defun z/open-line-above ()
  "Open a newline above the current point."
  (interactive)
  (save-excursion
    (beginning-of-line)
    (newline)
    (forward-line -1)))


(defun z/open-line-below ()
  "Open a newline below the current point."
  (interactive)
  (save-excursion
    (end-of-line)
    (newline)))

(global-set-key (kbd "C-S-o")     'z/open-line-above)
(global-set-key (kbd "C-o")       'z/open-line-below)

;; move point to previous error
;; based on code by hatschipuh at
;; http://emacs.stackexchange.com/a/14912/2017
(defun z/flyspell-goto-previous-error (arg)
  "Go to arg previous spelling error."
  (interactive "p")
  (while (not (= 0 arg))
    (let ((pos (point))
          (min (point-min)))
      (if (and (eq (current-buffer) flyspell-old-buffer-error)
               (eq pos flyspell-old-pos-error))
          (progn
            (if (= flyspell-old-pos-error min)
                ;; goto beginning of buffer
                (progn
                  (message "Restarting from end of buffer")
                  (goto-char (point-max)))
              (backward-word 1))
            (setq pos (point))))
      ;; seek the next error
      (while (and (> pos min)
                  (let ((ovs (overlays-at pos))
                        (r '()))
                    (while (and (not r) (consp ovs))
                      (if (flyspell-overlay-p (car ovs))
                          (setq r t)
                        (setq ovs (cdr ovs))))
                    (not r)))
        (backward-word 1)
        (setq pos (point)))
      ;; save the current location for next invocation
      (setq arg (1- arg))
      (setq flyspell-old-pos-error pos)
      (setq flyspell-old-buffer-error (current-buffer))
      (goto-char pos)
      (if (= pos min)
          (progn
            (message "No more miss-spelled word!")
            (setq arg 0))
        (forward-word)))))

(defun z/activate-word-column-region ()
  "Look at the symbol at point, search backward and place the point before a
symbol, and search forward and place the mark after a symbol such that all
lines have identical symbols at identical goal columns as the symbol at point."
  (interactive)
  (let (upper-pt lower-pt (next-line-add-newlines t))
    (save-excursion
      (let ((target (format "%s" (symbol-at-point))))
        (while (looking-back "\\(\\sw\\|\\s_\\)" 1)
          (backward-char 1))
        (with-no-warnings
            (save-excursion
              (next-line 1)
              (while (looking-at target)
                (setf lower-pt (point))
                (next-line 1)))
            (save-excursion
              (next-line -1)
              (while (looking-at target)
                (setf upper-pt (point))
                (next-line -1))))))
    (when (or upper-pt lower-pt)
      (let ((upper-pt (or upper-pt (point)))
            (lower-pt (or lower-pt (point))))    
        (goto-char lower-pt)
        (while (looking-at "\\(\\sw\\|\\s_\\)")
          (forward-char 1))
        (push-mark nil nil t)
        (goto-char upper-pt)
        (while (looking-back "\\(\\sw\\|\\s_\\)" 1)
          (backward-char 1)))))
  (rectangle-mark-mode))

(defun z/helm-insert-org-entity ()
  "Helm interface to insert an entity from `org-entities'.
F1 inserts utf-8 character
F2 inserts entity code
F3 inserts LaTeX code (does not wrap in math-mode)
F4 inserts HTML code"
  (interactive)
  (helm :sources (reverse
                  (let ((sources '())
                        toplevel
                        secondlevel)
                    (dolist (element (append
                                      '("* User" "** User entities")
                                      org-entities-user org-entities))
                      (when (and (stringp element)
                                 (s-starts-with? "* " element))
                        (setq toplevel element))
                      (when (and (stringp element)
                                 (s-starts-with? "** " element))
                        (setq secondlevel element)
                        (add-to-list
                         'sources
                         `((name . ,(concat
                                     toplevel
                                     (replace-regexp-in-string
                                      "\\*\\*" " - " secondlevel)))
                           (candidates . nil)
                           (action . (("insert utf-8 char" . (lambda (candidate)
                                                               (insert (nth 6 candidate))))
                                      ("insert org entity" . (lambda (candidate)
                                                           (insert (concat "\\" (car candidate)))))
                                      ("insert latex" . (lambda (candidate)
                                                          (insert (nth 1 candidate))))
                                      ("insert html" . (lambda (candidate)
                                                         (insert (nth 3 candidate)))))))))
                      (when (and element (listp element))
                        (setf (cdr (assoc 'candidates (car sources)))
                              (append
                               (cdr (assoc 'candidates (car sources)))
                               (list (cons
                                      (format "%10s %s" (nth 6 element) element)
                                      element))))))
                    sources))))

(defun z/org-convert-header-samelevel  ()
                     (interactive)                                
                     (let ((current-prefix-arg '(4)))             
                       (call-interactively #'org-toggle-heading)))

(defun z/org-tangle-atpoint  ()
                     (interactive)                                
                     (let ((current-prefix-arg '(4)))             
                       (call-interactively #'org-babel-tangle)))

(defun z/org-agenda-calendar ()
"open work agenda"
(interactive)                                
(org-agenda nil "a")
)

(defun z/org-agenda-work ()
"open work agenda"
(interactive)                                
(org-agenda nil "w")
)

(defun z/org-agenda-allan ()
"open work agenda"
(interactive)                                
(org-agenda nil "l")
)

(defun z/org-agenda-joel ()
"open work agenda"
(interactive)                                
(org-agenda nil "j")
)

(defun z/org-agenda-cook ()
"open work agenda"
(interactive)                                
(org-agenda nil "f")
)

(fset 'expdf
      [?\C-c ?\C-e ?\l ?\o ])

(defun z/org-sparse-todo ()
    "all todo sparse"
    (interactive)
    (org-match-sparse-tree t )
)

(defun z/org-agenda-search()
""
(interactive)                                
(org-agenda nil "s")
)

(defun z/org-agenda-search-todo ()
""
(interactive)                                
(org-agenda nil "S")
)

(defun z/org-link-file  ()
                     (interactive)                                
                     (let ((current-prefix-arg '(4)))             
                       (call-interactively #'org-insert-link)))

(defun insert-heading-link (dir)
  "select a headline from org-files in dir and insert a link to it."
  (interactive  (list (read-directory-name "Directory: ")))
  (let ((org-agenda-files (f-entries
                           dir
                           (lambda (f)
                             (string=
                              "org"
                              (file-name-extension f)))
                           t)))
    (helm-org-agenda-files-headings)))

(defun helm-org-insert-id-link-to-heading-at-marker (marker)
  (with-current-buffer (marker-buffer marker)
    (let ((file-name (buffer-file-name))
          (id (save-excursion (goto-char (marker-position marker))
                              (org-id-get-create)
                              (org-id-store-link))))

      (with-helm-current-buffer
        (org-insert-link
         file-name id)))))


(cl-defun helm-source-org-headings-for-files (filenames
                                              &optional (min-depth 1) (max-depth 8))
  (helm-build-sync-source "Org Headings"
    :candidates (helm-org-get-candidates filenames min-depth max-depth)
    :action '(("Go to line" . helm-org-goto-marker)
              ("Refile to this heading" . helm-org-heading-refile)
              ("Insert link to this heading"
               . helm-org-insert-link-to-heading-at-marker)
              ("Insert id link to this heading" .
               helm-org-insert-id-link-to-heading-at-marker))))

(defadvice org-babel-execute:sh (around sacha activate)
  (if (assoc-default :term (ad-get-arg 1) nil)
    (let ((buffer (make-term "babel" "/bin/zsh")))
      (with-current-buffer buffer
        (insert (org-babel-expand-body:generic
             body params (org-babel-variable-assignments:sh params)))
        (term-send-input))
(pop-to-buffer buffer))
    ad-do-it))

(defun org-timestamp-now ()
  "Inserts org timestamp at end of heading"
  (interactive)
  (save-excursion
    (org-back-to-heading)
    (org-end-of-line nil)
    (insert " ")
    (org-insert-time-stamp nil nil t nil nil nil)))

(defun org-timestamp-select ()
  "Inserts org timestamp at end of heading"
  (interactive)
  (save-excursion
    (org-back-to-heading)
    (org-end-of-line nil)
    (org-time-stamp-inactive nil)))

(defun org-table-import-ods (&optional file-name)
(interactive "fFile: ")
(let ((csv-file (org-odt-convert file-name "csv"))
(pos (point)))
(save-excursion
(insert (with-temp-buffer
(insert-file-contents csv-file)
(org-table-convert-region (point-min) (point-max) '(4))
(buffer-string))))))

(defun org-set-line-checkbox (arg)
  (interactive "P")
  (let ((n (or arg 1)))
    (when (region-active-p)
      (setq n (count-lines (region-beginning)
                           (region-end)))
      (goto-char (region-beginning)))
    (dotimes (i n)
      (beginning-of-line)
      (insert "- [ ] ")
      (forward-line))
    (beginning-of-line)))

(defun org-set-line-headline (arg)
  (interactive "P")
  (let ((n (or arg 1)))
    (when (region-active-p)
      (setq n (count-lines (region-beginning)
                           (region-end)))
      (goto-char (region-beginning)))
    (dotimes (i n)
      (beginning-of-line)
      (insert "** TODO ")
      (forward-line))
    (beginning-of-line)))

(defun org-mark-readonly ()
(interactive)
(org-map-entries
(lambda ()
(let* ((element (org-element-at-point))
(begin (org-element-property :begin element))
(end (org-element-property :end element)))
(add-text-properties begin (- end 1) '(read-only t
font-lock-face '(:background "#FFE3E3")))))
"read_only")
(message "Made readonly!"))
(defun org-remove-readonly ()
(interactive)
(org-map-entries
(lambda ()
(let* ((element (org-element-at-point))
(begin (org-element-property :begin element))
(end (org-element-property :end element))
(inhibit-read-only t))
(remove-text-properties begin (- end 1) '(read-only t font-lock-face '(:background "yellow")))))
"read_only"))
(add-hook 'org-mode-hook 'org-mark-readonly)

(defun z/org-cblock-comment ()    
(interactive)
(org-edit-special)
(mark-whole-buffer)
(comment-dwim nil)
(org-edit-src-exit))

(defun  z/org-cblock-paste-lisp ()
   "paste in already quote block"
  (interactive)
  (insert "#+BEGIN_SRC emacs-lisp  :results none\n")
  (yank)
  (insert "\n#+END_SRC"))

(defun  z/org-cblock-paste-sh ()
   "paste in already quote block"
  (interactive)
  (insert "#+BEGIN_SRC sh  :results none\n")
  (yank)
  (insert "\n#+END_SRC"))

(defun  z/org-cblock-paste-example ()
   "paste in already quote block"
  (interactive)
  (insert "#+BEGIN_EXAMPLE\n")
  (yank)
  (insert "\n#+END_EXAMPLE"))

(defun  z/org-cblock-paste-R ()
   "paste in already quote block"
  (interactive)
  (insert "#+BEGIN_SRC R :session Rorg  :results none\n")
  (yank)
  (insert "\n#+END_SRC"))

(defun  z/org-cblock-paste-SAS ()
   "paste in already quote block"
  (interactive)
  (insert "#+BEGIN_SRC SAS\n")
  (yank)
  (insert "\n#+END_SRC"))

(defun  z/org-cblock-paste-QUOTE ()
   "paste in already quote block"
  (interactive)
  (insert "#+BEGIN_QUOTE\n")
  (yank)
  (insert "\n#+END_QUOTE"))

(defun z/org-cblock-iwrap-emacs-lisp (&optional lang lines)
  "Wrap sexp-at-point or region in src-block.
Use Org-Babel LANGuage for the src-block if given, Emacs-Lisp
otherwise. A region instead of the sexp-at-point is wrapped if
either
   - optional argument LINES is an (positive or negative) integer
   - or the region is active
In the first case the region is determined by moving +/- LINES
forward/backward from point using `forward-line', in the second
case the active region is used.
When called with prefix argument 'C-u', prompt the user for the
Org-Babel language to use. When called with two prefix arguments
'C-u C-u', prompt the user for both the Org-Babel language to use
and the number of lines to be wrapped."
  (interactive
   (cond
    ((equal current-prefix-arg nil) nil)
    ((equal current-prefix-arg '(4))
     (list
      (ido-completing-read "Org-Babel language: "
                           (mapcar
                            (lambda (--lang)
                              (symbol-name (car --lang)))
                            org-babel-load-languages)
                           nil nil nil nil "emacs-lisp")))
    ((equal current-prefix-arg '(16))
     (list
      (ido-completing-read "Org-Babel language: "
                           (mapcar
                            (lambda (--lang)
                              (symbol-name (car --lang)))
                            org-babel-load-languages)
                           nil nil nil nil "emacs-lisp")
      (read-number "Number of lines to wrap: " 1)))))
  (let* ((language (or lang "emacs-lisp"))
         (beg (or (and (not lines)
                       (region-active-p)
                       (region-beginning))
                  (point)))
         (marker (save-excursion (goto-char beg) (point-marker)))
         (bol (save-excursion (goto-char beg) (bolp)))
         (end (cond
               (lines (save-excursion
                        (forward-line lines) (point)))
               ((region-active-p)(region-end))
               (t (save-excursion
                    (forward-sexp) (point)))))
         (cut-strg (buffer-substring beg end)))
    (delete-region beg end)
    (goto-char (marker-position marker))
    (insert
     (format
      "%s#+begin_src %s\n%s%s#+end_src\n"
      (if (or (and lines (< lines 0)) bol) "" "\n")
      language
      cut-strg
      (if lines "" "\n")))
    (set-marker marker nil)))

(defun z/org-cblock-iwrap-ASK ()
(interactive)
(let ((current-prefix-arg '(4)))
(call-interactively
'z/org-cblock-iwrap-emacs-lisp)))

(defun z/org-cblock-iwrap-ASK-LINE ()
(interactive)
(let ((current-prefix-arg '(4)))
(call-interactively
'z/org-cblock-iwrap-emacs-lisp)))

(defun z/org-cblock-iwrap-R ()
(interactive)
(z/org-cblock-iwrap-emacs-lisp  "R" ))

(defun z/org-cblock-iwrap-sh ()
(interactive)
(z/org-cblock-iwrap-emacs-lisp  "sh" ))

(defun  z/org-cblock-nowrap-example ()
   "paste in already quote block"
  (interactive)
  (insert "#+BEGIN_EXAMPLE\n")
  (insert "\n#+END_EXAMPLE"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; function to wrap blocks of text in org templates                       ;;
;; e.g. latex or src etc                                                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun z/org-cblock-iwrap-menu ()
  "Make a template at point."
  (interactive)
  (if (org-at-table-p)
      (call-interactively 'org-table-rotate-recalc-marks)
    (let* ((choices '(("s" . "SRC")
                      ("e" . "EXAMPLE")
                      ("q" . "QUOTE")
                      ("v" . "VERSE")
                      ("c" . "CENTER")
                      ("l" . "LaTeX")
                      ("h" . "HTML")
                      ("r" . "R")
                      ("a" . "ASCII")))
           (key
            (key-description
             (vector
              (read-key
               (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                       (mapconcat (lambda (choice)
                                    (concat (propertize (car choice) 'face 'font-lock-type-face)
                                            ": "
                                            (cdr choice)))
                                  choices
                                  ", ")))))))
      (let ((result (assoc key choices)))
        (when result
          (let ((choice (cdr result)))
            (cond
             ((region-active-p)
              (let ((start (region-beginning))
                    (end (region-end)))
                (goto-char end)
                (insert "#+END_" choice "\n")
                (goto-char start)
                (insert "#+BEGIN_" choice "\n")))
             (t
              (insert "#+BEGIN_" choice "\n")
              (save-excursion (insert "#+END_" choice))))))))))

(defun recipe-template ()
        (interactive)
        (goto-line 0)
        (search-forward "* Inbox")
         (org-meta-return)
         (org-metaright)
         (setq recipe-name (read-string "Title: "))
         (insert recipe-name)
         (org-todo "COOK") 
         (org-set-tags)
         (org-meta-return)
         (org-metaright)
         (insert "Ingridients")
         (org-meta-return)
         (insert "Preperation")
         (search-backward recipe-name)
         (setq src1 (read-string "Time: "))
         (org-set-property "Time" src1)
         (setq src2 (read-string "Rating: "))
         (org-set-property "Rating" src2)
         (setq src3 (read-string "Sources: "))
         (org-set-property "Source" src3)
         (setq src4 (read-string "Ammount: "))
         (org-set-property "Ammount" src4)
         (setq src5 (read-string "Fav: "))
         (org-set-property "Fav" src5)
         (search-forward "Ingridients")
         (evil-open-below 1)
         (beginning-of-visual-line)
)

(defun blank-recipe-template ()
        (interactive)
         (org-meta-return)
         (org-metaright)
         (setq recipe-name (read-string "Title: "))
         (insert recipe-name)
         (org-set-tags)
         (org-meta-return)
         (org-metaright)
         (insert "Ingridients")
         (org-meta-return)
         (insert "Preperation")
         (search-backward recipe-name)
         (setq src1 (read-string "Time: "))
         (org-set-property "Time" src1)
         (setq src2 (read-string "Rating: "))
         (org-set-property "Rating" src2)
         (setq src3 (read-string "Sources: "))
         (org-set-property "Source" src3)
         (setq src4 (read-string "Ammount: "))
         (org-set-property "Ammount" src4)
         (setq src5 (read-string "Fav: "))
         (org-set-property "Fav" src5)
         (search-forward "Ingridients")
         (evil-open-below 1)
         (beginning-of-visual-line)
)

(defun travel-template ()
        (interactive)
        (goto-line 0)
        (search-forward "* Inbox")
         (org-meta-return)
         (org-metaright)
         (setq travel-name (read-string "Title: "))
         (insert travel-name)
         (org-set-tags)
         (org-meta-return)
         (org-metaright)
         (insert "Details")
         (org-meta-return)
         (search-backward travel-name)
         (setq src1 (read-string "Rating: "))
         (org-set-property "Rating" src1)
         (setq src2 (read-string "Sources: "))
         (org-set-property "Source" src2)
         (setq src3 (read-string "Fav: "))
         (org-set-property "Fav" src3)
         (search-forward "Details")
         (evil-open-below 1)
)

; Speed commands are really useful, but I often want to make use of
; them when I'm not at the beginning of a header. Ths command brings
; you back to the beginning of an item's header, so that you can do
; speed commands.
 
(defun org-go-speed ()
"Goes to the beginning of an element's header, so that you can
execute speed commands."
(interactive)
(when (equal major-mode 'org-mode)
(if (org-at-heading-p)
(org-beginning-of-line)
(org-up-element))))

(defun z/org-email-heading ()
  "Send the current org-mode heading as the body of an email, with headline as the subject.
use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields.  Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.
Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
  (interactive)
  ; store location.
  (setq *email-heading-point* (set-marker (make-marker) (point)))
  (save-excursion
    (org-mark-subtree)
    (let ((content (buffer-substring (point) (mark)))
          (TO (org-entry-get (point) "TO" t))
          (SUBJECT (nth 4 (org-heading-components)))
          (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
          (continue nil)
          (switch-function nil)
          (yank-action nil)
          (send-actions '((email-send-action . nil)))
          (return-action '(email-heading-return)))
      
      (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
      (message-goto-body)
      (insert content)
      (when CC
        (message-goto-cc)
        (insert CC))
      (when BCC
        (message-goto-bcc)
        (insert BCC))
      (if TO
          (message-goto-body)
        (message-goto-to)))))

(defun z/org-email-heading-me ()
  "Send the current org-mode heading as the body of an email, with headline as the subject."
  (interactive)
  (save-excursion
    (org-mark-subtree)
    (let ((content (buffer-substring (point) (mark)))
          (SUBJECT (nth 4 (org-heading-components))))

      (compose-mail "ikloog@gmail.com" SUBJECT)
      (message-goto-body)
      (insert content)
      (message-send)
      (message-kill-buffer))))

(defun z/org-export-revel-browse ()
"export to org reveal"
(interactive)                                
(org-reveal-export-to-html-and-browse)
)

(defun z/org-export-revel-html ()
"export to org reveal"
(interactive)                                
(org-reveal-export-to-html)
)

(defun z/org-export-revel-subtree ()
"export to org reveal"
(interactive)                                
(org-reveal-export-current-subtree)
)

(defun z/org-move-top-collapse  ()
     (interactive)            
     (beginning-of-buffer)                    
     (hide-sublevels 1)
)

(defun z/org-export-html-bookmarks ()
  "Extract bookmarks from the current org file and create an html file that
can be imported into a web browser."
  (interactive)
  (unless (eq major-mode 'org-mode) 
    (error "Not in an org buffer"))
  (let ((file (file-name-nondirectory (buffer-file-name)))
        bookmarks)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward org-bracket-link-analytic-regexp nil t)
      (when (equal (match-string 2) "http")
        (let ((url (concat (match-string 1)
                           (match-string 3)))
              (desc (match-string 5)))
          (push (concat "<DT><A HREF=\"" url "\">" desc "</A>\n") bookmarks))))
    (with-temp-buffer 
      (insert
       "<!DOCTYPE NETSCAPE-Bookmark-file-1>\n"
       "<HTML>\n"
       "<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; 
charset=UTF-8\">\n"
       "<Title>Bookmarks</Title>\n"
       "<H1>Bookmarks</H1>\n"
       "<DT><H3 FOLDED>" file " (" (format-time-string "%Y-%m-%d") ")</H3>\n"
       "<DL><p>\n")
      (apply 'insert (nreverse bookmarks))
      (insert
       "</DL><p>\n"
       "</HTML>")
      (write-file (concat (file-name-sans-extension file) 
"-bookmarks.html"))))))

(defun z/insert-slsh ()
  " insert     "
  (interactive)
  (insert "\\")
)

(defun z-edit-file-as-root ()
  "Edit the file that is associated with the current buffer as root"
  (interactive)
  (if (buffer-file-name)
      (progn
        (setq file (concat "/sudo:root@localhost:" (buffer-file-name)))
        (find-file file))
    (message "Current buffer does not have an associated file.")))

(defun z-kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

(defun next-user-buffer ()
  "Switch to the next user buffer.
User buffers are those whose name does not start with *."
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (and (string-match "^*" (buffer-name)) (< i 50))
      (setq i (1+ i)) (next-buffer) )))

(defun previous-user-buffer ()
  "Switch to the previous user buffer.
User buffers are those whose name does not start with *."
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (and (string-match "^*" (buffer-name)) (< i 50))
      (setq i (1+ i)) (previous-buffer) )))

(defun next-emacs-buffer ()
  "Switch to the next emacs buffer.
Emacs buffers are those whose name starts with *."
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (and (not (string-match "^*" (buffer-name))) (< i 50))
      (setq i (1+ i)) (next-buffer) )))

(defun previous-emacs-buffer ()
  "Switch to the previous emacs buffer.
Emacs buffers are those whose name starts with *."
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (and (not (string-match "^*" (buffer-name))) (< i 50))
      (setq i (1+ i)) (previous-buffer) )))


(defun switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(defun z-save-buffer-close-window ()
  "DOCSTRING"
  (interactive)
    (save-buffer)
    (kill-this-buffer)
  )

(defun z/buffer-close-andmove-other   ()
     (interactive)    
     (save-buffer)        
      (delete-window)
)

(defun ood () (interactive) (dired "/home/zeltak/org"))

(defun create-scratch-buffer nil
   "create a scratch buffer"
   (interactive)
   (switch-to-buffer (get-buffer-create "*scratch*"))
   (lisp-interaction-mode))

(defun describe-last-function() 
  (interactive) 
  (describe-function last-command))

;; taken from here: http://www.enigmacurry.com/2008/12/26/emacs-ansi-term-tricks/
(defun z/launch--ansi-term ()
  "If the current buffer is:
     1) a running ansi-term named *ansi-term*, rename it.
     2) a stopped ansi-term, kill it and create a new one.
     3) a non ansi-term, go to an already running ansi-term
        or start a new one while killing a defunt one"
  (interactive)
  (let ((is-term (string= "term-mode" major-mode))
        (is-running (term-check-proc (buffer-name)))
        (term-cmd "/bin/zsh")
        (anon-term (get-buffer "*ansi-term*")))
    (if is-term
        (if is-running
            (if (string= "*ansi-term*" (buffer-name))
                ;; (call-interactively 'rename-buffer)
                (ansi-term term-cmd)
              (if anon-term
                  (switch-to-buffer "*ansi-term*")
                (ansi-term term-cmd)))
          (kill-buffer (buffer-name))
          (ansi-term term-cmd))
      (if anon-term
          (if (term-check-proc "*ansi-term*")
              (switch-to-buffer "*ansi-term*")
            (kill-buffer "*ansi-term*")
            (ansi-term term-cmd))
        (ansi-term term-cmd)))))

(defun z/narrow-or-widen-dwim ()
"If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
(interactive)
(cond ((buffer-narrowed-p) (widen))
((region-active-p) (narrow-to-region (region-beginning) (region-end)))
((equal major-mode 'org-mode) (org-narrow-to-subtree))
(t (error "Please select a region to narrow to"))))

(require 'thingatpt)

(defun google-search ()
  "Googles a query or region if any."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Google: ")))))

(defun helm-swish-e-candidates (query)
  "Generate a list of cons cells (swish-e result . path)."
  (let* ((result (shell-command-to-string
                  (format "swish-e -f ~/.swish-e/index.swish-e -x \"%%r\t%%p\n\" -w %s"
                          (shell-quote-argument query))))
         (lines (s-split "\n" result t))
         (candidates '()))
    (loop for line in lines
          unless (or  (s-starts-with? "#" line)
                      (s-starts-with? "." line))
          collect (cons line (cdr (s-split "\t" line))))))


(defun helm-swish-e (query)
  "Run a swish-e query and provide helm selection buffer of the results."
  (interactive "sQuery: ")
  (helm :sources `(((name . ,(format "swish-e: %s" query))
                    (candidates . ,(helm-swish-e-candidates query))
                    (action . (("open" . (lambda (f)
                                           (find-file (car f)))))))
                   ((name . "New search")
                    (dummy)
                    (action . (("search" . (lambda (f)
                                             (helm-swish-e helm-pattern)))))))))

(defun hotspots ()
  "helm interface to my hotspots, which includes my locations,
org-files and bookmarks"
  (interactive)
  (helm :sources `(((name . "Mail and News")
                    (candidates . (("Mail" . (lambda ()
                                               (if (get-buffer "*mu4e-headers*")
                                                   (progn
                                                     (switch-to-buffer "*mu4e-headers*")
                                                     (delete-other-windows))

                                                 (mu4e))))
                                   ("Calendar" . (lambda ()  (browse-url "https://www.google.com/calendar/render")))
                                   ("RSS" . elfeed)
                                   ("Agenda" . (lambda () (org-agenda "" "w")))))
                    (action . (("Open" . (lambda (x) (funcall x))))))
                   ((name . "My Locations")
                    (candidates . (("master" . "~/org/files/")
                                   (".emacs.d" . "~/.emacs.d/" )
                                   ("todo" . "~/org/files/agenda/todo.org")))
                    (action . (("Open" . (lambda (x) (find-file x))))))

                   ((name . "My org files")
                    (candidates . ,(f-entries "~/org/files/"))
                    (action . (("Open" . (lambda (x) (find-file x))))))
                   helm-source-recentf
                   helm-source-bookmarks
                   helm-source-bookmark-set)))

(defun z/helm-mg-prefix  ()
                     (interactive)                                
                     (let ((current-prefix-arg '(4)))             
                       (call-interactively #'helm-ag)))

(defun isearch-delete-something ()
  "Delete non-matching text or the last character."
  ;; Mostly copied from `isearch-del-char' and Drew's answer on the page above
  (interactive)
  (if (= 0 (length isearch-string))
      (ding)
    (setq isearch-string
          (substring isearch-string
                     0
                     (or (isearch-fail-pos) (1- (length isearch-string)))))
    (setq isearch-message
          (mapconcat #'isearch-text-char-description isearch-string "")))
  (if isearch-other-end (goto-char isearch-other-end))
  (isearch-search)
  (isearch-push-state)
  (isearch-update))

(define-key isearch-mode-map (kbd "<backspace>") 
  #'isearch-delete-something)

(defun endless/isearch-symbol-with-prefix (p)
  "Like isearch, unless prefix argument is provided.
With a prefix argument P, isearch for the symbol at point."
  (interactive "P")
  (let ((current-prefix-arg nil))
    (call-interactively
     (if p #'isearch-forward-symbol-at-point
       #'isearch-forward))))

(global-set-key [remap isearch-forward]
                #'endless/isearch-symbol-with-prefix)

(defun z/mu4e-inbox ()
"Display the inbox."
(interactive)
(mu4e)
(mu4e-headers-search "maildir:/INBOX"))

(defun z/mu4e-flagged ()
"Display the inbox."
(interactive)
(mu4e)
(mu4e-headers-search "maildir:/INBOX AND flag:flagged "))

;; taken from here: http://www.enigmacurry.com/2008/12/26/emacs-ansi-term-tricks/
(defun z/visit-ansi-term ()
  "If the current buffer is:
     1) a running ansi-term named *ansi-term*, rename it.
     2) a stopped ansi-term, kill it and create a new one.
     3) a non ansi-term, go to an already running ansi-term
        or start a new one while killing a defunt one"
  (interactive)
  (let ((is-term (string= "term-mode" major-mode))
        (is-running (term-check-proc (buffer-name)))
        (term-cmd "/bin/zsh")
        (anon-term (get-buffer "*ansi-term*")))
    (if is-term
        (if is-running
            (if (string= "*ansi-term*" (buffer-name))
                ;; (call-interactively 'rename-buffer)
                (ansi-term term-cmd)
              (if anon-term
                  (switch-to-buffer "*ansi-term*")
                (ansi-term term-cmd)))
          (kill-buffer (buffer-name))
          (ansi-term term-cmd))
      (if anon-term
          (if (term-check-proc "*ansi-term*")
              (switch-to-buffer "*ansi-term*")
            (kill-buffer "*ansi-term*")
            (ansi-term term-cmd))
        (ansi-term term-cmd)))))

(defun my-yas-get-first-name-from-to-field ()
  (let ((rlt "AGENT_NAME") str)
    (save-excursion
      (goto-char (point-min))
      ;; first line in email could be some hidden line containing NO to field
      (setq str (buffer-substring-no-properties (point-min) (point-max))))
    (if (string-match "^To: \"\\([^ ,]+\\)" str)
        (setq rlt (match-string 1 str)))
    (message "rlt=%s" rlt)
    rlt))

(global-unset-key (kbd "<f1>"))
(global-unset-key (kbd "<f2>"))
(global-unset-key (kbd "<f3>"))
(global-unset-key (kbd "<f4>"))
(global-unset-key (kbd "<f5>"))
(global-unset-key (kbd "<f6>"))
(global-unset-key (kbd "<f7>"))
(global-unset-key (kbd "<f8>"))
(global-unset-key (kbd "<f9>"))
(global-unset-key (kbd "<f10>"))
(global-unset-key (kbd "<f11>"))
(global-unset-key (kbd "<f12>"))
(global-unset-key (kbd "C-v"))
(global-unset-key (kbd "C-M-p"))
(global-unset-key (kbd "C-M-e"))
(global-unset-key (kbd "C-M-b"))
(global-unset-key (kbd "C-M-b"))
(global-unset-key (kbd "C-M-t"))
(global-unset-key (kbd "\\"))

(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)

(global-set-key "\C-t" #'transpose-lines)
(define-key ctl-x-map "\C-t" #'transpose-chars)

(key-chord-define-global "yy"     'z/copy-line)
(global-set-key (kbd "C-+") 'z/copy-line)
(key-chord-define-global "jj"     'avy-goto-word-or-subword-1)
(global-set-key (kbd "C-0") 'backward-kill-line)

;;(global-set-key (kbd "C-<tab>") 'dabbrev-expand)
;;(define-key minibuffer-local-map (kbd "C-<tab>") 'dabbrev-expand)

(global-unset-key (kbd "M-`"))
;(global-set-key (kbd "M-`") 'avy-goto-line)
(global-set-key (kbd "C-<up>") 'windmove-up)
(global-set-key (kbd "C-<down>") 'windmove-down)
(global-set-key (kbd "C-<right>") 'windmove-right)
(global-set-key (kbd "C-<left>") 'windmove-left)

;;(global-set-key (kbd "M-1") 'other-window)
(global-set-key (kbd "M-1") 'ace-window)

;Create an ID for the entry at point if it does not yet have one.
(global-set-key "\C-ca" 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key "\C-cs" 'org-babel-execute-subtree)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cb" 'org-iswitchb)

(with-eval-after-load "org" 
(define-key org-mode-map (kbd "<C-return>") 'org-insert-heading)
(define-key org-mode-map (kbd "<M-return>")  'org-insert-heading-respect-content)
)

(progn
  ;; set arrow keys in isearch. left/right is backward/forward, up/down is history. press Return to exit
  (define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat )
  (define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance )
  (define-key isearch-mode-map (kbd "<left>") 'isearch-repeat-backward) ; single key, useful
  (define-key isearch-mode-map (kbd "<right>") 'isearch-repeat-forward) ; single key, useful
 )

(key-chord-define-global "3e" 'hydra-editing/body)
(key-chord-define-global "9o" 'hydra-org-edit/body)

(global-set-key (kbd "C-c x") 'org-babel-execute-subtree)

(defface hydra-face-orange
    '((t (:foreground "orange" :bold t)))
  "Orange face. For fun.")

(defface hydra-face-brown
    '((t (:foreground "brown" :bold t)))
  "brown.")

(defface hydra-face-cyan
    '((t (:foreground "#42B7DE" :bold t :underline t)))
  "cyan")

(defface hydra-face-red
    '((t (:foreground "red" :bold t)))
  "red")

(defface hydra-face-green
    '((t (:foreground "green" :bold t)))
  "green")


(defface hydra-face-brown
    '((t (:foreground "#C15F0D" :bold t)))
  "brown")


(defface hydra-face-purple
    '((t (:foreground "#D52BFF" :bold t)))
  "purple")

(global-set-key
    (kbd "\\")
 (defhydra hydra-leader  (:color blue :hint nil :columns 5)
 "
LEADER:【C-A-W】-append to killring helm-projectile-recentf 【C-c p e】
 "

("\]" z/insert-slsh "insert \\")
("<backspace>" helm-all-mark-rings "all mark rings")
;;("\\"  avy-goto-char-timer  "avy jump")
("\\"  avy-goto-char-timer  "avy jump")
("|"   hydra-goto/body "goto" )
("RET" avy-goto-line "goto line" )
("8"   helm-mark-ring "HELM mark ")
("T"   helm-top "top")
(";"   comment-or-uncomment-region )
("5"   duplicate-current-line-or-region  "duplicate" :color red)
("6"   z/copy-comment-paste  "duplicate-comment")
("="  repeat "repeat last command" )
("/"  (dired "~/") "dired" )

("<up>" drag-stuff-up  "marked up" :color red)
("<down>" drag-stuff-down  "marked down" :color red)

("a"  z/org-agenda-calendar "org agenda" )
("c"  z/org-move-top-collapse "collapse headers" )
("i"  hydra-editing-insert/body "insert symbol" )
("k"  helm-show-kill-ring "kill ring")
("v"  helm-bm "helm-bm" )
("V"  bm-toggle "add bm")
("w"  (find-file "/home/zeltak/org/files/web/wbookmarks.org")  "bookmarks" )
("x"  z/buffer-close-andmove-other  "close window")

("b"  (find-file "/home/zeltak/org/files/agenda/bgu.org") "bgu"  :face 'hydra-face-cyan )
("d"  (find-file "/home/zeltak/org/files/agenda/dl.org")    "Downloads"  :face 'hydra-face-cyan)
("e"  (find-file "/home/zeltak/org/files/Tech/Emacs.org") "Emacs" :face 'hydra-face-cyan)
("f"  (find-file "/home/zeltak/org/files/agenda/food.org") "food" :face 'hydra-face-cyan)
("g"  nil )
("h"  (find-file "/home/zeltak/org/files/agenda/home.org") "home"  :face 'hydra-face-cyan)
("j"  nil )
("l"  (find-file "/home/zeltak/org/files/Tech/linux.org") "linux"  :face 'hydra-face-cyan)
("m"  (find-file "/home/zeltak/org/files/agenda/meetings.org") "meetings" :face 'hydra-face-cyan )
("n"  nil )
("o"  nil )
("p"  (find-file "/home/zeltak/org/files/Uni/papers/paper.meta.org") "papers" :face 'hydra-face-cyan )
("r"  (find-file "/home/zeltak/org/files/agenda/Research.org") "research" :face 'hydra-face-cyan )
("s"  (find-file "/home/zeltak/.emacs.d/settings.org") "research"  :face 'hydra-face-cyan )
("t"  (find-file "/home/zeltak/org/files/agenda/TODO.org") "TODO"   :face 'hydra-face-cyan )
("u"  (find-file "/home/zeltak/org/files/agenda/travel.org") "travel"  :face 'hydra-face-cyan )
("y"  nil )
("q"  nil  )

))

(global-set-key
   (kbd "<f1>")
(defhydra hydra-toggles (:color blue  :columns 6)
"Toggles:   【M-g M-g】 goto line 【C-x SPACE】 start mark rectangle 
easy-kill: 【M-w w】 select word // w, +- , 1..9 to increment (0 to reset)//【C-space】 turn selection to region// 【M-3】easy-mark
Term: 【C-c C-j】-activate Emacs mode 【C-c C-k】 back to normal term mode 
"
("a" pandoc-mode "pandoc"  )
("b" bug-hunter-file "bug hunter" :face 'hydra-face-orange )
("c" cua-mode "cua" :face 'hydra-face-red )
("d" tool-bar-mode "toggle toolbar"   )
("e" evil-mode "evil")
("f" fci-mode "fci" )
("g" google-search "google")
("h" hydra-toggles-help/body "help" )
("i"  nil )
("j"  helm-colors "color pallete" )
("k" key-chord-mode "key-chord"  )
("l" lentic-mode  "lentic")
("L" linum-mode  "linium")
("t" nlinum-mode  "line num")
("m" hydra-toggles-macro/body "macro menu")
("n" start-kbd-macro "start macro" :face 'hydra-face-green)
("o" end-kbd-macro "end macro" :face 'hydra-face-red)
("O" org-mode "org-mode" )
("p" list-packages "elpa"  )
("r" read-only-mode "read-only")
("R" helm-regexp "regex builder")
("s" scratch "scratch")
("S" create-scratch-buffer "New scratch" )
("u" electric-pair-mode "electric-pair")
("v" view-mode "view-mode")
("w" whitespace-mode "whitespace")
("x" eval-buffer "eval buffer")
("X" eval-region "eval-region")
("y" nil )
("z" nil )
("=" text-scale-increase :color red )
("-" text-scale-decrease :color red)
("G"  indent-guide-mode "guide-mode")
("q" nil "cancel")
))

(defhydra hydra-toggles-macro  (:color blue :hint nil )
     "macro commands
     "
     ("s" start-kbd-macro  "start macro" ) 
     ("e"   "end macro" ) 
     ("e" kmacro-end-and-call-macro  "use C-x e" ) 
     ("n" name-last-kbd-macro  "name macro" ) 
     ("i" insert-kbd-macro  "insert macro" ) 
     ("q" nil "cancel" nil)
)

(global-set-key
   (kbd "")
(defhydra hydra-toggles-help (:color blue :hint nil)

"
_k_ :describe key  _v_ describe variable _f_ describe functiom  
M-1- change windows
M-2 expand region (select gradualy regions)
~movment~ >> 【C-e//C-a】  (end/start of line)
~editing~ >>  【C-BKSP//A-BKSP】 (kill word start/end of line)



_q_: 
"

("a" nil )
("b"  nil  )
("c"  nil )
("d"  describe-last-function "describe last command used" )
("e"  nil )
("f"  describe-function )
("g"  nil )
("h"  nil )
("i"  nil )
("j"  nil )
("k"  describe-key )
("l"  nil )
("m"  nil )
("n"  nil )
("o"  nil )
("p"  nil )
("r"  nil )
("s"  nil )
("t"  nil )
("u"  nil )
("v"  describe-variable)
("w"  nil )
("x"  nil )
("y"  nil )
("z"  nil )
("q"  nil )

))

(global-set-key
   (kbd "<f2>")
(defhydra hydra-dired-main (:color blue :hint nil :columns 5)

"
【s】sort 【+】 add dir 【&/!】 open with 【M-n】 cycle diredx guesses 
【(】 toggle dired details 
【C/R/D/S】 copy/move(rename)/delete/symlink
【S-5-m】 mark by string // ^test(start with) txtDOLLAR (end with) 
【*s】 mark all 【*t】 invert mark 【*d】 mark for deletion 【k】 hide marked 【g】unhide mark 【*.】 mark by extension 【g】 refresh
【Q】query replace marked files 【o】open file new window 【V】open file read only 【i】open dir-view below
【b】preview file 【v】 viewer
"
("<f2>" dired "dired")
("<f1>" sunrise "sunrise")
("<f3>" dired-jump "dired jump")
("a" nil )
("b"  nil  )
("c"  hydra-dired-configs/body "dir configs")
("d"  nil )
("e"  nil )
("ff"  find-dired "find")
("fl"  find-lisp-find-dired "lisp find")
("fd"  find-lisp-find-dired-subdirectories "lisp find dirs" )
("g"  nil )
("h"  nil )
("i"  nil )
("j"  dired-jump "jump")
("k"  nil )
("l"  nil )
("m"  diredp-mark/unmark-extension "unmark extension")
("n"  dired-narrow-regexp "narrow")
("o"  hydra-dired-operation/body "dired operations")
("p"  peep-dired "peep-dired")
("r"  wdired-change-to-wdired-mode "wdired (bath rename)" )
("s"  z/dired-get-size "size" )
("t"  nil )
("u"  nil )
("v"  nil)
("w"  nil )
("x"  nil )
("y"  nil )
("z"   hydra-dired-filter/body  "filter" )
("q"  nil )

))

(global-set-key
  (kbd "<f3>")
  (defhydra hydra-spell  (:color blue :hint nil :columns 4)
  "
【C-SPACE】 recntangle select // 【C-;】 ispell cycle // 【C-x z】 repeat last command- keep press 【z】to repeat
 "
  ("<f3>" endless/ispell-word-then-abbrev "check and add" )
  ("<f2>" flyspell-auto-correct-previous-word "correct last word" )
  ("<f4>" z/flyspell-goto-previous-error "goto prev error" )
  ("c"  cycle-spacing "cycle spacing")
  ("e"  hydra-editing/body "editing menu" 'hydra-face-green)
  ("g"  rgrep "Rgrep")
  ("h"  highlight-symbol "HS symbol")
  ("H"  highlight-symbol-remove-all "HS remove")
  ("f"  helm-flyspell-correct "helm-flyspell")
  ("i"  ispell "ispell")
  ("j"  highlight-symbol-next  :color red  "HS Next")
  ("k"  highlight-symbol-prev  :color red  "HS Prev")
  ("m"  flyspell-check-next-highlighted-word "check next error")
  ("n"  flyspell-goto-next-error "check next error" )
  ("p"  forward-whitespace "next whitespace"  )
  ("r"  hydra-rectangle/body "rectangle menu (part of hydra)")
  ("t"  z/activate-word-column-region "mark current char" )
  ("u"  imenu "imenu")
  ("v"  z/helm-insert-org-entity "insert Unicode")
  ("w"  ispell-word "ispeel word" )
  ("x"  xah-cycle-hyphen-underscore-space "cycle-underscore" )
  ("y"  nil )
  ("q"  nil )

  ))

(global-set-key
    (kbd "<f4>")
    (defhydra hydra-org-blocks (:color blue :hint nil :columns 4)
    "
to wrap by symbol mark region and then issue symbol, like: 【*】
"
    ("<f4>" z/org-cblock-iwrap-emacs-lisp "WRAP-Elisp" )
    ("<f3>" z/org-cblock-iwrap-sh  "Bash" )
    ("r" z/org-cblock-iwrap-emacs-R "WRAP-R" )
    ("a" z/org-cblock-iwrap-ASK  "Ask" )
    ("l" z/org-cblock-iwrap-ASK-LINE "Ask line" )
    ("m" z/org-cblock-iwrap-menu "Ask line" )
    ("pl" z/org-cblock-paste-lisp "paste lisp" )
    ("pb" z/org-cblock-paste-sh "paste bash" )
    ("pr" z/org-cblock-paste-R "paste R" )
    ("ps" z/org-cblock-paste-SAS  "paste SAS" )
    ("pe" z/org-cblock-paste-example  "paste Example" )
    ("pq" z/org-cblock-paste-QUOTE "paste QUOTE" )
    ("e" z/org-cblock-nowrap-example "insert Example block" )
    ("q" nil "cancel")))

(global-set-key
   (kbd "<f5>")
(defhydra hydra-mu4e (:color blue  :columns 2 :hints nil)
  "
【M-Enter】 open link 【R】 Reply to sender 
【+】flag (star)
"
  ("<f5>"     z/mu4e-inbox            "mu4e inbox")
  ("7"     z/mu4e-flagged            "mu4e flagged")
;;  ("<f5>"     mu4e            "start mu4e")
  ("<f6>"     helm-mu            "helm mu4e")
  ("<f4>"    elfeed            "elfeed")
  ("ez" z/org-email-heading-me "email myslef the tree")
  ("ex" z/org-email-heading "email other the tree")
  ("d"    (execute-kbd-macro (symbol-function 'z/del_exe_mu4e))            "delete")
  ("f"    (execute-kbd-macro (symbol-function 'mu4e-flag-exe))         "flag")
  ("F"    (execute-kbd-macro (symbol-function 'mu4e-unflag-exe))          "unflag")
  ("o"     mu4e-headers-change-sorting            "sort")
    ("q"     nil                          "cancel" )
))

(global-set-key
   (kbd "<f6>")
(defhydra hydra-bib  (:color blue :hint nil :columns 4)

"
Bib:
"

("<f6>" helm-bibtex "helm-bibtex")
("a" nil )
("b" (find-file "/home/zeltak/org/files/Uni/papers/kloog.2015.bib") "ikloog-bitex file"   :face 'hydra-face-brown )
("m" (find-file "/home/zeltak/org/files/Uni/papers/paper.meta.org") "ikloog-bitex file"  :face 'hydra-face-brown )
("c"  org-ref-clean-bibtex-entry "clean bib" )
("d"  doi-utils-insert-bibtex-entry-from-doi "add by doi" )
("e"  ebib )
("f"  nil )
("g"  nil )
("h"  nil )
("i"  nil )
("j"  nil )
("k"  helm-bibtex-ikloog-publications "kloog papers"  :face 'hydra-face-green )
("K"  helm-bibtex-ikloog-publications-all "kloog ALL"  :face 'hydra-face-green )
("l"  nil )
("n"  org-bibtex-create "new bib entry")
("o"  nil )
("p"  helm-bibtex-ikloog-prep "kloog prep"  :face 'hydra-face-green )
("r"  helm-resume "helm resume")
("s"  bibtex-sort-buffer "sort buffer")
("t"  nil )
("u"  nil )
("v"  bibtex-validate "validtae" )
("V"  bibtex-validate-globally "validate-check for dups") ; check for dup keys
("w"  nil )
("x"  crossref-add-bibtex-entry "free search" )
("y"  org-bibtex-yank "yank bibtex")
("z"  nil )
("q"  nil )

))

(global-set-key
   (kbd "<f7>")
(defhydra hydra-f7 (:color blue  :columns 2 :hints nil)
  "
"
  ("<f7>"     company-complete            "complete")
  ("<f6>"     company-dabbrev            "dabbrev comp")
  ("y"   company-yasnippet  "yasnippet comp")
  ("m"   company-manual-begin  "manual comp")
  ("c"   company-complete-common  "commom comp")
  ("n"   company-select-next  "next comp")
    ("q"     nil                          "cancel" )
))

(global-set-key
   (kbd "<f8>")
(defhydra  hydra-open  (:color blue :hint nil :columns 4)
"
【C-c h】helm-prefix 【*】to select mode 【@】to select regex 【,】to select multiple (modes,regex) 【C-z】persistant select 【C-l】up dir 【C-r】back dir 
【~/】add to go back to home 【./】 default-directory  【C-c h】history (C-u before to auto go to history)
【C-s】grep Helm  【C-u】recursively grep Helm 【C-c h b】 helm res
【C-f/b】 helm frwd/back 1 char
"
("<f8>" helm-bookmarks "BKMK's")
("<f7>" helm-mini "helm-mini")
("<f9>" projectile-find-file  "projectile ff")
("7" org-iswitchb "org buffers")
("a" nil )
("b"  bmkp-bookmark-set-confirm-overwrite "add BKMK" )
("c"  helm-chrome-bookmarks "Chorme BKMK")
("d"  nil )
("e"  nil )
("f"  bmkp-bmenu-filter-tags-incrementally "BKMK menu filter")
("g"  nil )
("h"  nil )
("i"  nil )
("j"  helm-projectile-switch-to-buffer "Helm projectile switch" )
("k"  nil )
("l"  nil )
("m"  bookmark-bmenu-list "BKMK menu")
("n"  nil )
("o"  helm-projectile "Helm Projectile")
("p"  projectile-find-file "projectile find file")
("r"  helm-recentf "Helm Recents" )
("s"  bookmark-save "BKMK Save" )
("t"  z/launch--ansi-term "ansi-term" )
("u"  nil )
("v"  nil)
("w"  nil )
("x"  nil )
("y"  nil )
("z"  nil )
("q"  nil )

))

(global-set-key
   (kbd "<f9>")
(defhydra hydra-org (:color blue :hint nil :columns 4)

"ORG editing
【C-c -】 convert to dashed lines  【C-M-l  org table menu
"

("<f9>" worf-goto "worf org headers")
("<f10 w>" helm-org-headlines "helm org headers")
("<f10> v" org-velocity-read  "org valocity")
("<f8>" z/org-insert-heading-link "link/refile")
("RET"  org-insert-todo-heading "org todo header//check list")
("<f10> RET"  org-insert-subheading "org sub header")
("<f10> t"  org-insert-todo-subheading "org sub header")
("."  org-do-demote "<" :color red)
(","  org-do-promote ">" :color red)
("<"  org-promote-subtree "T<" :color red)
(">"  org-demote-subtree "T>" :color red)

("a"  org-sort "sort")
("b"  worf-mode "worf"  )
("c"  org-columns "Columns" )
("C"  org-columns-quit "quit Columns" )
("d"  org-download-screenshot "screenshot")
("D"  org-download-delete "del screenshot")
("E"  org-export-dispatch "export")
("ep" org-latex-export-to-pdf "export latex")
("er" z/org-export-revel-browse "export reveal browse")
("et" z/org-export-revel-subtree "export reveal subtree")
("ey" z/org-export-revel-html  "export reveal html ")
("f"  hydra-org-food/body "food menu"  :face 'hydra-face-orange )
("g"  org-set-tags "tags dialog")
("h"  org-search-view "org search")
("i"  org-toggle-inline-images "toggle images")
("j"  nil )
("k"  nil )
("l"  hydra-org-links/body "link menu" :face 'hydra-face-green)
("m"  org-mark-subtree "mark subtree" )
("p"  org-insert-drawer "insert drawer" )
("r"  org-refile "refile")
("R"  z/prefix-org-refile "jump to header using refile")
("s"  hydra-org-time/body "time menu" :face 'hydra-face-orange )
("t"  org-todo "todo dialog")
("u"  nil )
("v"  org-babel-execute-subtree "exe block")
("w"  z/narrow-or-widen-dwim "Toggle narrow//widen" )
("x"  org-archive-subtree "Archive" )
("-"  org-toggle-heading "Header lower" )
("="  z/org-convert-header-samelevel "Header same")
("0"  org-ctrl-c-star "convert lines to headers")
("\\"  hydra-org-table/body "table menu"  :face 'hydra-face-orange )
(";"  z/comment-org-in-src-block "comment block" )
("y"  nil )
("z"  nil )
("<home>" outline-up-heading  "up main header" :color red)
("<down>" org-forward-heading-same-level  "up header" :color red)
("<up>" org-backward-heading-same-level  "down header" :color red)
("q"  nil )

))

(defhydra hydra-org-links (:color blue  :hint nil :columns 3)
      "
link menus 
      "
     ("u" org-link-edit-forward-slurp  "forward slurp")
     ("y" org-link-edit-backward-slurp  "back  slurp")
     ("j" org-link-edit-forward-barf  "forward edit")
     ("k" org-link-edit-backward-barf  "backward edit")
     ("i" org-insert-link   "insert (or edit if on link)//also 【C-c C-l】" ) 
     ("d" org-id-create "just create Id")
     ("p" org-cliplink "org-cliplick")
     ("o"  link-hint-open-link "open link" )
     ("c" org-id-copy  "copy(and create) to killring" ) 
     ("s" org-id-store-link  "store org-id" ) 
     ("f" z/org-link-file  "link to file (via helm)" ) 
     ("w" worf-copy-heading-id  "worf copy id of killring" ) 
     ("q" nil "cancel" nil)
 )

(defhydra hydra-org-food ()
   "org-food "
   ("b" cooking-sparse-tree-breakfeast "breakfeast_view" :color blue)
   ("m" cooking-sparse-tree-main "main_view" :color blue)
   ("r" recipe-template "recipe-template" :color blue)
   ("t" travel-template  "travel-template" :color blue)
   ("q" nil "cancel")
)

(global-set-key
   (kbd "C-M-v")
(defhydra hydra-org-tangle  (:color blue :hint nil)

"
_a_:         _b_:         _c_:        _d_:        _e_:           _f_:         _g_:  
_h_:         _i_:         _j_:       _k_:       _l_:          _m_:        _n_:      
_o_:        _p_: tang-atpoint        _r_:       _s_:       _t_: tangle file           _u_:       
_v_:        _w_:        _x_:       _y_:       _z_: 
_q_: quit 

"

("a" nil )
("b"  nil  )
("c"  nil )
("d"  nil )
("e"  nil )
("f"  nil )
("g"  nil )
("h"  nil )
("i"  nil )
("j"  nil )
("k"  nil )
("l"  nil )
("m"  nil )
("n"  nil )
("o"  nil )
("p"  z/org-tangle-atpoint )
("r"  nil )
("s"  nil )
("t"  org-babel-tangle )
("u"  nil )
("v"  nil)
("w"  nil )
("x"  nil )
("y"  nil )
("z"  nil )
("q"  nil )

))

(defhydra hydra-org-time  (:color blue :hint nil :columns 4)
"
☚+1w☛ implies that this event will repeat every week at the same time & date  ☚--☛ multi day
【.】 Go to today 【r】rebuild agenda 
"
    ("s"  org-time-stamp "agenda date")
    ("X" org-time-stamp-inactive  "stamp date" )
    ("Y" z-insert-date "insert current data")  
    ("d" org-deadline  "set deadline")  
    ("f" org-schedule  "set schedule")  
    ("q" nil "cancel")
 )

(global-set-key
 (kbd "C-M-o")
 (defhydra hydra-org-edit (:color blue :hint nil :columns 4)
   "orgmode editing "
   ("t" org-insert-todo-heading-respect-content "insert TODO" )
   ("d" org-cut-subtree  "org cut" )
   ("y" org-copy-subtree "org copy" )
   ("p" org-paste-subtree  "org paste" )
   ("e" z/org-email-heading  "email header" )
   ("z" z/org-email-heading-me  "email header ikloog" )
   ("r" org-copy  "copy via refile" )
   ("h" org-set-line-headline "line to headline" )
   ("c" org-set-line-checkbox  "line to checkbox" )
   (";" z/org-cblock-comment  "line to checkbox" )
   ("s" hydra-org-time/body "time stamps" )
   ("w" worf-mode "Worf mode" )
   ("<up>" org-move-subtree-up "header up" :color red )
   ("<down>" org-move-subtree-down "header down" :color red)
   ("q" nil "cancel")))

(global-set-key
     (kbd "<f10>")
  (defhydra hydra-org-agenda (:color blue :hint nil :columns 4)
"AGENDA:
【g】- Refresh agenda 
【SPACE//TAB】open//open-go item in side view 【F】will toggle follow mode for space/tab view
【A】Append another view 【/】 filter tag 【=】 filter regex 【|】 clean all filters
【v】Choose view 【f】forward in time 【b】back in time 【.】goto today 【j】 jump to date
【S-left//right】 change deadline 【k】 launch capture with date/task
【:】 set tags 【,】set priority (then choose) 【S-U/D/L/R】 change todo/pri 
【m,u,U...】 dired marking 【M-m】toggle marking 【B】 execute on marks via dispatcher 【v】 view mode                             
"
      ("<f10>" z/org-agenda-calendar  "org agenda"  )
      ("c"  org-agenda-columns  "agenda columns" )
      ("t"    org-agenda-todo      "change todo")
      ("k"    org-agenda-kill      "delete C-k")
      ("m"    org-agenda-bulk-toggle  "bulk mark"  :color red ) 
      ("x"    org-agenda-bulk-action  "bulk exe")
      ("x"   org-agenda-archive      "archive ")
      ("w"   org-agenda-refile      "refile ")
      (":"   org-agenda-set-tags      "set tags ")
      (","   org-agenda-priority      "priority (S-UP/S-Dn to change as well ")
      ("s"   org-agenda-schedule      "schedule task ")
      ("d"   org-agenda-deadline      "deadline task ")
      ("p"   org-agenda-date-prompt      "prompt date ")
      ("M"   cfw:org-open-agenda-day      "month view ")
       ("q"     nil                          "cancel" )
  ))

(global-set-key
   (kbd "<f11>")
   (defhydra hydra-buffer  (:color blue :hint nil :columns 4)
     "TODO commands "
     ("<f11>" org-agenda "org-agnda" )
     ("l" z/org-agenda-allan "Allan" )
     ("j" z/org-agenda-joel  "Joel"  )
     ("s"   z/org-agenda-search     "regex search")
     ("t"   z/org-agenda-search-todo     "regex search TODO")
      ("c"   z/org-agenda-cook      "cook")
     ("fa" (org-tags-view nil "Cuisine=\"American\"") "food-american" )
     ("fa" (org-tags-view nil "Cuisine=\"American\"") "food-american" )
     ("d" "")
     ("i" "" )
     ("c" ""  )
     ("k"  "" )
     ("n" "" )
     ("p" (org-agenda nil "w") "work+home"  )
     ("w" z/org-agenda-work  "Work"  )
     ("q" nil "cancel")))

; (require 'hydra-examples)
; (hydra-create "C-M-o" hydra-example-move-window-splitter)

; (hydra-create "C-M-o"
;   '(("h" hydra-move-splitter-left)
;     ("j" hydra-move-splitter-down)
;     ("k" hydra-move-splitter-up)
;     ("l" hydra-move-splitter-right)))

(defhydra hydra-rectangle (:color blue  :columns 6 :hint nil)
   "rectangle commands "
   ("1" rectangle-number-lines "rectangle lines" :color blue)
   ("q" nil "cancel"))

(global-set-key
 (kbd "C-M-y")
 (defhydra hydra-yas ()
   "yas command "
   ("a" yas-activate-extra-mode "enable Emacs mode for yas" :color blue)
   ("n" yas-new-snippet "add new snippet" :color blue)
   ("v" yas-visit-snippet-file "visit" :color blue)
   ("i" yas-insert-snippet "insert_point" :color blue)
   ("r" yas-reload-all  "reload" :color blue)
   ("t" yas-tryout-snippet  "try snipet" :color blue)
   ("q" nil "cancel")))

(global-set-key
 (kbd "C-M-l")

(defhydra hydra-org-table (:color blue  :columns 6)
"【C-c +】 will sum a column and move to clip  【C-space】 blank field 【M-left/right】move column left/right  【M-S-left/right】kill/add column 
【M-up/down】 move row up/down 【M-S-down】 insert row  【M-S-up】 kill row
【|-】 will start a dashed line 【C-c +】 org sum 【C-c ?/}】 find/show out field info 
【@row$column】>>  @2$3 will mean 2nd row, 3rd column 
 $1..$3f  firtst three fields in the current row // @2$1..@4$3  6 fields between these two fields
FORUMLAS: 【C-c =】 insert formula 【C-c *】 recalculate formula  vmean/vsum 
【:=】insert formula directly >> :=vsum(@2$3..@32$3)
"
     ("i" org-table-insert-row  "insert row" :color blue) 
     ("y" org-table-copy-region  "copy" :color blue) 
     ("d" org-table-cut-region  "cut" :color blue) 
     ("p" org-table-paste-rectangle  "paste" :color blue) 
     ("s" org-table-sort-lines  "sort" :color blue) 
     ("c" org-table-create-or-convert-from-region  "convert" ) 
     ("w" quick-calc  "quick calc" ) 
   ("q" nil "cancel")))

(global-set-key                         
 (kbd "C-M-e")
 (defhydra hydra-editing (:color blue :hint nil :columns 4)
   "editing command"
   ("e" hydra-edit-extra/body  "Extra editing commands")
   ("<up>" drag-stuff-up  "marked up" :color red)
   ("<down>" drag-stuff-down  "marked down" :color red)
   ;("<left>" drag-stuff-left  "marked left" :color red)
   ;("<right>" drag-stuff-right "marked right" :color red)
   ("p" duplicate-current-line-or-region  "duplicate" :color red)
   (";"  hydra-commenting/body  "comment!" )
   ("i"  hydra-editing-insert/body  "insert" )   
   ("f" flush-blank-line  "flush blank" )
   ("u" z-fix-characters "fix unicode" )
   ("g" google-search "google searh selected" )
   ("c" z/comment-box "comment box" )
   ("u" upcase-region  "upcase " )
   ("d" downcase-region  "downcase " )
   ("h" z/edit-copy-all-or-region  "copy buffer" )
   ("w" shrink-whitespace  "shrink-whitespace" )
   ("R" revert-buffer  "revert buffer before changes" ) 
   ("q" nil "cancel")))

(defhydra hydra-edit-extra (:color blue :hint nil )
     "
fix _u_nicode issue  // u_p_case region // _d_owncase region 
     "
     ("u" z-fix-characters  "fix unicode" ) 
     ("p" upcase-region  "upcase region" ) 
     ("d" downcase-region  "downcase region" ) 
     ("f" toggle-fill-unfill  "fill/unfill")
     ("r" z-edit-file-as-root  "edit as root")
     ("q" nil "cancel" nil)
     ("1" z/regex-delete-numeric "delete numbers")
)

(defhydra hydra-commenting (:color blue  )
     "
comment  _;_ // comment _t_o line // comment para_g_raph // co_p_y-paste-comment 
comment _e_macs function  // copy-paste-comment-function _r_  

     "
     (";" evilnc-comment-or-uncomment-lines  "comment" ) 
     ("t" evilnc-quick-comment-or-uncomment-to-the-line   "c 2 line"  nil ) 
     ("g" evilnc-comment-or-uncomment-paragraphs  "c paragraph"  nil ) 
     ("p" evilnc-copy-and-comment-lines  "c,c,p"  nil ) 
     ("e" z/comment-line  "comment-line-emacsfun" :color blue)
     ("r" z/copy-comment-paste  "c,c,p-fun " :color blue)
     ("q" nil "cancel" nil)
)

(defhydra hydra-editing-insert  (:color blue  :columns 4 :hints nil)
  "unicode"
  ("k"     z/insert-black-lenticular-bracket  "【】") 
  ("g"     z/insert-black-lenticular-bracket-white  "〖") 
  ("c"     z/insert-black-lenticular-angle  "»") 
  ("d"     z/insert-black-lenticular-angle-bold  "❱") 
  ("e"     z/insert-black-arrows  "◀ ▶") 
  ("f"     z/insert-black-hands  "☚ ☛") 
  ("j"     z/insert-black-lenticular-angle  "«»") 
  ("b"     z/insert-bashscript  "insert basg #!") 
  ("p"     z/insert-play  " ‣") 
  ("w"     z/insert-white-arrow  "▻") 
  ("o"     z/insert-EOL  " \\") 
  ("r"    z/insert-reveal-split  "reveal-split") 
  ("q" nil "cancel" nil)
)

(global-set-key                         
 (kbd "C-M-p")
 (defhydra hydra-password-store (:color blue :columns 4 :hint nil)
   "password store command"
   ("e" password-store-edit   "edit pass" )
   ("d" password-store-remove   "delete pass" )
   ("q" nil "cancel")))

(global-set-key
 (kbd "C-M-;")
 (defhydra hydra-avi ()
   "yas command "
   ("g" avi-goto-char-2 "avi-goto-char-2" :color blue)
   ("c" avi-goto-char "avi-goto-char" :color blue)
   ("l" avi-goto-line "avi-goto-line" :color blue)
   ("4" avi-copy-line  "avi-copy-line" :color blue)
   ("3" avi-move-line  "avi-move-line" :color blue)
   ("r" avi-copy-region  "avi-copy-region" :color blue)
   ("a" avi-goto-word-1  "avi-goto-word-1" :color blue)
   ("v" avi-goto-word-0  "avi-goto-word-0" :color blue)
   ("z" ace-jump-zap  "zap text" :color blue)
   ("q" nil "cancel")))

(global-set-key
 (kbd "<f12>")
 (defhydra hydra-window (:color blue :hint nil :columns 5)
 "Window and buffer Operations"
   ("<f12>" switch-to-previous-buffer  "last buffer"  )
   ("<f11>" ace-delete-window "delete window")
   ("<home>" ace-window "ace-window//also M-1" :exit t)   
   ("=" (lambda ()
          (interactive)
          (split-window-right)
          (windmove-right))
        "Split Vertical (|)")
   ("-" (lambda ()
          (interactive)
          (split-window-below)
          (windmove-down))
        "Split horzizontal (-)")
   ("<left>" hydra-move-splitter-left "resize left"  :color red)
   ("<right>" hydra-move-splitter-right "resize right"  :color red)
   ("<up>" hydra-move-splitter-up "resize up"  :color red)
   ("<down>" hydra-move-splitter-down "resize down"  :color red)
   ("t" ace-swap-window  "transpose (ace-swap)")
   ("i" ace-maximize-window "ace-one" )
   ("r" resize-window "resize menu" )
   ;;Note winer mode must be enabled
   ("u" winner-undo "winner undo")
   ("s" save-buffer "save buffer"  )
   ("a" write-file  "save as.."  )
   ("x" kill-this-buffer "kill buffer"  )
   ("c" z-save-buffer-close-window "save and close"  )
   ("n" next-user-buffer  "next buffer" )
   ("p" previous-user-buffer "prev buffer"  )
   ("N" next-emacs-buffer "next Emacs  buffer"  )
   ("P" previous-emacs-buffer "prev emacs buffer"  )
   ("da" ace-delete-window)
   ("db" kill-this-buffer)
   ("df" delete-frame "delete frame")
   ("kw" delete-window "delete window")
   ("ka" delete-other-windows "delete all other  windows")
   ("kh" kill-buffer "helm kill buffer" )
   ("kb" z-kill-other-buffers "kill all but current" )
   ("q" nil "cancel")))

(defhydra hydra-goto  (:color blue :hint nil :columns 5)
  "goto"
  ("g" goto-line "line")
  ("c" goto-char "char")
  ("o" ace-link-org "goto org link")
  ("2" er/expand-region "expand")
  ("z"  avy-zap-to-cha "avy zap")
  ("q" nil "quit"))

(defhydra hydra-vi (:body-pre hydra-vi/pre
                    :color    amaranth)
  "vi"
  ;; basic navigation
  ("l"        forward-char                  nil)
  ("h"        backward-char                 nil)
  ("j"        next-line                     nil)
  ("k"        previous-line                 nil)
  ;; mark
  ("m"        set-mark-command              "mark")
  ("C-o"      (set-mark-command 4)          "jump to prev location")
  ;; beginning/end of line
  ("a"        back-to-indentation-or-beginning-of-line "beg of line/indentation")
  ("^"        back-to-indentation-or-beginning-of-line "beg of line/indentation")
  ("$"        move-end-of-line              "end of line")
  ;; word navigation
  ("e"        forward-word                  "end of word")
  ("w"        modi/forward-word-begin       "beg of next word")
  ("b"        backward-word                 "beg of word")
  ;; page scrolling
  ("<prior>"  scroll-down-command           "page up")
  ("<next>"   scroll-up-command             "page down")
  ;; delete/cut/copy/paste
  ("x"        delete-forward-char           "del char")
  ("d"        my/iregister-cut              "cut/del")
  ("D"                 "cut/del line")
  ("y"        my/iregister-copy             "copy")
  ("p"        yank                          "paste")
  ;; beginning/end of buffer and go to line
  ("g"        hydra-vi/beginning-of-buffer  "beg of buffer/goto line")
  ("G"        hydra-vi/end-of-buffer        "end of buffer/goto line")
  ("<return>" goto-line                     "goto line")
  ;; undo/redo
  ("u"        undo-tree-undo                "undo")
  ("C-r"      undo-tree-redo                "redo")
  ;; misc
  ("<SPC>"    ace-jump-mode                 "ace jump")
  ;; exit points
  ("q"        hydra-vi/post                 "cancel" :color blue))

(global-set-key
 (kbd "C-S-s")
 (defhydra hydra-search  (:color blue :hint nil :columns 4) 
   " "
  ("1" helm-swoop "find word@point in document")
  ("2" helm-multi-swoop  "find word@point in selected documents")
  ("3" helm-multi-swoop-org "find word@point in org agenda")
  ("a" helm-ag "Helm-ag")
  ("d" z/helm-mg-prefix "helm-ag-recursive" )
  ("D" helm-do-ag-project-root "helm-ag in porject" )
  ("g" helm-do-grep "helm-grep" )
  ("f"  helm-find-files "Helm FF" )
  ("l" helm-locate "helm-locate")
  ("L" counsel-locate "council-locate")
  ("o" helm-occur "helm Occur")
  ("O"  org-occur "org-occur" )
  ("P" helm-apropos "Helm-Apropos")
  ("n"  helm-swish-e "swish")
  ("r" rgrep "rgrep")
  ("R" anzu-query-replace-at-cursor "Replace@cursor")
  ("s" isearch-forward "isearch" )
  ("S" isearch-forward-symbol-at-point "isearch@point" )
  ("z" counsel-recoll "recoll" )
  ("9" goto-last-change "goto last change" )
  ("0" goto-last-change-revrese "goto prev change" )  


   ("q" nil "cancel")))

;;;; Saved macros
;; Saved macro - adds latex end-lines to verse passages
(fset 'versify
      [?\C-a ?\C-e ?\\ ?\\ down])

;(global-set-key (kbd "") 'versify)

(defmacro C-u (&rest args)
  (let ((prefix (list 4)))
    (while (cdr args)
      (cond
       ((eq (car args) 'C-u)
        (setf (car prefix) (* 4 (car prefix))))
       ((eq (car args) 'M-x)
        ;; ignore
        t)
       (t
        (error "Unknown arg %S" (car args))))
      (setq args (cdr args)))
    (unless (functionp (car args))
      (error "%S is not a function" (car args)))
    `(lambda ()
       (interactive)
       (let ((current-prefix-arg ',prefix))
         (call-interactively ',(car args))))))

(setq browse-url-browser-function (quote browse-url-generic))
(setq browse-url-generic-program "firefox")
;;(setq browse-url-generic-program "chromium")

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;If I reopen a file, I want to start at the line at which I was when I closed it.
; save the place in files
(require 'saveplace)
(setq-default save-place t)

; save minibuffer history
(require 'savehist)

(setq savehist-additional-variables '(search-ring
                                      regexp-search-ring
                                      file-name-history
                                      extended-command-history
                                      kill-ring
                                      sr-history-registry
                                        ))

;;autosave
;(setq auto-save-visited-file-name t)
;(setq auto-save-interval 20) ; twenty keystrokes
(setq auto-save-timeout 60) ; ten idle seconds

(savehist-mode t)

(setq savehist-file "/home/zeltak/.emacs.t/hist.txt")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

(setq recentf-save-file "/home/zeltak/.emacs.t/recentf")  ;; (setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 50)
;(setq recentf-auto-cleanup 'never) ;; disable before we start recentf!

(require 'tramp) ; Remote file editing via ssh
(setq tramp-default-method "ssh")

(setq explicit-shell-file-name "/bin/zsh")

(setq cache-long-scans nil)

(setq read-file-name-completion-ignore-case t)
(setq read-buffer-completion-ignore-case t)
(mapc (lambda (x)
        (add-to-list 'completion-ignored-extensions x))
      '(".aux" ".bbl" ".blg" ".exe"
        ".log" ".meta" ".out" ".synctex.gz" ".tdo" ".toc"
        "-pkg.el" "-autoloads.el"
        "Notes.bib" "auto/"))

(setq temporary-file-directory "/tmp")

(setq password-cache-expiry nil)

(add-to-list 'tramp-default-proxies-alist 
     '((and (string-match system-name 
                  (tramp-file-name-host (car target-alist)))
            "THISSHOULDNEVERMATCH")
       "\\`root\\'" "/ssh:%h:"))

;Spelling
(autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
(autoload 'flyspell-delay-command "flyspell" "Delay on command." t)
(autoload 'tex-mode-flyspell-verify "flyspell" "" t) 


(defun flyspell-check-next-highlighted-word ()
  "custom function to spell check next highlighted word"
  (interactive)
  (flyspell-goto-next-error)
  (ispell-word)
  )

;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

(fset 'orgstyle-tnote
   [?! home ?!])
(define-key org-mode-map (kbd "C-1") 'orgstyle-tnote)


(fset 'orgstyle-warning
   "@\341@WARNING:")
(define-key org-mode-map (kbd "C-2") 'orgstyle-warning)

(fset 'orgstyle-warning2
   [?@ home ?@])
(define-key org-mode-map (kbd "C-S-2") 'orgstyle-warning2)



(fset 'orgstyle-com1
   [?~ home ?~])
(define-key org-mode-map (kbd "C-3") 'orgstyle-com1)

(fset 'orgstyle-note
   "$\341$NOTE:")
(define-key org-mode-map (kbd "C-4") 'orgstyle-note)

(fset 'orgstyle-note2
   [?$ home ?$])
(define-key org-mode-map (kbd "C-S-4") 'orgstyle-note2)

(fset 'orgstyle-tip
   "%\341%TIP:")
(define-key org-mode-map (kbd "C-5") 'orgstyle-tip)


(fset 'orgstyle-tip2
   [?% home ?%])
(define-key org-mode-map (kbd "C-S-5") 'orgstyle-tip2)


(fset 'orgstyle-code
   [?^ home ?^])
(define-key org-mode-map (kbd "C-6") 'orgstyle-code)

(fset 'orgstyle-header
   [?& home ?&])
(define-key org-mode-map (kbd "C-7") 'orgstyle-header)

(fset 'orgstyle-bold
   [?* home ?*])
(define-key org-mode-map (kbd "C-7") 'orgstyle-bold)

(fset 'orgstyle-highlight-green
   [?' home ?'])
(define-key org-mode-map (kbd "C-9") 'orgstyle-highlight-green)

(fset 'orgstyle-com2
   [?` home ?`])
(define-key org-mode-map (kbd "C-0") 'orgstyle-com2)

(fset 'underline_net_delete
   [?\M-% ?\  return return ?!])

(setq org-directory "~/org/files/")
(setq org-default-notes-file "~/org/files/refile.org")

;associate these files with org

(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))

;make new headings appear after the content for the current one
(setq org-insert-heading-respect-content t)

;allow RETURN to open links
(setq org-return-follows-link nil)
;going to the beginning and end of the heading instead of the current line
(setq org-special-ctrl-a/e t)
;rebind certain one-letter keybindings when the cursor is at the beginning of the row - most notably ‘t’ for org-todo instead of ‘C-c C-t’
(setq org-startup-align-all-tables t)
(setq org-archive-location (concat org-directory "archive/%s_archive::"))
(setq org-attach-store-link-p)
;to make ido mode work in org mode as wel
(setq org-completion-use-ido t)
;allow speedkeys
(setq org-use-speed-commands t)
(setq org-speed-commands-user nil)

;;   (defun update-last-edited (beg end length)
;;     (when
;;         (and
;;          (not (org-before-first-heading-p))
;;          (org-get-heading))
;;       (org-entry-put nil "LAST-EDITED" (format-time-string "[%d-%m-%Y(%H:%M)]"))))

;; (add-hook 'org-mode-hook (lambda ()
;; (add-to-list 'after-change-functions 'update-last-edited)))

(run-at-time "00:59" 3600 'org-save-all-org-buffers)

;enable flyspelll
(add-hook 'org-mode-hook  
          (lambda ()      
            (flyspell-mode)))

;; 2. ignore message flags which can slow org 
(setq flyspell-issue-message-flag nil)

;; ignore tex commands in org 
(add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))
(defun flyspell-ignore-tex ()
  (interactive)
  (set (make-variable-buffer-local 'ispell-parser) 'tex))
(add-hook 'org-mode-hook 'flyspell-ignore-tex)

;; enable cdlatex 
;;(add-hook 'org-mode-hook 'turn-on-org-cdlatex)

;;disable linemode on org
(defun my-org-mode-hook () 
  (linum-mode 0)) 
(add-hook 'org-mode-hook 'my-org-mode-hook)

;(add-hook 'org-mode-hook (lambda () (view-mode 1)))

;; (defvar tj/last-buffer-tick nil)
;; (make-variable-buffer-local 'tj/last-buffer-tick)

;; (defun tj/new-buffer-ticks-p ()
;;   (let ((curr-tick (buffer-modified-tick))
;;         (last-tick tj/last-buffer-tick))
;;     (setq tj/last-buffer-tick curr-tick)
;;     (and last-tick (= last-tick curr-tick))))

;; (defun tj/reset-view-mode ()
;;   (run-with-timer 0 (* 5 60)
;;                   (lambda ()
;;                     (when (tj/new-buffer-ticks-p)
;;                       (view-mode t)))))

;; (add-hook 'org-mode-hook 'tj/reset-view-mode)

(setq org-support-shift-select 't)

;; when creating new headers make sure there isn't a space
(setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
;;;this will make sure there are no empty lines betwwn headers after collapsing headers 
(setq org-cycle-separator-lines 0)

(org-add-link-type
 "grep"
 (defun endless/follow-grep-link (regexp)
   "Run `rgrep' with REGEXP as argument."
   (grep-compute-defaults)
   (rgrep regexp "*" (expand-file-name "./"))))

(org-add-link-type "file+emacs+dired" 'org-open-file-with-emacs-dired)
(add-hook 'org-store-link-functions 'org-dired-store-link)

(defun org-open-file-with-emacs-dired (path)
  "Open in dired."
  (let ((d (file-name-directory path))
        (f (file-name-nondirectory path)))
    (dired d)
    (goto-char (point-min))
    (search-forward f nil t)))

(defun org-dired-store-link ()
  "Store link to files/directories from dired."
  (require 'dired+)
  (when (eq major-mode 'dired-mode)
    (let ((f (dired-get-filename)))
      (setq link (concat "file+emacs+dired" ":" f)
            desc (concat f " (dired)"))
      (org-add-link-props :link link :description desc)
      link)))

(eval-after-load "org"
  (lambda ()
    (if (assoc "\\.avi\\'" org-file-apps)
        (setcdr (assoc "\\.avi\\'" org-file-apps) "vlc %s")
      (add-to-list 'org-file-apps '("\\.avi\\'" . "vlc %s") t))
    (if (assoc "\\.mp4\\'" org-file-apps)
        (setcdr (assoc "\\.mp4\\'" org-file-apps) "vlc %s")
      (add-to-list 'org-file-apps '("\\.mp4\\'" . "vlc %s") t))))

(require 'org-id)
(setq org-id-link-to-org-use-id t)
;; Use global IDs
;; Update ID file .org-id-locations on startup
(org-id-update-id-locations)

(add-to-list 'org-modules "org-habit")

(setq org-agenda-files '("~/org/files/agenda/"))

(setq org-agenda-window-setup "current-window")
(setq org-agenda-restore-windows-after-quit t)

(run-with-idle-timer 30 t #'org-agenda-redo) ;; to rebuild it every 30 seconds

;change agenda colors
;(setq org-upcoming-deadline '(:foreground "blue" :weight bold))
;max days to show in agenda view
(setq org-agenda-ndays 10)
;start agenda from today-  don't show listings from earlier in the week
(setq org-agenda-start-on-weekday nil)
;Items that have deadlines are displayed 10 days in advance
(setq org-deadline-warning-days 10)
;don’t display items that are done in my agenda.
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-span 14)

(setq org-agenda-weekend-days '(5 6))

;; Do not dim blocked tasks
(setq org-agenda-dim-blocked-tasks nil)
;; Compact the block agenda view
(setq org-agenda-compact-blocks t)
;; Always hilight the current agenda line
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;;  Enable display of the time grid so we can see the marker for the current time
(setq org-agenda-time-grid (quote ((daily today remove-match)
                                  #("----------------" 0 16 (org-heading t))
                                  (0900 1100 1300 1500 1700))))

;; Display tags farther right
(setq org-agenda-tags-column -102)

(defun cooking-sparse-tree-breakfeast ()
  (interactive)
  (org-match-sparse-tree t "+TODO=\"COOK\"+Type=\"breakfest\""))

(defun cooking-sparse-tree-main ()
  (interactive)
  (org-match-sparse-tree t "+TODO=\"COOK\"+Type=\"main\""))

(defun cooking-sparse-tree-sweet ()
  (interactive)
  (org-match-sparse-tree t "+TODO=\"COOK\"+Type=\"sweet\""))

(defun cooking-sparse-tree-meat ()
  (interactive)
  (org-match-sparse-tree t "+TODO=\"COOK\"+Type=\"meat\""))

(defun cooking-sparse-tree-fav ()
  (interactive)
  (org-match-sparse-tree t "+Fav=\"y\""))

(setq org-agenda-exporter-settings
      '((ps-number-of-columns 2)
        (ps-landscape-mode t)
        (org-agenda-add-entry-text-maxlines 5)
        (htmlize-output-type 'css)))

(setq org-habit-graph-column 70)
(setq org-habit-show-habits-only-for-today nil)

(appt-activate 1)
(org-agenda-to-appt)

(add-hook 'org-agenda-finalize-hook (lambda ()  (org-agenda-to-appt t)))

(setq org-agenda-sorting-strategy
      '((agenda time-up priority-down tag-up effort-up category-keep)
        (todo user-defined-up todo-state-up priority-down effort-up)
        (tags user-defined-up)
        (search category-keep)))
(setq org-agenda-cmp-user-defined 'my/org-sort-agenda-items-user-defined)
(require 'cl)
(defun my/org-get-context (txt)
  "Find the context."
  (car (member-if
        (lambda (item) (string-match "@" item))
        (get-text-property 1 'tags txt))))

(defun my/org-compare-dates (a b)
  "Return 1 if A should go after B, -1 if B should go after A, or 0 if a = b."
  (cond
   ((and (= a 0) (= b 0)) nil)
   ((= a 0) 1)
   ((= b 0) -1)
   ((> a b) 1)
   ((< a b) -1)
   (t nil)))

(defun my/org-complete-cmp (a b)
  (let* ((state-a (or (get-text-property 1 'todo-state a) ""))
         (state-b (or (get-text-property 1 'todo-state b) "")))
    (or
     (if (member state-a org-done-keywords-for-agenda) 1)
     (if (member state-b org-done-keywords-for-agenda) -1))))

(defun my/org-date-cmp (a b)
  (let* ((sched-a (or (get-text-property 1 'org-scheduled a) 0))
         (sched-b (or (get-text-property 1 'org-scheduled b) 0))
         (deadline-a (or (get-text-property 1 'org-deadline a) 0))
         (deadline-b (or (get-text-property 1 'org-deadline b) 0)))
    (or
     (my/org-compare-dates
      (my/org-min-date sched-a deadline-a)
      (my/org-min-date sched-b deadline-b)))))

(defun my/org-min-date (a b)
  "Return the smaller of A or B, except for 0."
  (funcall (if (and (> a 0) (> b 0)) 'min 'max) a b))

(defun my/org-sort-agenda-items-user-defined (a b)
  ;; compare by deadline, then scheduled date; done tasks are listed at the very bottom
  (or
   (my/org-complete-cmp a b)
   (my/org-date-cmp a b)))

(defun my/org-context-cmp (a b)
  "Compare CONTEXT-A and CONTEXT-B."
  (let ((context-a (my/org-get-context a))
        (context-b (my/org-get-context b)))
    (cond
     ((null context-a) +1)
     ((null context-b) -1)
     ((string< context-a context-b) -1)
     ((string< context-b context-a) +1)
     (t nil))))

(defun my/org-sort-agenda-items-todo (a b)
  (or
   (org-cmp-time a b)
   (my/org-complete-cmp a b)
   (my/org-context-cmp a b)
   (my/org-date-cmp a b)
   (org-cmp-todo-state a b)
   (org-cmp-priority a b)
   (org-cmp-effort a b)))

(setq org-agenda-custom-commands 
'(

;;TODO sparse tree
("O" occur-tree "TODO")


 ("D" "Timeline for today" ((agenda "" ))
           ((org-agenda-ndays 1)
            ;;(org-agenda-show-log t)
           ;; (org-agenda-log-mode-items '(clock closed))
            (org-agenda-entry-types '())))





;;;;;ALL

;all common tasks (from research|bgu|home files)
("p" "all" todo "TODO|BGU|EXP" 
(
(org-agenda-files (list "~/org/files/agenda/Research.org"  "~/org/files/agenda/bgu.org" "~/org/files/agenda/home.org" ))
(org-agenda-sorting-strategy '(priority-down effort-down deadline-up))
 (org-agenda-cmp-user-defined 'my/org-sort-agenda-items-todo)
(org-columns-default-format "%50ITEM %TODO %10PRIORITY %20DEADLINE %TAGS")
))



;;;;;;;WORK;;;;;;;;;;;;;;;;;;;;;;

;work related only tasks (from research|bgu files)
("w" "work" todo "TODO|BGU|EXP" 
(
(org-agenda-files (list "~/org/files/agenda/Research.org"  "~/org/files/agenda/bgu.org" ))
;(org-agenda-sorting-strategy '(priority-down effort-down))
(org-agenda-view-columns-initially t)
;;(org-agenda-sorting-strategy '(priority-down  tag-up ))

))
         
;;;;;;;;;;;Allan;;;;;;;;;;;;;;;;;;;;
;;custom sparse tree
("L" occur-tree "allan")

; allan todos
("l" "allan tasks" tags-todo "allan"
(
(org-agenda-files (list "~/org/files/agenda/Research.org"  "~/org/files/agenda/bgu.org"))
(org-agenda-sorting-strategy '(priority-down effort-down))
))


;;;;;;;;;Joel;;;;;;;;;;;;;;;;
("j" "joel tasks" tags-todo "joel"
(
(org-agenda-files (list "~/org/files/agenda/Research.org"  "~/org/files/agenda/bgu.org"))
(org-agenda-sorting-strategy '(priority-down effort-down))
))

;;custom sparse tree
("J" occur-tree "joel")



;;;;;;;;;;;;;COOKING;;;;;;;;;;;

("f" . "Food commands")


("fb" "food" todo "COOK" 
         (
    (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.
))


("fd" "cook dessert" tags-todo "dessert" 
         (
    (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.
))


("fp" "protein" tags-todo "protein" 
         (
    (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.
))

("fo" "soup" tags-todo "soup" 
         (
    (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.
))


("fs" "side" tags-todo "side" 
         (
    (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.
))


("fb" "breakfest" tags-todo "breakfest" 
         (
    (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.
))


("fk" "drink" tags-todo "drink" 
         (
    (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.
))

("fl" "salad" tags-todo "salad" 
         (
    (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.
))




;;;;;;;;;;;;;COOKING;;;;;;;;;;;
("fc" "to cook"  tags "Cuisine=\"American\""
          (
         (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.

))




;;;;;;;;;;;;;;;;;TECH;;;;;;;;;;;;;;
("c" "tech" todo "TODO" 
         (
         (org-agenda-files '("~/org/files/agenda/TODO.org")) 
          (org-agenda-sorting-strategy 
          '(priority-up effort-down)
)
)
)

;;;;;;;;;;;;;;;;;HOME;;;;;;;;;;;;;;;;


("h" "home" todo "TODO" 
         (
         (org-agenda-files '("~/org/files/agenda/home.org")) 
          (org-agenda-sorting-strategy 
          '(priority-up effort-down)
)
)
)


("x" "Agenda and Home-related tasks"
               (
               (agenda "")
               (tags-todo "+PRIORITY=\"A\"")
               (tags "garden")
)
)




;;end brackets for setq
)
)

;;iimage in org (display images in org files)
(setq org-startup-with-inline-images t)

;;set the org image default size
;(setq org-image-actual-width nil)
(setq org-image-actual-width '(400))

(setq org-use-tag-inheritance nil)

;; (setq org-tag-faces
;;   '(("Indian" . (:foreground "#00000"))
;;      ("Asian"  . (:foreground "#C00000"))
;;      ("israeli"  . (:foreground "#C0a000"))))

(org-add-link-type
 "tag"
 (defun endless/follow-tag-link (tag)
   "Display a list of TODO headlines with tag TAG.
With prefix argument, also display headlines without a TODO keyword."
   (org-tags-view (null current-prefix-arg) tag)))

;allow fast todo
(setq org-use-fast-todo-selection t)
;allow shift-left right to change todo state
(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-todo-keywords
      (quote ((sequence "TODO(t)"  "|" "DONE(d)")
              (sequence "TASK(f)" "|" "DONE(d)")
              (sequence "STUD(s)" "|" "DONE(d)")
)))
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("TASK" :foreground "magenta" :weight bold)
              ("STUD" :foreground "orchid" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("PAUSED" :foreground "gray" :weight bold)
              ("SUBMITTED" :foreground "#FFC612" :weight bold)
              ("K_TRACK" :foreground "#45D0FF" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("PUB" :foreground "#00FF37" :weight bold)
              ("PREP" :foreground "#FF7BD0" :weight bold)
              ("SUB" :foreground "#CE008B" :weight bold)
              ("COOK" :background "#0CFB32" :foreground "#001F57" :weight bold)
              ("SHOP" :background "#9CFFBB" :foreground "#004D18" :weight bold)
              )))

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING" . t) ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

;; ;;set priority range from A to C with default A
;; (setq org-highest-priority ?A)
;; (setq org-lowest-priority ?C)
;; (setq org-default-priority ?A)

(setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
                           (?B . (:foreground "LightSteelBlue"))
                           (?C . (:foreground "OliveDrab"))))

(setq org-outline-path-complete-in-steps nil)

;;list everything instead of stepping through each level gradually
(setq org-outline-path-complete-in-steps nil)
;; Refile on top of file max
(setq org-refile-use-outline-path 'file )

; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

(require 'org-protocol)
(require 'org-capture)

;; (defadvice org-capture (around bp/org-capture--around)
;;   (flet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
;;     ad-do-it))
;; (ad-activate 'org-capture)

;; (defadvice org-capture
;;     (after make-full-window-frame activate)
;;   "Advise capture to be the only window when used as a popup"
;;   (if (equal "emacs-capture" (frame-parameter nil 'name))
;;       (delete-other-windows)))

;; (defadvice org-capture-finalize
;;     (after delete-capture-frame activate)
;;   "Advise capture-finalize to close the frame"
;;   (if (equal "emacs-capture" (frame-parameter nil 'name))
;;       (delete-frame)))

;; (defun my-capture-finalize ()
;;   (interactive)
;;   (org-capture-finalize)
;;   (delete-frame))

;; (add-hook 'org-capture-mode-hook
;;           (lambda ()
;;             (define-key org-capture-mode-map "\C-c\C-x" (function my-capture-finalize))))
;; ((lambda nil (define-key org-capture-mode-map "" (function my-capture-finalize))))

(defadvice org-capture-finalize 
  (after delete-capture-frame activate)  
   "Advise capture-finalize to close the frame"  
   (if (equal "capture" (frame-parameter nil 'name))  
       (delete-frame)))

(defadvice org-capture-destroy 
  (after delete-capture-frame activate)  
   "Advise capture-destroy to close the frame"  
   (if (equal "capture" (frame-parameter nil 'name))  
       (delete-frame)))  

(defun make-capture-frame ()
         "Create a new frame and run org-capture."
         (interactive)
         (make-frame '((name . "capture")))
         (select-frame-by-name "capture")
         (delete-other-windows)
         (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
           (org-capture)))

(setq org-capture-templates
          (quote ( 

;;;;---------------------------------------------------------------------------
;;; email


("e" "Email Todo" entry (file+headline "~/org/files/agenda/bgu.org" "TD")
                            "* TODO Read Message%? (%:fromname about %:subject)\nAdded:%U\n%a\nDEADLINE: %^t")



("E" "Etodo" entry (file+headline "~/org/files/agenda/bgu.org" "TD")
         "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n"
)


;;;;---------------------------------------------------------------------------

;;;;; food
;; define food group

("f" "Food")

;;;; new recipe Inbox
("ff" "new recipe" entry (file+headline "/home/zeltak/org/files/agenda/food.org" "Inbox")
"* COOK %^{Recipe Name} %^g     
    :PROPERTIES:
    :ID: %(org-id-uuid)
    :Time: %^{minutes|-|10|15|30|60}
    :Rating: %^{rating?|-|1|2|3|4|5}
    :Source: %^{Source?}
    :Cuisine: %^{Cuisine?|-|Indian|Thai|Vietnamese|Asian|Chinese|Israeli|Italian|American|EastEuro|Mexican|French|Persian|Austrian}
    :Type: %^{Type?|-|ain|side|starter|sweets|drinks|sauce|breakfast}
    :Serves: %^{Type?|-|1|2|4|6|8}
    :Fav: %^{}
    :END:
%^{prompt|** Ingredients}
%?
%^{prompt|** Preparation}
"
"Capture Template for food recipe")



;; add to shopping cart
("fs" "todo_shopping" entry (file+headline "~/org/files/agenda/food.org" "shopping")
"* SHOP %^{Description} " )


;;;;---------------------------------------------------------------------------
;;;; travel  simple template
  ("v" "travel" entry (file+headline "/home/zeltak/org/files/agenda/travel.org" "Inbox")
  "*  %^{Description}   %^g 
  %t 
  %^{address}p
  %^{Rating}p
  %^{URL}p
  %^{map}p
  %^{Fav}p
  %?
  "
   )

;;;;---------------------------------------------------------------------------
;;;; meetings

  ("m" "meeting" entry (file+headline "~/org/files/agenda/meetings.org" "2016")
   "* %?\n%^T" )

  ("M" "recurring" entry (file+headline "~/org/files/agenda/meetings.org" "Recurring")
   "* %?\n%^T" )


;;;;---------------------------------------------------------------------------
;;;; Tech  Todos

  ("x" "nix_TD" entry (file+headline "~/org/files/agenda/TODO.org" "TODO")
   "*  %^{Description}" )

;;;;---------------------------------------------------------------------------
;;;; Home Todos

  ("h" "Home_TD" entry (file+headline "~/org/files/agenda/home.org" "HomeTD")
   "* TODO  %?\n%T" )

;;;;---------------------------------------------------------------------------
;;; Uni todos

  ("u" "research_TD" entry (file+headline "~/org/files/agenda/research.org" "scheduled mail/calls/meetings")
   "* TODO  %?\n%T" )

  ;;;BGU todos 
  ("b" "BGU_TD" entry (file+headline "~/org/files/agenda/bgu.org" "TD")
   "* TODO  %?\n%T" )


;;;;---------------------------------------------------------------------------

  ;; for mail 
  ("r" "respond" entry (file+headline  "~/org/files/agenda/Research.org" "Mails")
   "* TODO Respond to %:from on %:subject\nSCHEDULED: %t\n\n%U\n\n%a\n\n" )

;;;;---------------------------------------------------------------------------

  ;;;;; media related 
  ("d" "Media")

  ("dm" "dl_movie" entry (file+headline "~/org/files/agenda/dl.org" "Movies")
   "*  %^{Description}  " )

  ("dp" "dl_movie_prerelease" entry (file+headline "~/org/files/agenda/dl.org" "Movies")
   "*   %^{Description}   :Pre_Release: " )

  ("dt" "dl_TV" entry (file+headline "~/org/files/agenda/dl.org" "TV")
   "*  %^{Description}" )

  ("ds" "dl_music" entry (file+headline "~/org/files/agenda/dl.org" "Music")
   "*  %^{Description}" )

  ("dc" "dl_comics" entry (file+headline "~/org/files/agenda/dl.org" "comics")
   "*  %^{Description}" )


;;;;---------------------------------------------------------------------------

("c" "Contacts" entry (file "/home/zeltak/org/files/PIM/contacts.org")
               "* %(org-contacts-template-name)
:PROPERTIES:
:EMAIL: %(org-contacts-template-email)
:END:")


;;;;---------------------------------------------------------------------------

("k" "bookmarks" entry
         (file+headline "/home/zeltak/org/files/web/wbookmarks.org" "bookmarks")
         "* %(org-cliplink-capture)  %?\nEntered on %U\n")

("K" "bookmarks" entry
         (file+headline "/home/zeltak/org/files/web/wbookmarks.org" "bookmarks")
         "* %x  %?\nEntered on %U\n")


;;;;---------------------------------------------------------------------------

("s" "Elfeed" entry (file+headline "TODO.org" "Web")
   "*  %:description
    %t
 \nLink: %a\n\n"  :immediate-finish t)

;;;;---------------------------------------------------------------------------

("p" "papers")

;;;; new recipe Inbox
("pp" "new working paper" entry (file+headline "/home/zeltak/org/files/Uni/papers/paper.meta.org" "Kloog working papers")
"* working %^{title}     
    :PROPERTIES:
    :ID: %(org-id-uuid)
    :lead: %^{lead?}
    :END:
"
"Capture Template for papers")


    )))

;;For agenda files locations, each location you add within " "
(require 'org-mobile)
(setq org-mobile-directory "~/Dropbox/MobileOrg/")
;; Set to the name of the file where new captures will be stored after pulling from mobile
(setq org-mobile-inbox-for-pull "~/org/files/from-mobile.org")

;; (defvar org-mobile-push-timer nil
;;   "Timer that `org-mobile-push-timer' used to reschedule itself, or nil.")

;; (defun org-mobile-push-with-delay (secs)
;;   (when org-mobile-push-timer
;;     (cancel-timer org-mobile-push-timer))
;;   (setq org-mobile-push-timer
;;         (run-with-idle-timer
;;          (* 1 secs) nil 'org-mobile-push)))

;; (add-hook 'after-save-hook 
;;  (lambda () 
;;    (when (eq major-mode 'org-mode)
;;      (dolist (file (org-mobile-files-alist))
;;       (if (string= (file-truename (expand-file-name (car file)))
;;                    (file-truename (buffer-file-name)))
;;            (org-mobile-push-with-delay 30)))
;;    )))

;; (run-at-time "00:05" 86400 '(lambda () (org-mobile-push-with-delay 1))) ;; refreshes agenda file each day

;; ;; Fork the work (async) of pushing to mobile
;; ;; https://gist.github.com/3111823 ASYNC org mobile push...
;; (require 'gnus-async) 
;; ;; Define a timer variable
;; (defvar org-mobile-push-timer nil
;;   "Timer that `org-mobile-push-timer' used to reschedule itself, or nil.")
;; ;; Push to mobile when the idle timer runs out
;; (defun org-mobile-push-with-delay (secs)
;;    (when org-mobile-push-timer
;;     (cancel-timer org-mobile-push-timer))
;;   (setq org-mobile-push-timer
;;         (run-with-idle-timer
;;          (* 1 secs) nil 'org-mobile-push)))
;; ;; After saving files, start an idle timer after which we are going to push 
;; (add-hook 'after-save-hook 
;;  (lambda () 
;;    (if (or (eq major-mode 'org-mode) (eq major-mode 'org-agenda-mode))
;;      (dolist (file (org-mobile-files-alist))
;;        (if (string= (expand-file-name (car file)) (buffer-file-name))
;;            (org-mobile-push-with-delay 10)))
;;      )))
;; ;; Run after midnight each day (or each morning upon wakeup?).
;; (run-at-time "00:01" 86400 '(lambda () (org-mobile-push-with-delay 1)))
;; ;; Run 1 minute after launch, and once a day after that.
;; (run-at-time "1 min" 86400 '(lambda () (org-mobile-push-with-delay 1)))

;; ;; watch mobileorg.org for changes, and then call org-mobile-pull
;; ;; http://stackoverflow.com/questions/3456782/emacs-lisp-how-to-monitor-changes-of-a-file-directory
;; (defun install-monitor (file secs)
;;   (run-with-timer
;;    0 secs
;;    (lambda (f p)
;;      (unless (< p (second (time-since (elt (file-attributes f) 5))))
;;        (org-mobile-pull)))
;;    file secs))
;; (defvar monitor-timer (install-monitor (concat org-mobile-directory "/mobileorg.org") 30)
;;   "Check if file changed every 30 s.")

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (sh . t)
   (matlab . t)
   (sqlite . t)
   (ruby . t)
   (perl . t)
   (org . t)
   (dot . t)
   (gnuplot . t)
   (octave .t)
   (plantuml . t)
   (R . t)
   ))

;; (defun my-org-confirm-babel-evaluate (lang body)
;;     (not (string= lang "emacs-lisp")))  ; don't ask for lisp
;; (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

;; enable prompt-free code running
(setq org-confirm-babel-evaluate nil        ;; for running code blocks
      org-confirm-elisp-link-function nil   ;; for elisp links
      org-confirm-shell-link-function nil)  ;; for shell links

(setq org-export-babel-evaluate nil)

;; fontify code in code blocks
(setq org-src-fontify-natively t)

;warning
(font-lock-add-keywords
 'org-mode
'(("\\(@[^@\n]+@\\)" (0 '(:foreground "#B40000" :background "#FFDDDD" :weight bold) t))))

;tip
(font-lock-add-keywords
 'org-mode
'(("\\(%[^%\n]+%\\)" (0 '(:weight ultra-bold :background "#DDFFDD" :foreground "#000000") t))))

;notice
(font-lock-add-keywords
 'org-mode
'(("\\(![^!\n]+!\\)" (0 '(:weight ultra-bold :foreground "#B40000") t))))

;high-green
(font-lock-add-keywords
 'org-mode
'(("\\('[^'\n]+'\\)" (0 '(:background "#35FF00" :weight ultra-bold) t))))

;high-yellow
(font-lock-add-keywords
 'org-mode
'(("\\(`[^`\n]+`\\)" (0 '(:foreground "#000000" :weight ultra-bold :background "#FBFF00") t))))

;
(font-lock-add-keywords
 'org-mode
'(("\\(₆[^₆\n]+₆\\)" (0 '(:foreground "#000000" :underline t :background "#FF9AEA" :weight ultra-bold) t))))

;
(font-lock-add-keywords
 'org-mode
'(("\\(₅[^₅\n]+₅\\)" (0 '(:weight ultra-bold :foreground "#1E00DE") t))))


;
(font-lock-add-keywords
 'org-mode
'(("\\(₄[^₄\n]+₄\\)" (0 '(:weight ultra-bold :foreground "#FF9800") t))))

;blusish
(font-lock-add-keywords
 'org-mode
'(("\\(•[^•\n]•+\\)" (0 '(:weight ultra-bold :foreground "#393D900") t))))


 
;;;;SPECIFIC WORDS 

;server
(font-lock-add-keywords
'org-mode
'(("\\b[Ss]erver\\b" (0 '(:weight ultra-bold :foreground "#FF9800") t))))

;client
(font-lock-add-keywords
'org-mode
'(("\\b[Cc]lient\\b" (0 '(:weight ultra-bold :foreground "#0044FF") t))))

;private
(font-lock-add-keywords
'org-mode
'(("\\b[Pp]rivate\\b" (0 '(:weight ultra-bold :foreground "#FF6767") t))))

;public
(font-lock-add-keywords
'org-mode
'(("\\b[Pp]ublic\\b" (0 '(:weight ultra-bold :foreground "#59BD7E") t))))


;In Example
(font-lock-add-keywords
'org-mode
'(("\\b[Ii]n example\\b" (0 '(:foreground "#000000" :underline t :background "#FF9AEA" :weight ultra-bold) t))))


;header
(font-lock-add-keywords
 'org-mode
'(("\\(‡[^‡\n]+‡\\)" (0 '(:foreground "#ffffff" :weight ultra-bold :slant italic :background "#59BD7F" :height 1.3) t))))

;;;FOR SPECIAL CHARACTERS

;for key shortucts
(font-lock-add-keywords
 'org-mode
'(("\\(\\?[^?\n]+\\?\\)" (0 '(:foreground "#000000" :weight ultra-bold :background "#FF9C2C") t))))

;for $Note$ 
(font-lock-add-keywords
 'org-mode
'(("\\(\\$[^$\n]+\\$\\)" (0 '(:background "#DDDDFF" :foreground "#000000" :weight ultra-bold) t))))

;for ^
(font-lock-add-keywords
 'org-mode
'(("\\(\\^[^^\n]+\\^\\)" (0 '(:weight bold  :box (:line-width 1 :color "#A5A0FF")  :foreground "#00006F" :background "#FFFFFF") t))))

;for † 
(font-lock-add-keywords
 'org-mode
'(("\\(\\†[^†\n]+\\†\\)" (0 '(:weight bold  :box (:line-width 1 :color "#A5A0FF")  :foreground "#00006F" :background "#FFFFFF") t))))

(setq org-src-fontify-natively t);; syntax highlighting the source code

;    (defun prettier-org-code-blocks ()
;      (interactive)
;      (font-lock-add-keywords nil
;        '(("\\(\+begin_src\\)"
;           (0 (progn (compose-region (match-beginning 1) (match-end 1) ?¦)
;                     nil)))
;          ("\\(\+end_src\\)"
;           (0 (progn (compose-region (match-beginning 1) (match-end 1) ?¦)
;                     nil))))))
;    (add-hook 'org-mode-hook 'prettier-org-code-blocks)

(setq org-ellipsis "⤵")

;(setq org-export-in-background t)

(require 'ox-odt)
(require 'ox-beamer)
(require 'ox-latex)

;; org v8 bundled with Emacs 24.4
(setq org-odt-preferred-output-format "docx")
;; BTW, you can assign "pdf" in above variables if you prefer PDF format

(eval-after-load 'ox '(require 'ox-koma-letter))

(eval-after-load 'ox-latex
  '(add-to-list 'org-latex-packages-alist '("AUTO" "babel" t) t))

(add-to-list 'org-latex-classes
             '("my-letter"
               "\\documentclass\{scrlttr2\}
\\usepackage[english]{babel}
\[NO-DEFAULT-PACKAGES]
\[NO-PACKAGES]
\[EXTRA]"))

(setq org-publish-project-alist
           '(
              ("Help_files"
              :base-directory "~/org/files/help/"
              :publishing-directory "~/org/files/export/"
              :section-numbers nil
              :table-of-contents nil
              :publishing-function org-ascii-publish-to-ascii
                     )
              ("econf"
              :base-directory "~/org/files/agenda/"
              :publishing-directory "~/org/files/export/"
              :section-numbers nil
              :table-of-contents nil
              :publishing-function org-html-publish-to-html
                     )
))

(setq org-export-html-validation-link nil)

org-use-sub-superscripts nil        ;; don't use `_' for subscript

(setq org-attach-directory "/home/zeltak/org/attach/files_2015/")

;; Remove splash screen
(setq inhibit-splash-screen t)

;; transient mode-importnat!
(transient-mark-mode 1)

;;winner mode by def-alut

;m use C-c <left> to restore the previous window configuration
(winner-mode 1)

; syntax highlighting everywhere
(global-font-lock-mode 1)

;;clipboard to sysclip
(setq x-select-enable-clipboard t)

;;paren mode- show visually matching parens
(show-paren-mode 1)
;show line numbers
(global-linum-mode 0) ; display line numbers in margin. Emacs 23 only

;visual line
(global-visual-line-mode 1) ; 1 for on, 0 for off.

;; don't show text in scratch buffer
(setq initial-scratch-message nil)


; Add word wrapping/wrap, may cause lines to be to short if enabled
;(global-visual-line-mode t)
(setq line-move-visual nil)


;;disable tooltips
(tooltip-mode -1)

;Start maximized, please
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized))))) ;; start maximized

; scroll one line at a time (less "jumpy" than defaults)
(setq scroll-margin 5
scroll-conservatively 9999
scroll-step 1)

(tool-bar-mode -1)

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time

(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

;make cursor blink (use -1 to disable):
(blink-cursor-mode -1)

;;Keep the cursor steady when scrolling
(setq scroll-preserve-screen-position t)

(define-key-after global-map [menu-bar file lang-modes] 
  (cons "Language Modes" (make-sparse-keymap "major modes")) 'kill-buffer )

(define-key global-map [menu-bar file lang-modes bash] '("Bash" . sh-mode))
(define-key global-map [menu-bar file lang-modes org] '("Org" . org-mode))
(define-key global-map [menu-bar file lang-modes tcl] '("TCL" . tcl-mode))
(define-key global-map [menu-bar file lang-modes ruby] '("Ruby" . ruby-mode))
(define-key global-map [menu-bar file lang-modes python] '("Python" . python-mode))
(define-key global-map [menu-bar file lang-modes php] '("PHP" . php-mode))
(define-key global-map [menu-bar file lang-modes perl] '("Perl" . cperl-mode))
(define-key global-map [menu-bar file lang-modes separator1] '("--"))
(define-key global-map [menu-bar file lang-modes haskell] '("Haskell" . haskell-mode))
(define-key global-map [menu-bar file lang-modes ocaml] '("OCaml" . tuareg-mode))
(define-key global-map [menu-bar file lang-modes elisp] '("Emacs Lisp" . emacs-lisp-mode))
(define-key global-map [menu-bar file lang-modes separator2] '("--"))
(define-key global-map [menu-bar file lang-modes latex] '("LaTeX" . latex-mode))
(define-key global-map [menu-bar file lang-modes js] '("Javascript" . js2-mode))
(define-key global-map [menu-bar file lang-modes xml] '("XML (xml-mode)" . xml-mode))
(define-key global-map [menu-bar file lang-modes nxml] '("XML (nxml-mode)" . nxml-mode))
(define-key global-map [menu-bar file lang-modes html] '("HTML" . html-mode))
(define-key global-map [menu-bar file lang-modes htmlhelper] '("HTML (html-helper-mode)" . html-helper-mode))
(define-key global-map [menu-bar file lang-modes css] '("CSS" . css-mode))
(define-key global-map [menu-bar file lang-modes separator3] '("--"))
(define-key global-map [menu-bar file lang-modes java] '("Java" . java-mode))
(define-key global-map [menu-bar file lang-modes c++] '("C++" . c++-mode))
(define-key global-map [menu-bar file lang-modes c] '("C" . c-mode))

;; (easy-menu-define zmenu global-map "zglobal-menu"
;;   '("zglobal"
     
;; ("Programs" ;; submenu
;;        [""  (djcb-term-start-or-switch "mutt" t)]
;;        ["mc"    (djcb-term-start-or-switch "mc" t)]
;;        ["htop"  (djcb-term-start-or-switch "htop" t)]
;;        ["iotop" (djcb-term-start-or-switch "iotop" t)])
  
;;      ;; http://emacs-fu.blogspot.com/2009/03/math-formulae-in-webpages.html
;;      ;; this submenu is only visible when in org--mode
;;      ("Org"  :visible (or (string= major-mode "org-mode") (string= major-mode "org-mode"))
;;        ["Insert formula"   texdrive-insert-formula :help "Insert some formula"]
;;        ["Generate images"  texdrive-generate-images :help "(Re)generate the images for the formulae"])
     
;;      ;; http://emacs-fu.blogspot.com/2009/03/twitter.html
;;      ("Twitter" ;; submenu
;;        ["View friends" twitter-get-friends-timeline]
;;        ["What are you doing?" twitter-status-edit])

;;      ("Misc"  ;; submenu
;;        ;; http://emacs-fu.blogspot.com/2009/01/counting-words.html
;;        ["Count words" djcb-count-words]

;;        ;;http://emacs-fu.blogspot.com/2008/12/showing-line-numbers.html
;;        ["Show/hide line numbers" linum]

;;        ;; http://emacs-fu.blogspot.com/2008/12/running-emacs-in-full-screen-mode.html
;;        ["Toggle full-screen" djcb-fullscreen-toggle])))

(easy-menu-define zorg org-mode-map "zorg-menu"
  '("zorg"
     ;; http://emacs-fu.blogspot.com/2008/12/running-console-programs-inside-emacs.html
     ("images" ;; submenu
       ["org toggle inline"  (org-toggle-inline-images t)]
       ["mc"    (fun1  t)]
       ["htop"  (fun2  t)]
       ["iotop" (fun3  t)])
     
     ;; http://emacs-fu.blogspot.com/2009/03/twitter.html
     ("Twitter" ;; submenu
       ["View friends" twitter-get-friends-timeline]
       ["What are you doing?" twitter-status-edit])

     ("Misc"  ;; submenu
       ;; http://emacs-fu.blogspot.com/2009/01/counting-words.html
       ["Count words" djcb-count-words]

       ;;http://emacs-fu.blogspot.com/2008/12/showing-line-numbers.html
       ["Show/hide line numbers" linum]

       ;; http://emacs-fu.blogspot.com/2008/12/running-emacs-in-full-screen-mode.html
       ["Toggle full-screen" djcb-fullscreen-toggle])))

(setq custom-safe-themes t)

;; sample code for setting a background color depending on file name extension

; (defun my-set-theme-on-mode ()
;   "set background color depending on file suffix"
;   (interactive)
;   (let ((fileNameSuffix (file-name-extension (buffer-file-name) ) ))
;     (cond
;      ((string= fileNameSuffix "py" ) (set-background-color "honeydew"))
;      ((string= fileNameSuffix "txt" ) (set-background-color "cornsilk"))
;      (t (message "%s" "no match found"))
;      )
;     ))
;
; (add-hook 'find-file-hook 'my-set-theme-on-mode)

;color in emacs mode
(setq evil-emacs-state-cursor '("cyan" box))
;nomral state mode
(setq evil-normal-state-cursor '("green" box))
;visual state mode
(setq evil-visual-state-cursor '("orange" box))
;inset state mode
(setq evil-insert-state-cursor '("red" box))
(setq evil-replace-state-cursor '("red" box))
(setq evil-operator-state-cursor '("red" hollow))

;; Make sizes human-readable by default, sort version numbers
;; correctly, and put dotfiles and capital-letters first.
(setq-default dired-listing-switches "-alhv --group-directories-first ")

(setq dired-dwim-target t)

(setq dired-recursive-deletes 'always); “always” means no asking
;Always recursively copy directory
;(setq dired-recursive-copies 'top) ; “top” means ask once
(setq dired-recursive-copies 'always) ; never ask

;; ;; Allow running multiple async commands simultaneously
;; (defadvice shell-command (after shell-in-new-buffer (command &optional output-buffer error-buffer))
;;   (when (get-buffer "*Async Shell Command*")
;;     (with-current-buffer "*Async Shell Command*"
;;       (rename-uniquely))))
;; (ad-activate 'shell-command)

(require 'find-dired)
(setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))

;; Allow running multiple async commands simultaneously
(defadvice shell-command (after shell-in-new-buffer (command &optional output-buffer error-buffer))
  (when (get-buffer "*Async Shell Command*")
    (with-current-buffer "*Async Shell Command*"
      (rename-uniquely))))
(ad-activate 'shell-command)

(setq-default dired-omit-mode t)

;To activate it, add this to your .emacs
(setq-default dired-omit-mode t)
;To toggle the mode, bind it to a keystroke that you like
(define-key dired-mode-map (kbd "C-o") 'dired-omit-mode)

(defun my-mark-file-name-for-rename ()
    "Mark file name on current line except its extension"
    (interactive)

    ;; get the file file name first
    ;; full-name: full file name
    ;; extension: extension of the file
    ;; base-name: file name without extension
    (let ((full-name (file-name-nondirectory (dired-get-filename)))
          extension base-name)
      
      ;; check if it's a dir or a file
      ;; TODO not use if, use switch case check for symlink
      (if (file-directory-p full-name)
          (progn
            ;; if file name is directory, mark file name should mark the whole
            ;; file name
            (call-interactively 'end-of-line) ;move the end of line
            (backward-char (length full-name)) ;back to the beginning
            (set-mark (point))
            (forward-char (length full-name)))
        (progn
          ;; if current file is a file, mark file name mark only the base name,
          ;; exclude the extension
          (setq extension (file-name-extension full-name))
          (setq base-name (file-name-sans-extension full-name))
          (call-interactively 'end-of-line)
          (backward-char (length full-name))
          (set-mark (point))
          (forward-char (length base-name))))))

  (defun my-mark-file-name-forward ()
    "Mark file name on the next line"
    (interactive)
    (deactivate-mark)
    (next-line)
    (my-mark-file-name-for-rename))

  (defun my-mark-file-name-backward ()
    "Mark file name on the next line"
    (interactive)
    (deactivate-mark)
    (previous-line)
    (my-mark-file-name-for-rename))

;; (eval-after-load 'wdired
;;   (progn
;;     (define-key wdired-mode-map (kbd "d") 'my-mark-file-name-forward))

;; Handle zip compression
(eval-after-load "dired-aux"
  '(add-to-list 'dired-compress-file-suffixes
                '("\\.zip\\'" ".zip" "unzip")))

(add-hook 'isearch-mode-end-hook 
  (lambda ()
    (when (and (eq major-mode 'dired-mode)
           (not isearch-mode-end-hook-quit))
      (dired-find-file))))



(add-hook 'isearch-mode-end-hook 
  (lambda ()
    (when (and (eq major-mode 'sunrise-mode)
           (not isearch-mode-end-hook-quit))
      (dired-find-file))))

(define-key dired-mode-map (kbd "<left>") 'diredp-up-directory-reuse-dir-buffer )
 (define-key dired-mode-map (kbd "<right>") 'diredp-find-file-reuse-dir-buffer )
 (define-key dired-mode-map (kbd "S-RET") 'dired-open-in-external-app )
;; (define-key dired-mode-map (kbd "/") 'isearch-forward )
 (define-key dired-mode-map (kbd "/") 'dired-narrow )
 (define-key dired-mode-map (kbd "S-.") 'helm-dired-recent-dirs-view )
 (define-key dired-mode-map (kbd  "\\") 'hydra-dired-chd/body )
 (define-key dired-mode-map (kbd  "`") 'hydra-dired-leader/body )
 (define-key dired-mode-map (kbd  "<f1>") 'dired-do-async-shell-command   )
 (define-key dired-mode-map (kbd  "<f2>") 'dired-efap   )
 (define-key dired-mode-map (kbd  "<f3>") 'dired-view-file   )
 (define-key dired-mode-map (kbd  "<f5>") 'dired-do-copy  )
 (define-key dired-mode-map (kbd  "<f6>") 'dired-do-rename  )
 (define-key dired-mode-map (kbd  "<f7>") 'dired-create-directory  )
 (define-key dired-mode-map (kbd  "<f9>") 'eshell  )
 (define-key dired-mode-map (kbd  "y") 'tda/rsync-multiple-mark-file )
 (define-key dired-mode-map (kbd  "p") 'tda/rsync-multiple )
 (define-key dired-mode-map (kbd  "<C-return>") 'dired-open-file )
 (define-key dired-mode-map (kbd  "<C-a>") 'dired-mark-subdir-files )
 (define-key dired-mode-map (kbd  "S-<f1>") 'hydra-toggles/body  )
 (define-key dired-mode-map (kbd  "S-<f3>") 'hydra-spell/body  )
 (define-key dired-mode-map (kbd  "S-<f4>") 'hydra-org-blocks/body  )
 (define-key dired-mode-map (kbd  "S-<f5>") 'hydra-mu4e/body  )
 (define-key dired-mode-map (kbd  "S-<f6>") 'hydra-bib/body  )
 (define-key dired-mode-map (kbd  "S-<f9>") 'hydra-org/body  )

(global-set-key
    (kbd "")
 (defhydra hydra-dired-leader  (:color blue  :columns 4 :hints nil)
 "
【s】sort 【+】 add dir 【&/!】 open with 【M-n】 cycle diredx guesses 【(】 toggle dired details 
【C/R/D/S】 copy/move(rename)/delete/symlink 【S-5-m】 mark by string // ^test(start with) txtDOLLAR (end with) 
【*s】 mark all 【*t】 invert mark 【*d】 mark for deletion 【k】 hide marked 【g】unhide mark 【*.】 mark by extension 【g】 refresh
【Q】query replace marked files 【o】open file new window 【V】open file read only 【i】open dir-view below
【b】preview file 【v】 viewer for ranger-copies using 【C-u】 saves the content of the clip after the paste
【C-enter】 open via dired-open 【a】 replaces the current (dired) buffer with the selected file/directory
【C-u C-u】 prefix to work on all files 【C-x E//D】add//union arbitrary files to an existing Dired buffer
 "
 ("/" dired-toggle-sudo  "dired toggle sudo" :face 'hydra-face-red ) 
 ("1" hydra-dired-operations/body "dired operations" )
 ("2" hydra-dired-searches/body "dired searches" )
 ("a" dired-mark-subdir-files "mark all" )
 ("c" z/dired-copy-setdirs "copy to dirs"  :face 'hydra-face-red )
 ("C" z/dired-copy-setdirs-recurs "copy to dirs-RECURSE"   :face 'hydra-face-red  )
 ("m" z/dired-move-setdirs  "move to dirs-RECURSE"   :face 'hydra-face-red  )            
 ("M" z/dired-move-setdirs-recurs   "move to dirs-RECURSE"   :face 'hydra-face-red  )            
 ("z" dired-filter-load-saved-filters "load filter")
 ("Z" hydra-dired-filter/body "filter menu")
 ("h"  nil )
 ("o" z/dired-open-in-desktop "open with FM" )
 ("s"  z/dired-sort-menu "sort menu" )
 ("n"  z/dired-get-size "get size" )
 ("r" wdired-change-to-wdired-mode "wdired (bath rename)" )
 ("u"  diredfd-do-unpack "unpack"   :face 'hydra-face-brown  )
 ("U"  z/dired-archive-unrar "unrar" :face 'hydra-face-brown )
 ("p"  diredfd-do-pack  "pack" :face 'hydra-face-brown )
 ("Y"  dired-ranger-copy "copy2clip" )
 ("P"  dired-ranger-paste "paste_F_clip")
 ("D" dired-ranger-move "move2clip")
 ("f" z/dired-shell-fb "fb" )
 ("x"  z/dired-shell-chmodx "+x" )
 ("r"  wdired-change-to-wdired-mode "wdired (bath rename)" )
 (";"  nil )
 ("q"  nil )

 ))

(global-set-key
   (kbd "")
(defhydra hydra-dired-chd  (:color blue :hint nil :columns 4)

"
"
("a" (find-file "~/AUR/") "AUR" )
("2" (find-file "/home/zeltak/mounts/lraid/Download/transmission/completed/") "P2P" )
("3" (find-file "/home/zeltak/mounts/lraid/r/") "P2P" )
("b"  (find-file "~/bin/") "bin" )
("c"  (find-file "~/.config/") "config")
("d" (find-file "~/Downloads/")    "Downloads" )
("e"  (find-file "~/.emacs.d/") "Emacs.d")
("E"  (find-file "~/.emacs.g/") "Emacs.g")
("f"  nil )
("g"  nil )
("h"  (find-file "~/") "HOME" )
("i"  nil )
("j"  nil )
("k"  (find-file "~/BK/") "BK" )
("l"  (find-file "~/MLT/") "MLT")
("m"  (find-file "~/music/") "music" )
("n"  nil )
("o"  (find-file "~/org/files/") "Org" )
("p"  (find-file "/home/zeltak/Sync/Uni/pdf_lib") "pdf lib" )
("r"  (find-file "~/mreview/") "mreview" )
("s"  (find-file "~/Sync/") "Sync" )
("S"  (find-file "~/scripts/" "scripts") )
("t"  (find-file "~/mounts/" "mounts") )
("u"  (find-file "~/Uni//") "Uni" )
("v"  nil)
("w"  (find-file "~/dotfiles/") "dotfiles" )
("x"  z/buffer-close-andmove-other  "close window" :face 'hydra-face-red  )
("y"  nil )
("z"  (find-file "~/ZH_tmp//") "ZH_tmp" )
("/"  (find-file "/") "Root")
("q" nil  )

))

(defhydra hydra-dired-filter  (:color blue :hint nil :columns 5)
      "
Filter by:
      "
     ("e" dired-filter-by-extension  "extension"  :face 'hydra-face-brown ) 
     ("r" dired-filter-by-regexp  "regex" :face 'hydra-face-brown ) 
     ("f" dired-filter-by-file  "file"  :face 'hydra-face-brown ) 
     ("n" dired-filter-by-name  "name"  :face 'hydra-face-brown ) 
     ("S" dired-filter-save-filters  "save filter" ) 
     ("l" dired-filter-load-saved-filters  "load filter"  :face 'hydra-face-brown ) 
     ("L" dired-filter-add-saved-filters "add ontop filter"  :face 'hydra-face-brown ) 
     ("z" dired-filter-mode "toggle (clear) filter"  :face 'hydra-face-brown ) 
     ("d" find-name-dired  "find file dired" ) 
     ("g" find-grep-dired  "find grep dired" ) 
      ("q" nil "cancel" nil)
 )

(defhydra hydra-dired-configs (:color blue )
     "
     "
    ("o" dired-omit-mode  "dired omit" ) 
    ("t" dired-details-toggle  "dired details" ) 
    ("w" wdired-change-to-wdired-mode  "wdired" ) 
     ("q" nil "cancel" nil)
)

(defhydra hydra-dired-operations  (:color blue :hint nil :columns 5)
      "
Filter by:
      "
     ("b" (execute-kbd-macro (symbol-function 'z/dired-macro-beetimp))  "beet import" ) 
     ("d"  z/dired-shell-ncdu  "ncdu" ) 
     ("nm" z/dired-shell-nmap-hlan  "nmap" ) 
     ("ns" z/dired-shell-netstat  "netstat") 
     ("o" z/del-nonorg-files  "delete non org" ) 
     ("m" z/dired-media-info  "media-info" ) 
     ("cd" z/dired-shell-doc2docx  "doc2docx" ) 
     ("cp" z/dired-shell-pdf2text  "pdf2text" ) 
     ("is" xah-dired-scale-image  "scale" ) 
     ("ic" xah-dired-image-autocrop  "autocrop" ) 
     ("ij" xah-dired-2jpg  "to-jpg" ) 
     ("ip" xah-dired-2png "to-png" ) 
      ("q" nil "cancel" nil)
 )

(defhydra hydra-dired-searches  (:color blue :hint nil :columns 5)
      "
Filter by:
      "
     ("i" z/dired-search-imdb "imdb" ) 
     ("g" z/dired-search-google "google" ) 
     ("m" z/dired-search-allmusic "allmusic" ) 
      ("q" nil "cancel" nil)
 )

(defun z/del-nonorg-files ()
(interactive)
(dired-mark-files-regexp "\\.org$") 
(dired-toggle-marks)
(dired-do-delete)
)

(defun z/dired-open-in-external-app ()
  "Open the current file or dired marked files in external app.
The app is chosen from your OS's preference."
  (interactive)
  (let* (
         (ξfile-list
          (if (string-equal major-mode "dired-mode")
              (dired-get-marked-files)
            (list (buffer-file-name))))
         (ξdo-it-p (if (<= (length ξfile-list) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))))

    (when ξdo-it-p
      (cond
       ((string-equal system-type "windows-nt")
        (mapc
         (lambda (fPath)
           (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t))) ξfile-list))
       ((string-equal system-type "darwin")
        (mapc
         (lambda (fPath) (shell-command (format "open \"%s\"" fPath)))  ξfile-list))
       ((string-equal system-type "gnu/linux")
        (mapc
         (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "xdg-open" fPath))) ξfile-list))))))

(defun z/dired-open-in-desktop ()
  "Show current file in desktop (OS's file manager)."
  (interactive)
  (cond
   ((string-equal system-type "windows-nt")
    (w32-shell-execute "explore" (replace-regexp-in-string "/" "\\" default-directory t t)))
   ((string-equal system-type "darwin") (shell-command "open ."))
   ((string-equal system-type "gnu/linux")
    (let ((process-connection-type nil)) (start-process "" nil "xdg-open" "."))
    ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. ⁖ with nautilus
    ) ))

(defun z/dired-get-size ()
 (interactive)
 (let ((files (dired-get-marked-files)))
   (with-temp-buffer
     (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
     (message "Size of all marked files: %s"
              (progn 
                (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
                 (match-string 1))))))

;; (defun  z/dired-beet-importx ()
;;     "Uses beets to import folder"
;;    (interactive)
;;   (dired-do-async-shell-command (concat "beet import -s" (dired-file-name-at-point))))

(defun  z/dired-media-info ()
     "media info "
     (interactive)
     (shell-command (concat "mediainfo "  (dired-file-name-at-point)
)))

(defun  z/dired-shell-netstat ()
 "netstat"
(interactive)
(z/visit-ansi-term)
(term-send-input)
(insert "netstat -tlnp" )
(term-send-input)
)

(defun  z/dired-shell-nmap-hlan ()
 "nmap-hlan"
(interactive)
(z/visit-ansi-term)
(term-send-input)
(insert "nmap -sP 192.168.0.1/24" )
(term-send-input)
)

(defun  z/dired-shell-fb ()
     "Uses fb to upload file at point."
     (interactive)
     (shell-command (concat "fb " (dired-file-name-at-point)))
     (message (propertize "Uploaded to FB" 'face 'font-lock-warning-face))
)

(defun z/dired-shell-chmodx ()
     "chmod"
     (interactive)
     (shell-command (concat "chmod +x " (dired-file-name-at-point)))
;;; to refresh view use revert buffer  
    (revert-buffer)
    (message (propertize "changed mode to executable" 'face 'font-lock-warning-face))
 )

(defun z/dired-ssh-qnap ()
    "chmod"
    (interactive)
    (shell-command (concat "sshfs -p 12121 admin@10.0.0.2:/share/MD0_DATA/ /home/zeltak/mounts/lraid " (dired-file-name-at-point)))
    (message (propertize "connected to ssh" 'face 'font-lock-warning-face))
)

(defun z/dired-nmap-network ()
"map all available IP on my netwrok"
(interactive)
(sr-term )
(insert " nmap -sP 10.0.0.1/24" )
(eshell-send-input)
)

(defun z/dired-sort-menu ()
  "Sort dired dir listing in different ways.
Prompt for a choice.
URL `http://ergoemacs.org/emacs/dired_sort.html'
Version 2015-07-30"
  (interactive)
  (let (ξsort-by ξarg)
    (setq ξsort-by (ido-completing-read "Sort by:" '( "date" "size" "name" "dir")))
    (cond
     ((equal ξsort-by "name") (setq ξarg "-Al --si --time-style long-iso "))
     ((equal ξsort-by "date") (setq ξarg "-Al --si --time-style long-iso -t"))
     ((equal ξsort-by "size") (setq ξarg "-Al --si --time-style long-iso -S"))
     ((equal ξsort-by "dir") (setq ξarg "-Al --si --time-style long-iso --group-directories-first"))
     (t (error "logic error 09535" )))
    (dired-sort-other ξarg )))

;; Use ido
(require 'ido)

;; Make a hash table to hold the paths
(setq my-target-dirs (make-hash-table :test 'equal))

;; A function to return all the keys from a hash.
(defun get-keys-from-hash (hash)
  (let ((keys ()))
    (maphash (lambda (k v) (push k keys)) hash)
    keys))

;; And the function to prompt for a directory by keyword that is looked
;; up in the hash-table and used to build the target path from the
;; value of the lookup.
(defun z/dired-copy-setdirs ()
  (interactive)
  (let* ((my-hash my-target-dirs)
         (files (dired-get-marked-files))
         (keys (get-keys-from-hash my-hash)))
    (mapc (lambda (file)
            (copy-file file
                       (concat
                        (gethash
                         (ido-completing-read
                          (concat "copy " file " to: ") keys) my-hash)
                        (file-name-nondirectory file))))
          files)))


(defun z/dired-move-setdirs ()
  (interactive)
  (let* ((my-hash my-target-dirs)
         (files (dired-get-marked-files))
         (keys (get-keys-from-hash my-hash)))
    (mapc (lambda (file)
            (rename-file file
                       (concat
                        (gethash
                         (ido-completing-read
                          (concat "move" file " to: ") keys) my-hash)
                        (file-name-nondirectory file))))
          files)))

;; Put some paths in the hash (sorry for Unix pathnames)
(puthash "home" "/home/zeltak/" my-target-dirs)
(puthash "AUR" "/home/zeltak/AUR/" my-target-dirs)
(puthash "downloads" "/home/zeltak/Downloads/ " my-target-dirs)
(puthash "ZH_tmp" "/home/zeltak/ZH_tmp/" my-target-dirs)
(puthash "music" "/home/zeltak/music/" my-target-dirs)
(puthash "bin" "/home/zeltak/bin/" my-target-dirs)
(puthash "BK" "/home/zeltak/BK/" my-target-dirs)
(puthash "org" "/home/zeltak/org/" my-target-dirs)
(puthash "mreview" "/home/zeltak/mreview/" my-target-dirs)
(puthash "Sync" "/home/zeltak/Sync/" my-target-dirs)
(puthash "Uni" "/home/zeltak/Uni/" my-target-dirs)
(puthash "scripts" "/home/zeltak/scripts" my-target-dirs)
(puthash "dotfiles" "/home/zeltak/dotfiles/" my-target-dirs)
(puthash "config" "/home/zeltak/.config/" my-target-dirs)
(puthash "conv" "/home/zeltak/ZH_tmp/$CONV" my-target-dirs)

(defun z/dired-copy-setdirs-recurs ()
  (interactive)
  (let* ((my-hash my-target-dirs)
         (files (dired-get-marked-files))
         (keys (get-keys-from-hash my-hash)))
    (mapc (lambda (file)
            (let ((target (gethash
                           (ido-completing-read
                            (concat "copy " file " to: ") keys) my-hash)))
              (if (y-or-n-p "Descend?")
                  ;; Descend into subdirectories relative to target dir
                  (let ((new-target (ido-read-directory-name "new dir: " target))) 
                    (copy-file file (concat new-target
                                            (file-name-nondirectory file)))
                    (message (concat "File: " file " was copied to " new-target)))
                ;; Else copy to root of originally selected directory
                (copy-file file (concat target (file-name-nondirectory file)))
                (message (concat "File: " file " was copied to " target)))))
          files)))

(defun z/dired-move-setdirs-recurs ()
  (interactive)
  (let* ((my-hash my-target-dirs)
         (files (dired-get-marked-files))
         (keys (get-keys-from-hash my-hash)))
    (mapc (lambda (file)
            (let ((target (gethash
                           (ido-completing-read
                            (concat "move " file " to: ") keys) my-hash)))
              (if (y-or-n-p "Descend?")
                  ;; Descend into subdirectories relative to target dir
                  (let ((new-target (ido-read-directory-name "new dir: " target))) 
                    (rename-file file (concat new-target
                                            (file-name-nondirectory file)))
                    (message (concat "File: " file " was moved to " new-target)))
                ;; Else copy to root of originally selected directory
                (rename-file file (concat target (file-name-nondirectory file)))
                (message (concat "File: " file " was moved to " target)))))
          files)))

(defun z/dired--next-image ()
  (interactive)
  (save-excursion 
    (with-current-buffer "*image-dired*"
      (image-dired-forward-image)
      (image-dired-display-thumbnail-original-image))))

(defun z/dired-prev-image ()
  (interactive)
  (save-excursion 
    (with-current-buffer "*image-dired*"
      (image-dired-backward-image)
      (image-dired-display-thumbnail-original-image))))

(defun x/dired-insert-current-image-path ()
  (interactive)
  (insert
   (concat
    "[["
    (save-excursion
      (with-current-buffer "*image-dired*"
        (image-dired-original-file-name)))
    "]]")))

(defun xah-process-image (φfile-list φargs-str φnew-name-suffix φnew-name-file-suffix )
  "Wrapper to ImageMagick's “convert” shell command.
φfile-list is a list of image file paths.
φargs-str is argument string passed to ImageMagick's “convert” command.
φnew-name-suffix is the string appended to file. e.g. “_new” gets you “…_new.jpg”
φnew-name-file-suffix is the new file's file extension. e.g. “.png”

URL `http://ergoemacs.org/emacs/emacs_dired_convert_images.html'
Version 2015-10-19"
  (require 'dired)
  (mapc
   (lambda (ξf)
     (let ( newName cmdStr )
       (setq newName
             (concat
              (file-name-sans-extension ξf)
              φnew-name-suffix
              φnew-name-file-suffix))
       (while (file-exists-p newName)
         (setq newName
               (concat
                (file-name-sans-extension newName)
                φnew-name-suffix
                (file-name-extension newName t))))
       ;; relative paths used to get around Windows/Cygwin path remapping problem
       (setq cmdStr
             (format
              "convert %s '%s' '%s'" 
              φargs-str 
              (file-relative-name ξf) 
              (file-relative-name newName)))
       (shell-command cmdStr)))
   φfile-list )
  (revert-buffer))

(defun xah-dired-scale-image (φfile-list φscale-percentage φsharpen?)
  "Create a scaled version of images of marked files in dired.
The new names have “-s” appended before the file name extension.

If `universal-argument' is given, output is PNG format. Else, JPG.

When called in lisp code,
 φfile-list is a list.
 φscale-percentage is a integer.
 φsharpen? is true or false.

Requires ImageMagick unix shell command.
URL `http://ergoemacs.org/emacs/emacs_dired_convert_images.html'
Version 2015-03-10"
  (interactive
   (let (
         (myFileList
          (cond
           ((string-equal major-mode "dired-mode") (dired-get-marked-files))
           ((string-equal major-mode "image-mode") (list (buffer-file-name)))
           (t (list (read-from-minibuffer "file name:"))))))
     (list myFileList
           (read-from-minibuffer "Scale %:")
           (y-or-n-p "Sharpen"))))
  (let ((sharpenOrNo (if φsharpen? "-sharpen 1" "" ))
        (outputSuffix (if current-prefix-arg ".png" ".jpg" )))
    (xah-process-image φfile-list
                       (format "-scale %s%% -quality 85%% %s " φscale-percentage sharpenOrNo)
                       "-s" outputSuffix )))

(defun xah-dired-image-autocrop (φfile-list φoutput-image-type-suffix)
  "Create a new auto-cropped version of images of marked files in dired.
Requires ImageMagick shell command.

If `universal-argument' is given, output is PNG format. Else, JPG.
URL `http://ergoemacs.org/emacs/emacs_dired_convert_images.html'
Version 2015-03-10"
  (interactive
   (let (
         (myFileList
          (cond
           ((string-equal major-mode "dired-mode") (dired-get-marked-files))
           ((string-equal major-mode "image-mode") (list (buffer-file-name)))
           (t (list (read-from-minibuffer "file name:")))))
         (φoutput-image-type-suffix (if current-prefix-arg ".png" ".jpg" )))
     (list myFileList φoutput-image-type-suffix)))
  (xah-process-image φfile-list "-trim" "-cropped" φoutput-image-type-suffix ))

(defun xah-dired-2png (φfile-list)
  "Create a png version of images of marked files in dired.
Requires ImageMagick shell command.
URL `http://ergoemacs.org/emacs/emacs_dired_convert_images.html'
Version 2015-03-10"
  (interactive
   (let (
         (myFileList
          (cond
           ((string-equal major-mode "dired-mode") (dired-get-marked-files))
           ((string-equal major-mode "image-mode") (list (buffer-file-name)))
           (t (list (read-from-minibuffer "file name:"))))))
     (list myFileList)))
  (xah-process-image φfile-list "" "-2" ".png" ))

(defun xah-dired-2jpg (φfile-list)
  "Create a JPG version of images of marked files in dired.
Requires ImageMagick shell command.
URL `http://ergoemacs.org/emacs/emacs_dired_convert_images.html'
Version 2015-03-10"
  (interactive
   (let (
         (myFileList
          (cond
           ((string-equal major-mode "dired-mode") (dired-get-marked-files))
           ((string-equal major-mode "image-mode") (list (buffer-file-name)))
           (t (list (read-from-minibuffer "file name:") )) ) ) )
     (list myFileList) )
   )
  (xah-process-image φfile-list "" "-2" ".jpg" ))

(defun  z/dired-shell-doc2docx ()
    "Uses fb to upload file at point."
    (interactive)
    (shell-command (concat "libreoffice --headless --convert-to docx " (dired-file-name-at-point))))

 ;; (add-hook 'dired-mode-hook '(lambda () 
 ;;                               (local-set-key (kbd "O") 'cygstart-in-dired)))

(defun  z/dired-shell-pdf2text ()
    "Uses fb to upload file at point."
    (interactive)
    (shell-command (concat "pdftotext " (dired-file-name-at-point))))

 ;; (add-hook 'dired-mode-hook '(lambda () 
 ;;                               (local-set-key (kbd "O") 'cygstart-in-dired)))

(defun  z/dired-shell-ncdu ()
 "ncdu"
(interactive)
(z/visit-ansi-term)
(term-send-input)
(insert "ncdu" )
(term-send-input)
)

(defun  z/dired-shell-sshfs-qnap ()
     "ssh qnap"
     (interactive)
   (z/visit-ansi-term)
(term-send-input)
    (insert "sshfs -p 12121 admin@10.0.0.2:/share/MD0_DATA/ /home/zeltak/mounts/lraid  " )
(term-send-input)
)

(defun  z/dired-archive-unrar ()
    "Uses beets to import folder"
    (interactive)
    (shell-command (concat "unrar x" (dired-file-name-at-point))))

(defun  z/dired-search-imdb ()
     "imdb point "
     (interactive)
     (shell-command (concat "surfraw imdb " (directory-file-name (file-relative-name (dired-file-name-at-point))) 
)))

(defun  z/dired-search-google ()
     "google point "
     (interactive)
     (shell-command (concat "surfraw google " (directory-file-name (file-relative-name (dired-file-name-at-point))) 
)))

(defun  z/dired-search-allmusic ()
     "allmusic point "
     (interactive)
     (shell-command (concat "surfraw yubnub allmusic  " (directory-file-name (file-relative-name (dired-file-name-at-point))) 
)))

(fset 'z/dired-macro-beetimp
   [?& ?b ?e ?e ?t ?  ?i ?m ?p ?o ?r ?t ])

(fset 'z/dired-macro-beetimp-single
   [?& ?b ?e ?e ?t ?  ?i ?m ?p ?o ?r ?t ?- ?s ])

;; Always hilight the current agenda line
(add-hook 'dired-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)

;; (define-key dired-mode-map "c" 'dired-do-compress-to)

;; (defvar dired-compress-files-alist
;;   '(("\\.tar\\.gz\\'" . "tar -c %i | gzip -c9 > %o")
;;     ("\\.zip\\'" . "zip %o -r --filesync %i"))
;;   "Control the compression shell command for `dired-do-compress-to'.

;; Each element is (REGEXP . CMD), where REGEXP is the name of the
;; archive to which you want to compress, and CMD the the
;; corresponding command.

;; Within CMD, %i denotes the input file(s), and %o denotes the
;; output file. %i path(s) are relative, while %o is absolute.")

(eval-after-load "dired-aux"
   '(add-to-list 'dired-compress-file-suffixes 
                 '("\\.zip\\'" ".zip" "unzip")))

(eval-after-load "dired"
  '(define-key dired-mode-map "z" 'dired-zip-files))
(defun dired-zip-files (zip-file)
  "Create an archive containing the marked files."
  (interactive "sEnter name of zip file: ")

  ;; create the zip file
  (let ((zip-file (if (string-match ".zip$" zip-file) zip-file (concat zip-file ".zip"))))
    (shell-command 
     (concat "zip " 
             zip-file
             " "
             (concat-string-list 
              (mapcar
               '(lambda (filename)
                  (file-name-nondirectory filename))
               (dired-get-marked-files))))))

  (revert-buffer)

  ;; remove the mark on all the files  "*" to " "
  ;; (dired-change-marks 42 ?\040)
  ;; mark zip file
  ;; (dired-mark-files-regexp (filename-to-regexp zip-file))
  )

(defun concat-string-list (list) 
   "Return a string which is a concatenation of all elements of the list separated by spaces" 
    (mapconcat '(lambda (obj) (format "%s" obj)) list " "))

(defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
(defalias 'list-buffers 'ibuffer) ; always use ibuffer
(defalias '~ 'make-backup)
(defalias 'lp 'list-packages)
(defalias 'lm 'lini)
(defalias 'rr 'regex-replace)
(defalias 'em 'evil-mode)
(defalias 'iss 'ispell) ;check spelling on buffer or region if marked
(defalias 'bks 'bmkp-save-menu-list-state) ;check spelling on buffer or region if marked

(defalias 'sl 'sort-lines)
(defalias 'rr 'reverse-region)
(defalias 'rs 'replace-string)
(defalias 'g 'grep)
(defalias 'gf 'grep-find)
(defalias 'fd 'find-dired)
(defalias 'rb 'revert-buffer)
(defalias 'sh 'shell)
(defalias 'ps 'powershell)
(defalias 'fb 'flyspell-buffer)
(defalias 'sbc 'set-background-color)
(defalias 'rof 'recentf-open-files)
(defalias 'lcd 'list-colors-display)

; major modes
(defalias 'hm 'html-mode)
(defalias 'tm 'text-mode)
(defalias 'elm 'emacs-lisp-mode)
(defalias 'om 'org-mode)
(defalias 'ssm 'shell-script-mode)
(defalias 'html6-mode 'xah-html6-mode)

; minor modes
(defalias 'wsm 'whitespace-mode)
(defalias 'gwsm 'global-whitespace-mode)
(defalias 'dsm 'desktop-save-mode)
(defalias 'acm 'auto-complete-mode)
(defalias 'vlm 'visual-line-mode)
(defalias 'glm 'global-linum-mode)

; elisp
(defalias 'eb 'eval-buffer)
(defalias 'er 'eval-region)
(defalias 'ed 'eval-defun)
(defalias 'eis 'elisp-index-search)
(defalias 'lf 'load-file)


;escapes
(defalias '\\ 'escape-quotes-region)
(defalias '\[ 'remove-square-brackets)
(defalias '\" 'replace-straight-quotes)

;; stop asking whether to save newly added abbrev when quitting emacs
;(setq save-abbrevs t)
(setq save-abbrevs 'silently)

;; turn on abbrev mode globally
(setq-default abbrev-mode t)

(setq abbrev-file-name "/home/zeltak/.emacs.d/abbrv/personal_abbrv.txt")

(load "/home/zeltak/.emacs.d/abbrv/personal_abbrv.txt")

(load "/home/zeltak/.emacs.d/abbrv/common_abbrv.txt")

(load "/home/zeltak/.emacs.d/abbrv/misc_abbrv.txt")

(define-generic-mode 'vimrc-generic-mode
    '()
    '()
    '(("^[\t ]*:?\\(!\\|ab\\|map\\|unmap\\)[^\r\n\"]*\"[^\r\n\"]*\\(\"[^\r\n\"]*\"[^\r\n\"]*\\)*$"
       (0 font-lock-warning-face))
      ("\\(^\\|[\t ]\\)\\(\".*\\)$"
      (2 font-lock-comment-face))
      ("\"\\([^\n\r\"\\]\\|\\.\\)*\""
       (0 font-lock-string-face)))
    '("/vimrc\\'" "\\.vim\\(rc\\)?\\'")
    '((lambda ()
        (modify-syntax-entry ?\" ".")))
    "Generic mode for Vim configuration files.")

(if (string= system-name "zuni") 
(progn

(defvar xah-filelist nil "alist for files i need to open frequently. Key is a short abbrev, Value is file path.")
(setq xah-filelist
      '(
        ("z" . "~/ZH_tmp/" )
        ("k " . "~/BK/" )
        ("l" . "~/org/files/Tech/linux.org" )
        ("f" . "~/org/files/agenda/food.org" )
        ("v" . "~/org/files/Home/travel.org" )
        ("h" . "~/org/files/Home/home.org" )
        ("m" . "~/org/files/from-mobile.org" )
        ("v" . "~/org/files/files/agenda/travel.org" )
        ("h" . "~/org/files/files/Home/home.org" )
        ("p" . "~/org/files/files/uni/papers/papers.org" )
        ("E" . "~/.emacs.d/init.el" )
        ("B" . "/home/zeltak/.config/beets/config.yaml" )
        ("S" . "~/.config/sxhkd/sxhkdrc" )
        ("I" . "~/.i3/config" )
        ("X" . "~/.xinitrc" )
        ("B" . "~/.interrobangrc" )
        ("Z" . "~/.zshrc" )
        ("o" . "~/org/attach/" )
        ) )
)

(progn

(defvar xah-filelist nil "alist for files i need to open frequently. Key is a short abbrev, Value is file path.")
(setq xah-filelist
      '(
       ("z" . "~/ZH_tmp/" )
        ("k " . "~/BK/" )
        ("l" . "~/org/files/Tech/linux.org" )
        ("f" . "~/org/files/agenda/food.org" )
        ("v" . "~/org/files/Home/travel.org" )
        ("h" . "~/org/files/Home/home.org" )
        ("m" . "~/org/files/from-mobile.org" )
        ("v" . "~/org/files/files/agenda/travel.org" )
        ("h" . "~/org/files/files/Home/home.org" )
        ("p" . "~/org/files/files/uni/papers/papers.org" )
        ("E" . "~/.emacs.d/init.el" )
        ("B" . "/home/zeltak/.config/beets/config.yaml" )
        ("S" . "~/.config/sxhkd/sxhkdrc" )
        ("I" . "~/.i3/config" )
        ("X" . "~/.xinitrc" )
        ("B" . "~/.interrobangrc" )
        ("Z" . "~/.zshrc" )
        ("o" . "~/org/attach/" )
        ) )
)
)

(defun z/dired-jump-folders  (openCode)
  "Prompt to open a file from a pre-defined set."
  (interactive
   (list (ido-completing-read "Open:" (mapcar (lambda (x) (car x)) xah-filelist)))
   )
  (find-file (cdr (assoc openCode xah-filelist)) ) )

(add-to-list 'load-path "/home/zeltak/.emacs.g/extra/edit-server/")
(require 'edit-server)
(edit-server-start)

(add-to-list 'load-path "/home/zeltak/.emacs.g/ESS/lisp/")
(load "ess-site")

(setq comint-scroll-to-bottom-on-input t)
(setq comint-scroll-to-bottom-on-output t)
(setq comint-move-point-for-output t)

;don't ask to save file
;(setq ess-ask-about-transfile nil)
(setq ess-ask-about-transfile nil)

(setq ess-ask-for-ess-directory nil)
;define deault ess dir
(setq ess-directory "/home/zeltak/ZH_tmp/")

(setq ess-local-process-name "Runi")

(setq ess-history-directory "~/.essrhist/")

(defun clear-shell ()
   (interactive)
   (let ((old-max comint-buffer-maximum-size))
     (setq comint-buffer-maximum-size 0)
     (comint-truncate-buffer)
     (setq comint-buffer-maximum-size old-max)))

(add-hook 'inferior-ess-mode-hook
    '(lambda nil
          (define-key inferior-ess-mode-map [\C-up]
              'comint-previous-matching-input-from-input)
          (define-key inferior-ess-mode-map [\C-down]
              'comint-next-matching-input-from-input)
          (define-key inferior-ess-mode-map [\C-x \t]
              'comint-dynamic-complete-filename)
     )
 )

(setq ess-eval-visibly 'nowait)

(defmacro csetq (variable value)
  `(funcall (or (get ',variable 'custom-set)
                'set-default)
            ',variable ,value))

(csetq ediff-window-setup-function 'ediff-setup-windows-plain)

(csetq ediff-split-window-function 'split-window-horizontally)

(csetq ediff-diff-options "-w")

(defun ora-ediff-hook ()
  (ediff-setup-keymap)
  (define-key ediff-mode-map "j" 'ediff-next-difference)
  (define-key ediff-mode-map "k" 'ediff-previous-difference))

(add-hook 'ediff-mode-hook 'ora-ediff-hook)

(winner-mode)
(add-hook 'ediff-after-quit-hook-internal 'winner-undo)

(when (string= system-name "zuni")
(add-to-list 'load-path "~/mu/mu4e/")
)

(require 'mu4e)
(require 'mu4e-contrib) 
;;;;$Note-this may screw up header updates$ 
;(mu4e-maildirs-extension)
;; list of my email addresses.
(setq mu4e-user-mail-address-list '("ikloog@gmail.com"
                                    "ikloog@bgu.ac.il"
                                    "ekloog@hsph.harvard.edu"))

(fset 'z/mu4e-del-exe
    [?d ?x ?y ])

;;for the function
(defun z/mu4e-del-exe-func ()
  (interactive)
(execute-kbd-macro (symbol-function 'z/mu4e-del-exe)) 
    )

(fset 'z/mu4e-flag-exe
    [?+ ?x ?y ])

;;for the function
(defun z/mu4e-flag-exe-func ()
  (interactive)
(execute-kbd-macro (symbol-function 'z/mu4e-flag-exe)) 
    )

(fset 'z/mu4e-unflag-exe
    [?- ?x ?y ])

;;for the function
(defun z/mu4e-unflag-exe-func ()
  (interactive)
(execute-kbd-macro (symbol-function 'z/mu4e-unflag-exe)) 
    )

(setq mu4e-update-interval 60)
(setq mu4e-headers-auto-update t)
(setq mu4e-index-update-error-warning  t)
(setq mu4e-index-update-error-continue   t)

;; something about ourselves
(setq
   user-mail-address "ikloog@gmail.com"
   user-full-name  "itai kloog "
   mu4e-compose-signature
    (concat
      "itai kloog\n"
      "http://www.bgu.ac.il\n"))

(setq mu4e-compose-signature-auto-include 't)

(require 'mu4e)

;; default
;; (setq mu4e-maildir "~/Maildir")

(setq mu4e-drafts-folder "/[Gmail].Drafts")
(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
(setq mu4e-trash-folder  "/[Gmail].Trash")

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; (See the documentation for `mu4e-sent-messages-behavior' if you have
;; additional non-Gmail addresses and want assign them different
;; behavior.)

;; setup some handy shortcuts
;; you can quickly switch to your Inbox -- press ``ji''
;; then, when you want archive some messages, move them to
;; the 'All Mail' folder by pressing ``ma''.

(setq mu4e-maildir-shortcuts
    '( ("/INBOX"               . ?i)
       ("/[Gmail].Sent Mail"   . ?s)
       ("/[Gmail].Trash"       . ?t)
       ("/[Gmail].All Mail"    . ?a)))

;; allow for updating mail using 'U' in the main view:
;(setq mu4e-get-mail-command "offlineimap")

;; sending mail -- replace USERNAME with your gmail username
;; also, make sure the gnutls command line utils are installed
;; package 'gnutls-bin' in Debian/Ubuntu

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
   starttls-use-gnutls t
   smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
   smtpmail-auth-credentials
     '(("smtp.gmail.com" 587 "ikloog@gmail.com" nil))
   smtpmail-default-smtp-server "smtp.gmail.com"
   smtpmail-smtp-server "smtp.gmail.com"
   smtpmail-smtp-service 587)

;; setup some handy shortcuts
;; you can quickly switch to your Inbox -- press ``ji''
;; then, when you want archive some messages, move them to
;; the 'All Mail' folder by pressing ``ma''.

(setq mu4e-maildir-shortcuts
    '( ("INBOX"               . ?i)
       ("Starred"   . ?r)
       ("/[Gmail].Sent Mail"   . ?s)
       ("/[Gmail].Trash"       . ?t)
       ("/[Gmail].All Mail"    . ?a)))

(define-key mu4e-headers-mode-map (kbd "w") 'z/mu4e-del-exe-func )
(define-key mu4e-headers-mode-map (kbd "f") 'z/mu4e-flag-exe-func )
(define-key mu4e-headers-mode-map (kbd "F") 'z/mu4e-unflag-exe-func )

mu4e-compose-dont-reply-to-self t                  ; don't reply to myself

;;store org-mode links to messages
(require 'org-mu4e)
;;store link to message if in header view, not to header query
(setq org-mu4e-link-query-in-headers-mode nil)

;; don't save messages to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; alternatively, for emacs-24 you can use:
;;(setq message-send-mail-function 'smtpmail-send-it
;;     smtpmail-stream-type 'starttls
;;     smtpmail-default-smtp-server "smtp.gmail.com"
;;     smtpmail-smtp-server "smtp.gmail.com"
;;     smtpmail-smtp-service 587)

(setq mu4e-date-format-long "%d/%m/%Y (%H:%M:%S)")
(setq mu4e-headers-date-format "%d/%m/%Y (%H:%M:%S)")

;can define a horizontal or vertical split 
(setq mu4e-split-view 'horizontal)

;; use 'fancy' non-ascii characters in various places in mu4e
(setq mu4e-use-fancy-chars t)
;; attempt to show images when viewing messages
(setq mu4e-view-show-images t)

(when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
;preffer html  
(setq mu4e-view-prefer-html t)

;; Silly mu4e only shows names in From: by default. Of course we also  want the addresses.
(setq mu4e-view-show-addresses t)

;; mu4e-action-view-in-browser is built into mu4e
;; by adding it to these lists of custom actions
;; it can be invoked by first pressing a, then selecting
(add-to-list 'mu4e-headers-actions
             '("in browser" . mu4e-action-view-in-browser) t)
(add-to-list 'mu4e-view-actions
             '("in browser" . mu4e-action-view-in-browser) t)

;; the headers to show in the headers list -- a pair of a field
;; and its width, with `nil' meaning 'unlimited'
;; (better only use that for the last field.
;; These are the defaults:
(setq mu4e-headers-fields
    '( (:date          .  25)
       (:flags         .   6)
       (:from          .  22)
       (:subject       .  nil)))


;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

(require 'mu4e-contrib) 
(setq mu4e-html2text-command 'mu4e-shr2text) 
;(setq mu4e-html2text-command "w3m -I utf8 -O utf8 -T text/html")

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)
;; (See the documentation for `mu4e-sent-messages-behavior' if you have
;; additional non-Gmail addresses and want assign them different
;; behavior.)

(setq mu4e-attachment-dir
  (lambda (fname mtype)
    (cond
      ;; docfiles go to ~/Desktop
      ((and fname (string-match "\\.pdf$" fname))  "~/Downloads/")
      ((and fname (string-match "\\.doc$" fname))  "~/Uni/")
      ;; ... other cases  ...
      (t "~/Downloads")))) ;; everything else

(defun mml-attach-file--go-to-eob (orig-fun &rest args)
  "Go to the end of buffer before attaching files."
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-max))
      (apply orig-fun args))))

(advice-add 'mml-attach-file :around #'mml-attach-file--go-to-eob)

(add-to-list 'mu4e-bookmarks
  '("flag:flagged"       "flagged"     ?b))

;; (setq mu4e-headers-fields
;;     '( (:date          .  25)
;;        (:flags         .   6)
;;        (:from          .  22)
;;        (:subject       .  nil)))

(defgroup mu4e-faces nil 
  "Type faces (fonts) used in mu4e." 
  :group 'mu4e 
  :group 'faces) 

(defface mu4e-basic-face 
  '((t :inherit font-lock-keyword-face)) 
  "Basic Face." 
  :group 'mu4e-faces) 

(defface mu4e-list-default 
  '((t :inherit mu4e-basic-face)) 
  "Basic list Face." 
  :group 'mu4e-faces) 

(defface mu4e-rw-default 
  '((t :inherit mu4e-basic-face)) 
  "Basic rw Face." 
  :group 'mu4e-faces)

;; basic face from where the rest inherits 
 '(mu4e-basic-face ((t :inherit font-lock-keyword-face :weight normal :foreground "Gray10"))) 

;; read-write group 
 '(mu4e-rw-default ((t :inherit mu4e-basic-face))) ;; face from where all the read/write faces inherits 
 '(mu4e-header-face ((t :inherit mu4e-rw-default))) 
 '(mu4e-header-marks-face ((t :inherit mu4e-rw-default))) 
 '(mu4e-header-title-face ((t :inherit mu4e-rw-default))) 
 '(mu4e-header-highlight-face ((t :inherit mu4e-rw-default :foreground "Black" :background "LightGray"))) 
 '(mu4e-compose-header-face ((t :inherit mu4e-rw-default))) 
 '(mu4e-compose-separator-face ((t :inherit mu4e-rw-default :foreground "Gray30" :weight bold))) 
 '(mu4e-footer-face ((t :inherit mu4e-rw-default))) 
 '(mu4e-contact-face ((t :inherit mu4e-rw-default :foreground "Black"))) 
 '(mu4e-cited-1-face ((t :inherit mu4e-rw-default :foreground "Gray10"))) 
 '(mu4e-cited-2-face  ((t :inherit mu4e-cited-1-face :foreground "Gray20"))) 
 '(mu4e-cited-3-face   ((t :inherit mu4e-cited-2-face :foreground "Gray30"))) 
 '(mu4e-cited-4-face    ((t :inherit mu4e-cited-3-face :foreground "Gray40"))) 
 '(mu4e-cited-5-face     ((t :inherit mu4e-cited-4-face :foreground "Gray50"))) 
 '(mu4e-cited-6-face      ((t :inherit mu4e-cited-5-face :foreground "Gray60"))) 
 '(mu4e-cited-7-face       ((t :inherit mu4e-cited-6-face :foreground "Gray70"))) 
 '(mu4e-link-face ((t :inherit mu4e-rw-default :foreground "Blue" :weight bold))) 
 '(mu4e-system-face ((t :inherit mu4e-rw-defaul :foreground "DarkOrchid"))) 
 '(mu4e-url-number-face ((t :inherit mu4e-rw-default :weight bold))) 
 '(mu4e-attach-number-face ((t :inherit mu4e-rw-default :weight bold :foreground "Blue"))) 

;; lists (headers) group 
 '(mu4e-list-default ((t :inherit mu4e-basic-face))) ;; basic list face from where lists inherits 
 '(mu4e-draft-face ((t :inherit mu4e-list-default))) 
 '(mu4e-flagged-face ((t :inherit mu4e-list-default :weight bold :foreground "Black"))) 
 '(mu4e-forwarded-face ((t :inherit mu4e-list-default))) 
 '(mu4e-list-default-face ((t :inherit mu4e-list-default))) 
 '(mu4e-title-face ((t :inherit mu4e-list-default))) 
 '(mu4e-trashed-face ((t :inherit mu4e-list-default))) 
 '(mu4e-warning-face ((t :inherit mu4e-list-default :foreground "OrangeRed1"))) 
 '(mu4e-modeline-face ((t :inherit mu4e-list-default))) 
 '(mu4e-moved-face ((t :inherit mu4e-list-default))) 
 '(mu4e-ok-face ((t :inherit mu4e-list-default :foreground "ForestGreen"))) 
 '(mu4e-read-face ((t :inherit mu4e-list-default :foreground "Gray80"))) 
 '(mu4e-region-code-face ((t :inherit mu4e-list-default :background "Gray25"))) 
 '(mu4e-replied-face ((t :inherit mu4e-list-default :foreground "Black"))) 
 '(mu4e-unread-face ((t :inherit mu4e-list-default :foreground "Blue"))) 
 '(mu4e-highlight-face ((t :inherit mu4e-unread-face))) 

 '(mu4e-special-header-value-face ((t :inherit mu4e-contact-face))) 
 '(mu4e-header-key-face ((t :inherit mu4e-contact-face :foreground "Gray50"))) 
 '(mu4e-header-value-face ((t :inherit mu4e-contact-face))) 
 '(message-cited-text ((t :inherit mu4e-rw-default :foreground "Gray10")))

;; Function to return first name of email recipient
;; Used by yasnippet
;; Based closely on
;; http://blog.binchen.org/posts/how-to-use-yasnippets-to-produce-email-templates-in-emacs.html
(defun my-yas-get-first-name-from-to-field ()
  (let ((rlt "NAME") str rlt2)
    (save-excursion
      (goto-char (point-min))
      ;; first line in email could be some hidden line containing NO to field
      (setq str (buffer-substring-no-properties (point-min) (point-max))))
    ;; take name from TO field
    (when (string-match "^To: \"?\\([^ ,]+\\)" str)
      (setq rlt (match-string 1 str)))
    ;;get name in FROM field if available
    (when (string-match "^\\([^ ,\n]+\\).+writes:$" str)
      (progn (setq rlt2 (match-string 1 str))
             ;;prefer name in FROM field if TO field has "@"
             (when (string-match "@" rlt)
               (setq rlt rlt2))
             ))
    (message "rlt=%s" rlt)
    rlt))
